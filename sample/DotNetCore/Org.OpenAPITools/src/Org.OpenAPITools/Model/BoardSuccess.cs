/*
 * kabuステーションAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BoardSuccess
    /// </summary>
    [DataContract(Name = "BoardSuccess")]
    public partial class BoardSuccess : IEquatable<BoardSuccess>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoardSuccess" /> class.
        /// </summary>
        /// <param name="symbol">銘柄コード.</param>
        /// <param name="symbolName">銘柄名.</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証| |5|福証| |6|札証|.</param>
        /// <param name="exchangeName">市場名称.</param>
        /// <param name="currentPrice">現値.</param>
        /// <param name="currentPriceTime">現値時刻.</param>
        /// <param name="currentPriceChangeStatus">現値前値比較 |定義値|説明| |-|-| |0000|事象なし| |0056|変わらず| |0057|UP| |0058|DOWN| |0059|中断板寄り後の初値| |0060|ザラバ引け| |0061|板寄り引け| |0062|中断引け| |0063|ダウン引け| |0064|逆転終値| |0066|特別気配引け| |0067|一時留保引け| |0068|売買停止引け| |0069|サーキットブレーカ引け| |0431|ダイナミックサーキットブレーカ引け|.</param>
        /// <param name="currentPriceStatus">現値ステータス |定義値|説明| |-|-| |1|現値| |2|不連続歩み| |3|板寄せ| |4|システム障害| |5|中断| |6|売買停止| |7|売買停止・システム停止解除| |8|終値| |9|システム停止| |10|概算値| |11|参考値| |12|サーキットブレイク実施中| |13|システム障害解除| |14|サーキットブレイク解除| |15|中断解除| |16|一時留保中| |17|一時留保解除| |18|ファイル障害| |19|ファイル障害解除| |20|Spread/Strategy| |21|ダイナミックサーキットブレイク発動| |22|ダイナミックサーキットブレイク解除| |23|板寄せ約定|.</param>
        /// <param name="calcPrice">計算用現値.</param>
        /// <param name="previousClose">前日終値.</param>
        /// <param name="previousCloseTime">前日終値日付.</param>
        /// <param name="changePreviousClose">前日比.</param>
        /// <param name="changePreviousClosePer">騰落率.</param>
        /// <param name="openingPrice">始値.</param>
        /// <param name="openingPriceTime">始値時刻.</param>
        /// <param name="highPrice">高値.</param>
        /// <param name="highPriceTime">高値時刻.</param>
        /// <param name="lowPrice">安値.</param>
        /// <param name="lowPriceTime">安値時刻.</param>
        /// <param name="tradingVolume">売買高.</param>
        /// <param name="tradingVolumeTime">売買高時刻.</param>
        /// <param name="vWAP">売買高加重平均価格（VWAP）.</param>
        /// <param name="tradingValue">売買代金.</param>
        /// <param name="bidQty">最良売気配数量.</param>
        /// <param name="bidPrice">最良売気配値段.</param>
        /// <param name="bidTime">最良売気配時刻.</param>
        /// <param name="bidSign">最良売気配フラグ |定義値|説明| |-|-| |0000|事象なし| |0101|一般気配| |0102|特別気配| |0103|注意気配| |0107|寄前気配| |0108|停止前特別気配| |0109|引け後気配| |0116|寄前気配約定成立ポイントなし| |0117|寄前気配約定成立ポイントあり| |0118|連続約定気配| |0119|停止前の連続約定気配| |0120|買い上がり売り下がり中|.</param>
        /// <param name="marketOrderSellQty">売成行数量.</param>
        /// <param name="sell1">sell1.</param>
        /// <param name="sell2">sell2.</param>
        /// <param name="sell3">sell3.</param>
        /// <param name="sell4">sell4.</param>
        /// <param name="sell5">sell5.</param>
        /// <param name="sell6">sell6.</param>
        /// <param name="sell7">sell7.</param>
        /// <param name="sell8">sell8.</param>
        /// <param name="sell9">sell9.</param>
        /// <param name="sell10">sell10.</param>
        /// <param name="askQty">最良買気配数量.</param>
        /// <param name="askPrice">最良買気配値段.</param>
        /// <param name="askTime">最良買気配時刻.</param>
        /// <param name="askSign">最良買気配フラグ |定義値|説明| |-|-| |0000|事象なし| |0101|一般気配| |0102|特別気配| |0103|注意気配| |0107|寄前気配| |0108|停止前特別気配| |0109|引け後気配| |0116|寄前気配約定成立ポイントなし| |0117|寄前気配約定成立ポイントあり| |0118|連続約定気配| |0119|停止前の連続約定気配| |0120|買い上がり売り下がり中|.</param>
        /// <param name="marketOrderBuyQty">買成行数量.</param>
        /// <param name="buy1">buy1.</param>
        /// <param name="buy2">buy2.</param>
        /// <param name="buy3">buy3.</param>
        /// <param name="buy4">buy4.</param>
        /// <param name="buy5">buy5.</param>
        /// <param name="buy6">buy6.</param>
        /// <param name="buy7">buy7.</param>
        /// <param name="buy8">buy8.</param>
        /// <param name="buy9">buy9.</param>
        /// <param name="buy10">buy10.</param>
        /// <param name="overSellQty">OVER気配数量.</param>
        /// <param name="underBuyQty">UNDER気配数量.</param>
        /// <param name="totalMarketValue">時価総額.</param>
        public BoardSuccess(string symbol = default(string), string symbolName = default(string), int exchange = default(int), string exchangeName = default(string), double currentPrice = default(double), DateTime currentPriceTime = default(DateTime), string currentPriceChangeStatus = default(string), int currentPriceStatus = default(int), double calcPrice = default(double), double previousClose = default(double), DateTime previousCloseTime = default(DateTime), double changePreviousClose = default(double), double changePreviousClosePer = default(double), double openingPrice = default(double), DateTime openingPriceTime = default(DateTime), double highPrice = default(double), DateTime highPriceTime = default(DateTime), double lowPrice = default(double), DateTime lowPriceTime = default(DateTime), double tradingVolume = default(double), DateTime tradingVolumeTime = default(DateTime), double vWAP = default(double), double tradingValue = default(double), double bidQty = default(double), double bidPrice = default(double), DateTime bidTime = default(DateTime), string bidSign = default(string), double marketOrderSellQty = default(double), BoardSuccessSell1 sell1 = default(BoardSuccessSell1), BoardSuccessSell2 sell2 = default(BoardSuccessSell2), BoardSuccessSell3 sell3 = default(BoardSuccessSell3), BoardSuccessSell4 sell4 = default(BoardSuccessSell4), BoardSuccessSell5 sell5 = default(BoardSuccessSell5), BoardSuccessSell6 sell6 = default(BoardSuccessSell6), BoardSuccessSell7 sell7 = default(BoardSuccessSell7), BoardSuccessSell8 sell8 = default(BoardSuccessSell8), BoardSuccessSell9 sell9 = default(BoardSuccessSell9), BoardSuccessSell10 sell10 = default(BoardSuccessSell10), double askQty = default(double), double askPrice = default(double), DateTime askTime = default(DateTime), string askSign = default(string), double marketOrderBuyQty = default(double), BoardSuccessBuy1 buy1 = default(BoardSuccessBuy1), BoardSuccessBuy2 buy2 = default(BoardSuccessBuy2), BoardSuccessBuy3 buy3 = default(BoardSuccessBuy3), BoardSuccessBuy4 buy4 = default(BoardSuccessBuy4), BoardSuccessBuy5 buy5 = default(BoardSuccessBuy5), BoardSuccessBuy6 buy6 = default(BoardSuccessBuy6), BoardSuccessBuy7 buy7 = default(BoardSuccessBuy7), BoardSuccessBuy8 buy8 = default(BoardSuccessBuy8), BoardSuccessBuy9 buy9 = default(BoardSuccessBuy9), BoardSuccessBuy10 buy10 = default(BoardSuccessBuy10), double overSellQty = default(double), double underBuyQty = default(double), double totalMarketValue = default(double))
        {
            this.Symbol = symbol;
            this.SymbolName = symbolName;
            this.Exchange = exchange;
            this.ExchangeName = exchangeName;
            this.CurrentPrice = currentPrice;
            this.CurrentPriceTime = currentPriceTime;
            this.CurrentPriceChangeStatus = currentPriceChangeStatus;
            this.CurrentPriceStatus = currentPriceStatus;
            this.CalcPrice = calcPrice;
            this.PreviousClose = previousClose;
            this.PreviousCloseTime = previousCloseTime;
            this.ChangePreviousClose = changePreviousClose;
            this.ChangePreviousClosePer = changePreviousClosePer;
            this.OpeningPrice = openingPrice;
            this.OpeningPriceTime = openingPriceTime;
            this.HighPrice = highPrice;
            this.HighPriceTime = highPriceTime;
            this.LowPrice = lowPrice;
            this.LowPriceTime = lowPriceTime;
            this.TradingVolume = tradingVolume;
            this.TradingVolumeTime = tradingVolumeTime;
            this.VWAP = vWAP;
            this.TradingValue = tradingValue;
            this.BidQty = bidQty;
            this.BidPrice = bidPrice;
            this.BidTime = bidTime;
            this.BidSign = bidSign;
            this.MarketOrderSellQty = marketOrderSellQty;
            this.Sell1 = sell1;
            this.Sell2 = sell2;
            this.Sell3 = sell3;
            this.Sell4 = sell4;
            this.Sell5 = sell5;
            this.Sell6 = sell6;
            this.Sell7 = sell7;
            this.Sell8 = sell8;
            this.Sell9 = sell9;
            this.Sell10 = sell10;
            this.AskQty = askQty;
            this.AskPrice = askPrice;
            this.AskTime = askTime;
            this.AskSign = askSign;
            this.MarketOrderBuyQty = marketOrderBuyQty;
            this.Buy1 = buy1;
            this.Buy2 = buy2;
            this.Buy3 = buy3;
            this.Buy4 = buy4;
            this.Buy5 = buy5;
            this.Buy6 = buy6;
            this.Buy7 = buy7;
            this.Buy8 = buy8;
            this.Buy9 = buy9;
            this.Buy10 = buy10;
            this.OverSellQty = overSellQty;
            this.UnderBuyQty = underBuyQty;
            this.TotalMarketValue = totalMarketValue;
        }

        /// <summary>
        /// 銘柄コード
        /// </summary>
        /// <value>銘柄コード</value>
        [DataMember(Name = "Symbol", EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// 銘柄名
        /// </summary>
        /// <value>銘柄名</value>
        [DataMember(Name = "SymbolName", EmitDefaultValue = true)]
        public string SymbolName { get; set; }

        /// <summary>
        /// 市場コード |定義値|説明| |-|-| |1|東証| |3|名証| |5|福証| |6|札証|
        /// </summary>
        /// <value>市場コード |定義値|説明| |-|-| |1|東証| |3|名証| |5|福証| |6|札証|</value>
        [DataMember(Name = "Exchange", EmitDefaultValue = true)]
        public int Exchange { get; set; }

        /// <summary>
        /// 市場名称
        /// </summary>
        /// <value>市場名称</value>
        [DataMember(Name = "ExchangeName", EmitDefaultValue = true)]
        public string ExchangeName { get; set; }

        /// <summary>
        /// 現値
        /// </summary>
        /// <value>現値</value>
        [DataMember(Name = "CurrentPrice", EmitDefaultValue = true)]
        public double CurrentPrice { get; set; }

        /// <summary>
        /// 現値時刻
        /// </summary>
        /// <value>現値時刻</value>
        [DataMember(Name = "CurrentPriceTime", EmitDefaultValue = true)]
        public DateTime CurrentPriceTime { get; set; }

        /// <summary>
        /// 現値前値比較 |定義値|説明| |-|-| |0000|事象なし| |0056|変わらず| |0057|UP| |0058|DOWN| |0059|中断板寄り後の初値| |0060|ザラバ引け| |0061|板寄り引け| |0062|中断引け| |0063|ダウン引け| |0064|逆転終値| |0066|特別気配引け| |0067|一時留保引け| |0068|売買停止引け| |0069|サーキットブレーカ引け| |0431|ダイナミックサーキットブレーカ引け|
        /// </summary>
        /// <value>現値前値比較 |定義値|説明| |-|-| |0000|事象なし| |0056|変わらず| |0057|UP| |0058|DOWN| |0059|中断板寄り後の初値| |0060|ザラバ引け| |0061|板寄り引け| |0062|中断引け| |0063|ダウン引け| |0064|逆転終値| |0066|特別気配引け| |0067|一時留保引け| |0068|売買停止引け| |0069|サーキットブレーカ引け| |0431|ダイナミックサーキットブレーカ引け|</value>
        [DataMember(Name = "CurrentPriceChangeStatus", EmitDefaultValue = true)]
        public string CurrentPriceChangeStatus { get; set; }

        /// <summary>
        /// 現値ステータス |定義値|説明| |-|-| |1|現値| |2|不連続歩み| |3|板寄せ| |4|システム障害| |5|中断| |6|売買停止| |7|売買停止・システム停止解除| |8|終値| |9|システム停止| |10|概算値| |11|参考値| |12|サーキットブレイク実施中| |13|システム障害解除| |14|サーキットブレイク解除| |15|中断解除| |16|一時留保中| |17|一時留保解除| |18|ファイル障害| |19|ファイル障害解除| |20|Spread/Strategy| |21|ダイナミックサーキットブレイク発動| |22|ダイナミックサーキットブレイク解除| |23|板寄せ約定|
        /// </summary>
        /// <value>現値ステータス |定義値|説明| |-|-| |1|現値| |2|不連続歩み| |3|板寄せ| |4|システム障害| |5|中断| |6|売買停止| |7|売買停止・システム停止解除| |8|終値| |9|システム停止| |10|概算値| |11|参考値| |12|サーキットブレイク実施中| |13|システム障害解除| |14|サーキットブレイク解除| |15|中断解除| |16|一時留保中| |17|一時留保解除| |18|ファイル障害| |19|ファイル障害解除| |20|Spread/Strategy| |21|ダイナミックサーキットブレイク発動| |22|ダイナミックサーキットブレイク解除| |23|板寄せ約定|</value>
        [DataMember(Name = "CurrentPriceStatus", EmitDefaultValue = true)]
        public int CurrentPriceStatus { get; set; }

        /// <summary>
        /// 計算用現値
        /// </summary>
        /// <value>計算用現値</value>
        [DataMember(Name = "CalcPrice", EmitDefaultValue = true)]
        public double CalcPrice { get; set; }

        /// <summary>
        /// 前日終値
        /// </summary>
        /// <value>前日終値</value>
        [DataMember(Name = "PreviousClose", EmitDefaultValue = true)]
        public double PreviousClose { get; set; }

        /// <summary>
        /// 前日終値日付
        /// </summary>
        /// <value>前日終値日付</value>
        [DataMember(Name = "PreviousCloseTime", EmitDefaultValue = true)]
        public DateTime PreviousCloseTime { get; set; }

        /// <summary>
        /// 前日比
        /// </summary>
        /// <value>前日比</value>
        [DataMember(Name = "ChangePreviousClose", EmitDefaultValue = true)]
        public double ChangePreviousClose { get; set; }

        /// <summary>
        /// 騰落率
        /// </summary>
        /// <value>騰落率</value>
        [DataMember(Name = "ChangePreviousClosePer", EmitDefaultValue = true)]
        public double ChangePreviousClosePer { get; set; }

        /// <summary>
        /// 始値
        /// </summary>
        /// <value>始値</value>
        [DataMember(Name = "OpeningPrice", EmitDefaultValue = true)]
        public double OpeningPrice { get; set; }

        /// <summary>
        /// 始値時刻
        /// </summary>
        /// <value>始値時刻</value>
        [DataMember(Name = "OpeningPriceTime", EmitDefaultValue = true)]
        public DateTime OpeningPriceTime { get; set; }

        /// <summary>
        /// 高値
        /// </summary>
        /// <value>高値</value>
        [DataMember(Name = "HighPrice", EmitDefaultValue = true)]
        public double HighPrice { get; set; }

        /// <summary>
        /// 高値時刻
        /// </summary>
        /// <value>高値時刻</value>
        [DataMember(Name = "HighPriceTime", EmitDefaultValue = true)]
        public DateTime HighPriceTime { get; set; }

        /// <summary>
        /// 安値
        /// </summary>
        /// <value>安値</value>
        [DataMember(Name = "LowPrice", EmitDefaultValue = true)]
        public double LowPrice { get; set; }

        /// <summary>
        /// 安値時刻
        /// </summary>
        /// <value>安値時刻</value>
        [DataMember(Name = "LowPriceTime", EmitDefaultValue = true)]
        public DateTime LowPriceTime { get; set; }

        /// <summary>
        /// 売買高
        /// </summary>
        /// <value>売買高</value>
        [DataMember(Name = "TradingVolume", EmitDefaultValue = true)]
        public double TradingVolume { get; set; }

        /// <summary>
        /// 売買高時刻
        /// </summary>
        /// <value>売買高時刻</value>
        [DataMember(Name = "TradingVolumeTime", EmitDefaultValue = true)]
        public DateTime TradingVolumeTime { get; set; }

        /// <summary>
        /// 売買高加重平均価格（VWAP）
        /// </summary>
        /// <value>売買高加重平均価格（VWAP）</value>
        [DataMember(Name = "VWAP", EmitDefaultValue = true)]
        public double VWAP { get; set; }

        /// <summary>
        /// 売買代金
        /// </summary>
        /// <value>売買代金</value>
        [DataMember(Name = "TradingValue", EmitDefaultValue = true)]
        public double TradingValue { get; set; }

        /// <summary>
        /// 最良売気配数量
        /// </summary>
        /// <value>最良売気配数量</value>
        [DataMember(Name = "BidQty", EmitDefaultValue = true)]
        public double BidQty { get; set; }

        /// <summary>
        /// 最良売気配値段
        /// </summary>
        /// <value>最良売気配値段</value>
        [DataMember(Name = "BidPrice", EmitDefaultValue = true)]
        public double BidPrice { get; set; }

        /// <summary>
        /// 最良売気配時刻
        /// </summary>
        /// <value>最良売気配時刻</value>
        [DataMember(Name = "BidTime", EmitDefaultValue = true)]
        public DateTime BidTime { get; set; }

        /// <summary>
        /// 最良売気配フラグ |定義値|説明| |-|-| |0000|事象なし| |0101|一般気配| |0102|特別気配| |0103|注意気配| |0107|寄前気配| |0108|停止前特別気配| |0109|引け後気配| |0116|寄前気配約定成立ポイントなし| |0117|寄前気配約定成立ポイントあり| |0118|連続約定気配| |0119|停止前の連続約定気配| |0120|買い上がり売り下がり中|
        /// </summary>
        /// <value>最良売気配フラグ |定義値|説明| |-|-| |0000|事象なし| |0101|一般気配| |0102|特別気配| |0103|注意気配| |0107|寄前気配| |0108|停止前特別気配| |0109|引け後気配| |0116|寄前気配約定成立ポイントなし| |0117|寄前気配約定成立ポイントあり| |0118|連続約定気配| |0119|停止前の連続約定気配| |0120|買い上がり売り下がり中|</value>
        [DataMember(Name = "BidSign", EmitDefaultValue = true)]
        public string BidSign { get; set; }

        /// <summary>
        /// 売成行数量
        /// </summary>
        /// <value>売成行数量</value>
        [DataMember(Name = "MarketOrderSellQty", EmitDefaultValue = true)]
        public double MarketOrderSellQty { get; set; }

        /// <summary>
        /// Gets or Sets Sell1
        /// </summary>
        [DataMember(Name = "Sell1", EmitDefaultValue = true)]
        public BoardSuccessSell1 Sell1 { get; set; }

        /// <summary>
        /// Gets or Sets Sell2
        /// </summary>
        [DataMember(Name = "Sell2", EmitDefaultValue = true)]
        public BoardSuccessSell2 Sell2 { get; set; }

        /// <summary>
        /// Gets or Sets Sell3
        /// </summary>
        [DataMember(Name = "Sell3", EmitDefaultValue = true)]
        public BoardSuccessSell3 Sell3 { get; set; }

        /// <summary>
        /// Gets or Sets Sell4
        /// </summary>
        [DataMember(Name = "Sell4", EmitDefaultValue = true)]
        public BoardSuccessSell4 Sell4 { get; set; }

        /// <summary>
        /// Gets or Sets Sell5
        /// </summary>
        [DataMember(Name = "Sell5", EmitDefaultValue = true)]
        public BoardSuccessSell5 Sell5 { get; set; }

        /// <summary>
        /// Gets or Sets Sell6
        /// </summary>
        [DataMember(Name = "Sell6", EmitDefaultValue = true)]
        public BoardSuccessSell6 Sell6 { get; set; }

        /// <summary>
        /// Gets or Sets Sell7
        /// </summary>
        [DataMember(Name = "Sell7", EmitDefaultValue = true)]
        public BoardSuccessSell7 Sell7 { get; set; }

        /// <summary>
        /// Gets or Sets Sell8
        /// </summary>
        [DataMember(Name = "Sell8", EmitDefaultValue = true)]
        public BoardSuccessSell8 Sell8 { get; set; }

        /// <summary>
        /// Gets or Sets Sell9
        /// </summary>
        [DataMember(Name = "Sell9", EmitDefaultValue = true)]
        public BoardSuccessSell9 Sell9 { get; set; }

        /// <summary>
        /// Gets or Sets Sell10
        /// </summary>
        [DataMember(Name = "Sell10", EmitDefaultValue = true)]
        public BoardSuccessSell10 Sell10 { get; set; }

        /// <summary>
        /// 最良買気配数量
        /// </summary>
        /// <value>最良買気配数量</value>
        [DataMember(Name = "AskQty", EmitDefaultValue = true)]
        public double AskQty { get; set; }

        /// <summary>
        /// 最良買気配値段
        /// </summary>
        /// <value>最良買気配値段</value>
        [DataMember(Name = "AskPrice", EmitDefaultValue = true)]
        public double AskPrice { get; set; }

        /// <summary>
        /// 最良買気配時刻
        /// </summary>
        /// <value>最良買気配時刻</value>
        [DataMember(Name = "AskTime", EmitDefaultValue = true)]
        public DateTime AskTime { get; set; }

        /// <summary>
        /// 最良買気配フラグ |定義値|説明| |-|-| |0000|事象なし| |0101|一般気配| |0102|特別気配| |0103|注意気配| |0107|寄前気配| |0108|停止前特別気配| |0109|引け後気配| |0116|寄前気配約定成立ポイントなし| |0117|寄前気配約定成立ポイントあり| |0118|連続約定気配| |0119|停止前の連続約定気配| |0120|買い上がり売り下がり中|
        /// </summary>
        /// <value>最良買気配フラグ |定義値|説明| |-|-| |0000|事象なし| |0101|一般気配| |0102|特別気配| |0103|注意気配| |0107|寄前気配| |0108|停止前特別気配| |0109|引け後気配| |0116|寄前気配約定成立ポイントなし| |0117|寄前気配約定成立ポイントあり| |0118|連続約定気配| |0119|停止前の連続約定気配| |0120|買い上がり売り下がり中|</value>
        [DataMember(Name = "AskSign", EmitDefaultValue = true)]
        public string AskSign { get; set; }

        /// <summary>
        /// 買成行数量
        /// </summary>
        /// <value>買成行数量</value>
        [DataMember(Name = "MarketOrderBuyQty", EmitDefaultValue = true)]
        public double MarketOrderBuyQty { get; set; }

        /// <summary>
        /// Gets or Sets Buy1
        /// </summary>
        [DataMember(Name = "Buy1", EmitDefaultValue = true)]
        public BoardSuccessBuy1 Buy1 { get; set; }

        /// <summary>
        /// Gets or Sets Buy2
        /// </summary>
        [DataMember(Name = "Buy2", EmitDefaultValue = true)]
        public BoardSuccessBuy2 Buy2 { get; set; }

        /// <summary>
        /// Gets or Sets Buy3
        /// </summary>
        [DataMember(Name = "Buy3", EmitDefaultValue = true)]
        public BoardSuccessBuy3 Buy3 { get; set; }

        /// <summary>
        /// Gets or Sets Buy4
        /// </summary>
        [DataMember(Name = "Buy4", EmitDefaultValue = true)]
        public BoardSuccessBuy4 Buy4 { get; set; }

        /// <summary>
        /// Gets or Sets Buy5
        /// </summary>
        [DataMember(Name = "Buy5", EmitDefaultValue = true)]
        public BoardSuccessBuy5 Buy5 { get; set; }

        /// <summary>
        /// Gets or Sets Buy6
        /// </summary>
        [DataMember(Name = "Buy6", EmitDefaultValue = true)]
        public BoardSuccessBuy6 Buy6 { get; set; }

        /// <summary>
        /// Gets or Sets Buy7
        /// </summary>
        [DataMember(Name = "Buy7", EmitDefaultValue = true)]
        public BoardSuccessBuy7 Buy7 { get; set; }

        /// <summary>
        /// Gets or Sets Buy8
        /// </summary>
        [DataMember(Name = "Buy8", EmitDefaultValue = true)]
        public BoardSuccessBuy8 Buy8 { get; set; }

        /// <summary>
        /// Gets or Sets Buy9
        /// </summary>
        [DataMember(Name = "Buy9", EmitDefaultValue = true)]
        public BoardSuccessBuy9 Buy9 { get; set; }

        /// <summary>
        /// Gets or Sets Buy10
        /// </summary>
        [DataMember(Name = "Buy10", EmitDefaultValue = true)]
        public BoardSuccessBuy10 Buy10 { get; set; }

        /// <summary>
        /// OVER気配数量
        /// </summary>
        /// <value>OVER気配数量</value>
        [DataMember(Name = "OverSellQty", EmitDefaultValue = true)]
        public double OverSellQty { get; set; }

        /// <summary>
        /// UNDER気配数量
        /// </summary>
        /// <value>UNDER気配数量</value>
        [DataMember(Name = "UnderBuyQty", EmitDefaultValue = true)]
        public double UnderBuyQty { get; set; }

        /// <summary>
        /// 時価総額
        /// </summary>
        /// <value>時価総額</value>
        [DataMember(Name = "TotalMarketValue", EmitDefaultValue = true)]
        public double TotalMarketValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoardSuccess {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  SymbolName: ").Append(SymbolName).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  ExchangeName: ").Append(ExchangeName).Append("\n");
            sb.Append("  CurrentPrice: ").Append(CurrentPrice).Append("\n");
            sb.Append("  CurrentPriceTime: ").Append(CurrentPriceTime).Append("\n");
            sb.Append("  CurrentPriceChangeStatus: ").Append(CurrentPriceChangeStatus).Append("\n");
            sb.Append("  CurrentPriceStatus: ").Append(CurrentPriceStatus).Append("\n");
            sb.Append("  CalcPrice: ").Append(CalcPrice).Append("\n");
            sb.Append("  PreviousClose: ").Append(PreviousClose).Append("\n");
            sb.Append("  PreviousCloseTime: ").Append(PreviousCloseTime).Append("\n");
            sb.Append("  ChangePreviousClose: ").Append(ChangePreviousClose).Append("\n");
            sb.Append("  ChangePreviousClosePer: ").Append(ChangePreviousClosePer).Append("\n");
            sb.Append("  OpeningPrice: ").Append(OpeningPrice).Append("\n");
            sb.Append("  OpeningPriceTime: ").Append(OpeningPriceTime).Append("\n");
            sb.Append("  HighPrice: ").Append(HighPrice).Append("\n");
            sb.Append("  HighPriceTime: ").Append(HighPriceTime).Append("\n");
            sb.Append("  LowPrice: ").Append(LowPrice).Append("\n");
            sb.Append("  LowPriceTime: ").Append(LowPriceTime).Append("\n");
            sb.Append("  TradingVolume: ").Append(TradingVolume).Append("\n");
            sb.Append("  TradingVolumeTime: ").Append(TradingVolumeTime).Append("\n");
            sb.Append("  VWAP: ").Append(VWAP).Append("\n");
            sb.Append("  TradingValue: ").Append(TradingValue).Append("\n");
            sb.Append("  BidQty: ").Append(BidQty).Append("\n");
            sb.Append("  BidPrice: ").Append(BidPrice).Append("\n");
            sb.Append("  BidTime: ").Append(BidTime).Append("\n");
            sb.Append("  BidSign: ").Append(BidSign).Append("\n");
            sb.Append("  MarketOrderSellQty: ").Append(MarketOrderSellQty).Append("\n");
            sb.Append("  Sell1: ").Append(Sell1).Append("\n");
            sb.Append("  Sell2: ").Append(Sell2).Append("\n");
            sb.Append("  Sell3: ").Append(Sell3).Append("\n");
            sb.Append("  Sell4: ").Append(Sell4).Append("\n");
            sb.Append("  Sell5: ").Append(Sell5).Append("\n");
            sb.Append("  Sell6: ").Append(Sell6).Append("\n");
            sb.Append("  Sell7: ").Append(Sell7).Append("\n");
            sb.Append("  Sell8: ").Append(Sell8).Append("\n");
            sb.Append("  Sell9: ").Append(Sell9).Append("\n");
            sb.Append("  Sell10: ").Append(Sell10).Append("\n");
            sb.Append("  AskQty: ").Append(AskQty).Append("\n");
            sb.Append("  AskPrice: ").Append(AskPrice).Append("\n");
            sb.Append("  AskTime: ").Append(AskTime).Append("\n");
            sb.Append("  AskSign: ").Append(AskSign).Append("\n");
            sb.Append("  MarketOrderBuyQty: ").Append(MarketOrderBuyQty).Append("\n");
            sb.Append("  Buy1: ").Append(Buy1).Append("\n");
            sb.Append("  Buy2: ").Append(Buy2).Append("\n");
            sb.Append("  Buy3: ").Append(Buy3).Append("\n");
            sb.Append("  Buy4: ").Append(Buy4).Append("\n");
            sb.Append("  Buy5: ").Append(Buy5).Append("\n");
            sb.Append("  Buy6: ").Append(Buy6).Append("\n");
            sb.Append("  Buy7: ").Append(Buy7).Append("\n");
            sb.Append("  Buy8: ").Append(Buy8).Append("\n");
            sb.Append("  Buy9: ").Append(Buy9).Append("\n");
            sb.Append("  Buy10: ").Append(Buy10).Append("\n");
            sb.Append("  OverSellQty: ").Append(OverSellQty).Append("\n");
            sb.Append("  UnderBuyQty: ").Append(UnderBuyQty).Append("\n");
            sb.Append("  TotalMarketValue: ").Append(TotalMarketValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoardSuccess);
        }

        /// <summary>
        /// Returns true if BoardSuccess instances are equal
        /// </summary>
        /// <param name="input">Instance of BoardSuccess to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoardSuccess input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.SymbolName == input.SymbolName ||
                    (this.SymbolName != null &&
                    this.SymbolName.Equals(input.SymbolName))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    this.Exchange.Equals(input.Exchange)
                ) && 
                (
                    this.ExchangeName == input.ExchangeName ||
                    (this.ExchangeName != null &&
                    this.ExchangeName.Equals(input.ExchangeName))
                ) && 
                (
                    this.CurrentPrice == input.CurrentPrice ||
                    this.CurrentPrice.Equals(input.CurrentPrice)
                ) && 
                (
                    this.CurrentPriceTime == input.CurrentPriceTime ||
                    (this.CurrentPriceTime != null &&
                    this.CurrentPriceTime.Equals(input.CurrentPriceTime))
                ) && 
                (
                    this.CurrentPriceChangeStatus == input.CurrentPriceChangeStatus ||
                    (this.CurrentPriceChangeStatus != null &&
                    this.CurrentPriceChangeStatus.Equals(input.CurrentPriceChangeStatus))
                ) && 
                (
                    this.CurrentPriceStatus == input.CurrentPriceStatus ||
                    this.CurrentPriceStatus.Equals(input.CurrentPriceStatus)
                ) && 
                (
                    this.CalcPrice == input.CalcPrice ||
                    this.CalcPrice.Equals(input.CalcPrice)
                ) && 
                (
                    this.PreviousClose == input.PreviousClose ||
                    this.PreviousClose.Equals(input.PreviousClose)
                ) && 
                (
                    this.PreviousCloseTime == input.PreviousCloseTime ||
                    (this.PreviousCloseTime != null &&
                    this.PreviousCloseTime.Equals(input.PreviousCloseTime))
                ) && 
                (
                    this.ChangePreviousClose == input.ChangePreviousClose ||
                    this.ChangePreviousClose.Equals(input.ChangePreviousClose)
                ) && 
                (
                    this.ChangePreviousClosePer == input.ChangePreviousClosePer ||
                    this.ChangePreviousClosePer.Equals(input.ChangePreviousClosePer)
                ) && 
                (
                    this.OpeningPrice == input.OpeningPrice ||
                    this.OpeningPrice.Equals(input.OpeningPrice)
                ) && 
                (
                    this.OpeningPriceTime == input.OpeningPriceTime ||
                    (this.OpeningPriceTime != null &&
                    this.OpeningPriceTime.Equals(input.OpeningPriceTime))
                ) && 
                (
                    this.HighPrice == input.HighPrice ||
                    this.HighPrice.Equals(input.HighPrice)
                ) && 
                (
                    this.HighPriceTime == input.HighPriceTime ||
                    (this.HighPriceTime != null &&
                    this.HighPriceTime.Equals(input.HighPriceTime))
                ) && 
                (
                    this.LowPrice == input.LowPrice ||
                    this.LowPrice.Equals(input.LowPrice)
                ) && 
                (
                    this.LowPriceTime == input.LowPriceTime ||
                    (this.LowPriceTime != null &&
                    this.LowPriceTime.Equals(input.LowPriceTime))
                ) && 
                (
                    this.TradingVolume == input.TradingVolume ||
                    this.TradingVolume.Equals(input.TradingVolume)
                ) && 
                (
                    this.TradingVolumeTime == input.TradingVolumeTime ||
                    (this.TradingVolumeTime != null &&
                    this.TradingVolumeTime.Equals(input.TradingVolumeTime))
                ) && 
                (
                    this.VWAP == input.VWAP ||
                    this.VWAP.Equals(input.VWAP)
                ) && 
                (
                    this.TradingValue == input.TradingValue ||
                    this.TradingValue.Equals(input.TradingValue)
                ) && 
                (
                    this.BidQty == input.BidQty ||
                    this.BidQty.Equals(input.BidQty)
                ) && 
                (
                    this.BidPrice == input.BidPrice ||
                    this.BidPrice.Equals(input.BidPrice)
                ) && 
                (
                    this.BidTime == input.BidTime ||
                    (this.BidTime != null &&
                    this.BidTime.Equals(input.BidTime))
                ) && 
                (
                    this.BidSign == input.BidSign ||
                    (this.BidSign != null &&
                    this.BidSign.Equals(input.BidSign))
                ) && 
                (
                    this.MarketOrderSellQty == input.MarketOrderSellQty ||
                    this.MarketOrderSellQty.Equals(input.MarketOrderSellQty)
                ) && 
                (
                    this.Sell1 == input.Sell1 ||
                    (this.Sell1 != null &&
                    this.Sell1.Equals(input.Sell1))
                ) && 
                (
                    this.Sell2 == input.Sell2 ||
                    (this.Sell2 != null &&
                    this.Sell2.Equals(input.Sell2))
                ) && 
                (
                    this.Sell3 == input.Sell3 ||
                    (this.Sell3 != null &&
                    this.Sell3.Equals(input.Sell3))
                ) && 
                (
                    this.Sell4 == input.Sell4 ||
                    (this.Sell4 != null &&
                    this.Sell4.Equals(input.Sell4))
                ) && 
                (
                    this.Sell5 == input.Sell5 ||
                    (this.Sell5 != null &&
                    this.Sell5.Equals(input.Sell5))
                ) && 
                (
                    this.Sell6 == input.Sell6 ||
                    (this.Sell6 != null &&
                    this.Sell6.Equals(input.Sell6))
                ) && 
                (
                    this.Sell7 == input.Sell7 ||
                    (this.Sell7 != null &&
                    this.Sell7.Equals(input.Sell7))
                ) && 
                (
                    this.Sell8 == input.Sell8 ||
                    (this.Sell8 != null &&
                    this.Sell8.Equals(input.Sell8))
                ) && 
                (
                    this.Sell9 == input.Sell9 ||
                    (this.Sell9 != null &&
                    this.Sell9.Equals(input.Sell9))
                ) && 
                (
                    this.Sell10 == input.Sell10 ||
                    (this.Sell10 != null &&
                    this.Sell10.Equals(input.Sell10))
                ) && 
                (
                    this.AskQty == input.AskQty ||
                    this.AskQty.Equals(input.AskQty)
                ) && 
                (
                    this.AskPrice == input.AskPrice ||
                    this.AskPrice.Equals(input.AskPrice)
                ) && 
                (
                    this.AskTime == input.AskTime ||
                    (this.AskTime != null &&
                    this.AskTime.Equals(input.AskTime))
                ) && 
                (
                    this.AskSign == input.AskSign ||
                    (this.AskSign != null &&
                    this.AskSign.Equals(input.AskSign))
                ) && 
                (
                    this.MarketOrderBuyQty == input.MarketOrderBuyQty ||
                    this.MarketOrderBuyQty.Equals(input.MarketOrderBuyQty)
                ) && 
                (
                    this.Buy1 == input.Buy1 ||
                    (this.Buy1 != null &&
                    this.Buy1.Equals(input.Buy1))
                ) && 
                (
                    this.Buy2 == input.Buy2 ||
                    (this.Buy2 != null &&
                    this.Buy2.Equals(input.Buy2))
                ) && 
                (
                    this.Buy3 == input.Buy3 ||
                    (this.Buy3 != null &&
                    this.Buy3.Equals(input.Buy3))
                ) && 
                (
                    this.Buy4 == input.Buy4 ||
                    (this.Buy4 != null &&
                    this.Buy4.Equals(input.Buy4))
                ) && 
                (
                    this.Buy5 == input.Buy5 ||
                    (this.Buy5 != null &&
                    this.Buy5.Equals(input.Buy5))
                ) && 
                (
                    this.Buy6 == input.Buy6 ||
                    (this.Buy6 != null &&
                    this.Buy6.Equals(input.Buy6))
                ) && 
                (
                    this.Buy7 == input.Buy7 ||
                    (this.Buy7 != null &&
                    this.Buy7.Equals(input.Buy7))
                ) && 
                (
                    this.Buy8 == input.Buy8 ||
                    (this.Buy8 != null &&
                    this.Buy8.Equals(input.Buy8))
                ) && 
                (
                    this.Buy9 == input.Buy9 ||
                    (this.Buy9 != null &&
                    this.Buy9.Equals(input.Buy9))
                ) && 
                (
                    this.Buy10 == input.Buy10 ||
                    (this.Buy10 != null &&
                    this.Buy10.Equals(input.Buy10))
                ) && 
                (
                    this.OverSellQty == input.OverSellQty ||
                    this.OverSellQty.Equals(input.OverSellQty)
                ) && 
                (
                    this.UnderBuyQty == input.UnderBuyQty ||
                    this.UnderBuyQty.Equals(input.UnderBuyQty)
                ) && 
                (
                    this.TotalMarketValue == input.TotalMarketValue ||
                    this.TotalMarketValue.Equals(input.TotalMarketValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.SymbolName != null)
                    hashCode = hashCode * 59 + this.SymbolName.GetHashCode();
                hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.ExchangeName != null)
                    hashCode = hashCode * 59 + this.ExchangeName.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentPrice.GetHashCode();
                if (this.CurrentPriceTime != null)
                    hashCode = hashCode * 59 + this.CurrentPriceTime.GetHashCode();
                if (this.CurrentPriceChangeStatus != null)
                    hashCode = hashCode * 59 + this.CurrentPriceChangeStatus.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentPriceStatus.GetHashCode();
                hashCode = hashCode * 59 + this.CalcPrice.GetHashCode();
                hashCode = hashCode * 59 + this.PreviousClose.GetHashCode();
                if (this.PreviousCloseTime != null)
                    hashCode = hashCode * 59 + this.PreviousCloseTime.GetHashCode();
                hashCode = hashCode * 59 + this.ChangePreviousClose.GetHashCode();
                hashCode = hashCode * 59 + this.ChangePreviousClosePer.GetHashCode();
                hashCode = hashCode * 59 + this.OpeningPrice.GetHashCode();
                if (this.OpeningPriceTime != null)
                    hashCode = hashCode * 59 + this.OpeningPriceTime.GetHashCode();
                hashCode = hashCode * 59 + this.HighPrice.GetHashCode();
                if (this.HighPriceTime != null)
                    hashCode = hashCode * 59 + this.HighPriceTime.GetHashCode();
                hashCode = hashCode * 59 + this.LowPrice.GetHashCode();
                if (this.LowPriceTime != null)
                    hashCode = hashCode * 59 + this.LowPriceTime.GetHashCode();
                hashCode = hashCode * 59 + this.TradingVolume.GetHashCode();
                if (this.TradingVolumeTime != null)
                    hashCode = hashCode * 59 + this.TradingVolumeTime.GetHashCode();
                hashCode = hashCode * 59 + this.VWAP.GetHashCode();
                hashCode = hashCode * 59 + this.TradingValue.GetHashCode();
                hashCode = hashCode * 59 + this.BidQty.GetHashCode();
                hashCode = hashCode * 59 + this.BidPrice.GetHashCode();
                if (this.BidTime != null)
                    hashCode = hashCode * 59 + this.BidTime.GetHashCode();
                if (this.BidSign != null)
                    hashCode = hashCode * 59 + this.BidSign.GetHashCode();
                hashCode = hashCode * 59 + this.MarketOrderSellQty.GetHashCode();
                if (this.Sell1 != null)
                    hashCode = hashCode * 59 + this.Sell1.GetHashCode();
                if (this.Sell2 != null)
                    hashCode = hashCode * 59 + this.Sell2.GetHashCode();
                if (this.Sell3 != null)
                    hashCode = hashCode * 59 + this.Sell3.GetHashCode();
                if (this.Sell4 != null)
                    hashCode = hashCode * 59 + this.Sell4.GetHashCode();
                if (this.Sell5 != null)
                    hashCode = hashCode * 59 + this.Sell5.GetHashCode();
                if (this.Sell6 != null)
                    hashCode = hashCode * 59 + this.Sell6.GetHashCode();
                if (this.Sell7 != null)
                    hashCode = hashCode * 59 + this.Sell7.GetHashCode();
                if (this.Sell8 != null)
                    hashCode = hashCode * 59 + this.Sell8.GetHashCode();
                if (this.Sell9 != null)
                    hashCode = hashCode * 59 + this.Sell9.GetHashCode();
                if (this.Sell10 != null)
                    hashCode = hashCode * 59 + this.Sell10.GetHashCode();
                hashCode = hashCode * 59 + this.AskQty.GetHashCode();
                hashCode = hashCode * 59 + this.AskPrice.GetHashCode();
                if (this.AskTime != null)
                    hashCode = hashCode * 59 + this.AskTime.GetHashCode();
                if (this.AskSign != null)
                    hashCode = hashCode * 59 + this.AskSign.GetHashCode();
                hashCode = hashCode * 59 + this.MarketOrderBuyQty.GetHashCode();
                if (this.Buy1 != null)
                    hashCode = hashCode * 59 + this.Buy1.GetHashCode();
                if (this.Buy2 != null)
                    hashCode = hashCode * 59 + this.Buy2.GetHashCode();
                if (this.Buy3 != null)
                    hashCode = hashCode * 59 + this.Buy3.GetHashCode();
                if (this.Buy4 != null)
                    hashCode = hashCode * 59 + this.Buy4.GetHashCode();
                if (this.Buy5 != null)
                    hashCode = hashCode * 59 + this.Buy5.GetHashCode();
                if (this.Buy6 != null)
                    hashCode = hashCode * 59 + this.Buy6.GetHashCode();
                if (this.Buy7 != null)
                    hashCode = hashCode * 59 + this.Buy7.GetHashCode();
                if (this.Buy8 != null)
                    hashCode = hashCode * 59 + this.Buy8.GetHashCode();
                if (this.Buy9 != null)
                    hashCode = hashCode * 59 + this.Buy9.GetHashCode();
                if (this.Buy10 != null)
                    hashCode = hashCode * 59 + this.Buy10.GetHashCode();
                hashCode = hashCode * 59 + this.OverSellQty.GetHashCode();
                hashCode = hashCode * 59 + this.UnderBuyQty.GetHashCode();
                hashCode = hashCode * 59 + this.TotalMarketValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
