/*
 * kabuステーションAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SymbolSuccess
    /// </summary>
    [DataContract(Name = "SymbolSuccess")]
    public partial class SymbolSuccess : IEquatable<SymbolSuccess>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolSuccess" /> class.
        /// </summary>
        /// <param name="symbol">銘柄コード.</param>
        /// <param name="symbolName">銘柄名.</param>
        /// <param name="displayName">銘柄略称&lt;br&gt;※株式・先物・オプション銘柄の場合のみ.</param>
        /// <param name="exchange">市場コード&lt;br&gt;※株式・先物・オプション銘柄の場合のみ &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;.</param>
        /// <param name="exchangeName">市場名称&lt;br&gt;※株式・先物・オプション銘柄の場合のみ.</param>
        /// <param name="bisCategory">業種コード名&lt;br&gt;※株式銘柄の場合のみ &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0050&lt;/td&gt;&lt;td&gt;水産・農林業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;1050&lt;/td&gt;&lt;td&gt;鉱業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2050&lt;/td&gt;&lt;td&gt;建設業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3050&lt;/td&gt;&lt;td&gt;食料品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3100&lt;/td&gt;&lt;td&gt;繊維製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3150&lt;/td&gt;&lt;td&gt;パルプ・紙&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3200&lt;/td&gt;&lt;td&gt;化学&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3250&lt;/td&gt;&lt;td&gt;医薬品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3300&lt;/td&gt;&lt;td&gt;石油・石炭製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3350&lt;/td&gt;&lt;td&gt;ゴム製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3400&lt;/td&gt;&lt;td&gt;ガラス・土石製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3450&lt;/td&gt;&lt;td&gt;鉄鋼&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3500&lt;/td&gt;&lt;td&gt;非鉄金属&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3550&lt;/td&gt;&lt;td&gt;金属製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3600&lt;/td&gt;&lt;td&gt;機械&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3650&lt;/td&gt;&lt;td&gt;電気機器&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3700&lt;/td&gt;&lt;td&gt;輸送用機器&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3750&lt;/td&gt;&lt;td&gt;精密機器&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3800&lt;/td&gt;&lt;td&gt;その他製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4050&lt;/td&gt;&lt;td&gt;電気・ガス業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5050&lt;/td&gt;&lt;td&gt;陸運業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5100&lt;/td&gt;&lt;td&gt;海運業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5150&lt;/td&gt;&lt;td&gt;空運業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5200&lt;/td&gt;&lt;td&gt;倉庫・運輸関連業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5250&lt;/td&gt;&lt;td&gt;情報・通信業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6050&lt;/td&gt;&lt;td&gt;卸売業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6100&lt;/td&gt;&lt;td&gt;小売業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7050&lt;/td&gt;&lt;td&gt;銀行業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7100&lt;/td&gt;&lt;td&gt;証券、商品先物取引業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7150&lt;/td&gt;&lt;td&gt;保険業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7200&lt;/td&gt;&lt;td&gt;その他金融業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;8050&lt;/td&gt;&lt;td&gt;不動産業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9050&lt;/td&gt;&lt;td&gt;サービス業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9999&lt;/td&gt;&lt;td&gt;その他&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;.</param>
        /// <param name="totalMarketValue">時価総額&lt;br&gt;※株式銘柄の場合のみ.</param>
        /// <param name="totalStocks">発行済み株式数（千株）&lt;br&gt;※株式銘柄の場合のみ.</param>
        /// <param name="tradingUnit">売買単位&lt;br&gt;※株式・先物・オプション銘柄の場合のみ.</param>
        /// <param name="fiscalYearEndBasic">決算期日&lt;br&gt;※株式銘柄の場合のみ.</param>
        /// <param name="priceRangeGroup">呼値グループ&lt;br&gt;※株式・先物・オプション銘柄の場合のみ &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;呼値コード&lt;/th&gt;&lt;th&gt;値段の水準&lt;/th&gt;&lt;th&gt;呼値単位&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;3000円以下&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;5000円以下&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;30000円以下&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;50000円以下&lt;/td&gt;&lt;td&gt;50&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;300000円以下&lt;/td&gt;&lt;td&gt;100&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;500000円以下&lt;/td&gt;&lt;td&gt;500&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;3000000円以下&lt;/td&gt;&lt;td&gt;1000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;5000000円以下&lt;/td&gt;&lt;td&gt;5000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;30000000円以下&lt;/td&gt;&lt;td&gt;10000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;50000000円以下&lt;/td&gt;&lt;td&gt;50000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;50000000円超&lt;/td&gt;&lt;td&gt;100000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;1000円以下&lt;/td&gt;&lt;td&gt;0.1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;3000円以下&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;10000円以下&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;30000円以下&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;100000円以下&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;300000円以下&lt;/td&gt;&lt;td&gt;50&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;1000000円以下&lt;/td&gt;&lt;td&gt;100&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;3000000円以下&lt;/td&gt;&lt;td&gt;500&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;10000000円以下&lt;/td&gt;&lt;td&gt;1000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;30000000円以下&lt;/td&gt;&lt;td&gt;5000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;50000000円以下&lt;/td&gt;&lt;td&gt;10000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;50000000円超&lt;/td&gt;&lt;td&gt;10000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10118&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10119&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10318&lt;/td&gt;&lt;td&gt;100円以下&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10318&lt;/td&gt;&lt;td&gt;1000円以下&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10318&lt;/td&gt;&lt;td&gt;1000円超&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10706&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0.25&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10718&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;12122&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14473&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14515&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0.05&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15411&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15569&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;17163&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;.</param>
        /// <param name="kCMarginBuy">一般信用買建フラグ&lt;br&gt;※trueのとき一般信用買建可能&lt;br&gt;※株式銘柄の場合のみ.</param>
        /// <param name="kCMarginSell">一般信用売建フラグ&lt;br&gt;※trueのとき一般信用売建可能&lt;br&gt;※株式銘柄の場合のみ.</param>
        /// <param name="marginBuy">制度信用買建フラグ&lt;br&gt;※trueのとき制度信用買建可能&lt;br&gt;※株式銘柄の場合のみ.</param>
        /// <param name="marginSell">制度信用売建フラグ&lt;br&gt;※trueのとき制度信用売建可能&lt;br&gt;※株式銘柄の場合のみ.</param>
        /// <param name="upperLimit">値幅上限&lt;br&gt;※株式・先物・オプション銘柄の場合のみ.</param>
        /// <param name="lowerLimit">値幅下限&lt;br&gt;※株式・先物・オプション銘柄の場合のみ.</param>
        /// <param name="underlyer">原資産コード&lt;br&gt;※先物・オプション銘柄の場合のみ &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;NK225&lt;/td&gt;&lt;td&gt;日経225&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;NK300&lt;/td&gt;&lt;td&gt;日経300&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;MOTHERS&lt;/td&gt;&lt;td&gt;東証マザーズ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JPX400&lt;/td&gt;&lt;td&gt;JPX日経400&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIX&lt;/td&gt;&lt;td&gt;TOPIX&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;NKVI&lt;/td&gt;&lt;td&gt;日経平均VI&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;DJIA&lt;/td&gt;&lt;td&gt;NYダウ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TSEREITINDEX&lt;/td&gt;&lt;td&gt;東証REIT指数&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIXCORE30&lt;/td&gt;&lt;td&gt;TOPIX Core30&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;.</param>
        /// <param name="derivMonth">限月-年月&lt;br&gt;※「限月-年月」は「年(yyyy)/月(MM)」で表示します。&lt;br&gt;※先物・オプション銘柄の場合のみ.</param>
        /// <param name="tradeStart">取引開始日&lt;br&gt;※先物・オプション銘柄の場合のみ.</param>
        /// <param name="tradeEnd">取引終了日&lt;br&gt;※先物・オプション銘柄の場合のみ.</param>
        /// <param name="strikePrice">権利行使価格&lt;br&gt;※オプション銘柄の場合のみ.</param>
        /// <param name="putOrCall">プット/コール区分&lt;br&gt;※オプション銘柄の場合のみ &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;プット&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;コール&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;.</param>
        /// <param name="clearingPrice">清算値&lt;br&gt;※先物銘柄の場合のみ.</param>
        public SymbolSuccess(string symbol = default(string), string symbolName = default(string), string displayName = default(string), int exchange = default(int), string exchangeName = default(string), string bisCategory = default(string), double totalMarketValue = default(double), double totalStocks = default(double), double tradingUnit = default(double), int fiscalYearEndBasic = default(int), string priceRangeGroup = default(string), bool kCMarginBuy = default(bool), bool kCMarginSell = default(bool), bool marginBuy = default(bool), bool marginSell = default(bool), double upperLimit = default(double), double lowerLimit = default(double), string underlyer = default(string), string derivMonth = default(string), int tradeStart = default(int), int tradeEnd = default(int), double strikePrice = default(double), int putOrCall = default(int), double clearingPrice = default(double))
        {
            this.Symbol = symbol;
            this.SymbolName = symbolName;
            this.DisplayName = displayName;
            this.Exchange = exchange;
            this.ExchangeName = exchangeName;
            this.BisCategory = bisCategory;
            this.TotalMarketValue = totalMarketValue;
            this.TotalStocks = totalStocks;
            this.TradingUnit = tradingUnit;
            this.FiscalYearEndBasic = fiscalYearEndBasic;
            this.PriceRangeGroup = priceRangeGroup;
            this.KCMarginBuy = kCMarginBuy;
            this.KCMarginSell = kCMarginSell;
            this.MarginBuy = marginBuy;
            this.MarginSell = marginSell;
            this.UpperLimit = upperLimit;
            this.LowerLimit = lowerLimit;
            this.Underlyer = underlyer;
            this.DerivMonth = derivMonth;
            this.TradeStart = tradeStart;
            this.TradeEnd = tradeEnd;
            this.StrikePrice = strikePrice;
            this.PutOrCall = putOrCall;
            this.ClearingPrice = clearingPrice;
        }

        /// <summary>
        /// 銘柄コード
        /// </summary>
        /// <value>銘柄コード</value>
        [DataMember(Name = "Symbol", EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// 銘柄名
        /// </summary>
        /// <value>銘柄名</value>
        [DataMember(Name = "SymbolName", EmitDefaultValue = true)]
        public string SymbolName { get; set; }

        /// <summary>
        /// 銘柄略称&lt;br&gt;※株式・先物・オプション銘柄の場合のみ
        /// </summary>
        /// <value>銘柄略称&lt;br&gt;※株式・先物・オプション銘柄の場合のみ</value>
        [DataMember(Name = "DisplayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// 市場コード&lt;br&gt;※株式・先物・オプション銘柄の場合のみ &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
        /// </summary>
        /// <value>市場コード&lt;br&gt;※株式・先物・オプション銘柄の場合のみ &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</value>
        [DataMember(Name = "Exchange", EmitDefaultValue = true)]
        public int Exchange { get; set; }

        /// <summary>
        /// 市場名称&lt;br&gt;※株式・先物・オプション銘柄の場合のみ
        /// </summary>
        /// <value>市場名称&lt;br&gt;※株式・先物・オプション銘柄の場合のみ</value>
        [DataMember(Name = "ExchangeName", EmitDefaultValue = true)]
        public string ExchangeName { get; set; }

        /// <summary>
        /// 業種コード名&lt;br&gt;※株式銘柄の場合のみ &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0050&lt;/td&gt;&lt;td&gt;水産・農林業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;1050&lt;/td&gt;&lt;td&gt;鉱業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2050&lt;/td&gt;&lt;td&gt;建設業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3050&lt;/td&gt;&lt;td&gt;食料品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3100&lt;/td&gt;&lt;td&gt;繊維製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3150&lt;/td&gt;&lt;td&gt;パルプ・紙&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3200&lt;/td&gt;&lt;td&gt;化学&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3250&lt;/td&gt;&lt;td&gt;医薬品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3300&lt;/td&gt;&lt;td&gt;石油・石炭製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3350&lt;/td&gt;&lt;td&gt;ゴム製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3400&lt;/td&gt;&lt;td&gt;ガラス・土石製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3450&lt;/td&gt;&lt;td&gt;鉄鋼&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3500&lt;/td&gt;&lt;td&gt;非鉄金属&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3550&lt;/td&gt;&lt;td&gt;金属製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3600&lt;/td&gt;&lt;td&gt;機械&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3650&lt;/td&gt;&lt;td&gt;電気機器&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3700&lt;/td&gt;&lt;td&gt;輸送用機器&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3750&lt;/td&gt;&lt;td&gt;精密機器&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3800&lt;/td&gt;&lt;td&gt;その他製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4050&lt;/td&gt;&lt;td&gt;電気・ガス業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5050&lt;/td&gt;&lt;td&gt;陸運業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5100&lt;/td&gt;&lt;td&gt;海運業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5150&lt;/td&gt;&lt;td&gt;空運業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5200&lt;/td&gt;&lt;td&gt;倉庫・運輸関連業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5250&lt;/td&gt;&lt;td&gt;情報・通信業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6050&lt;/td&gt;&lt;td&gt;卸売業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6100&lt;/td&gt;&lt;td&gt;小売業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7050&lt;/td&gt;&lt;td&gt;銀行業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7100&lt;/td&gt;&lt;td&gt;証券、商品先物取引業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7150&lt;/td&gt;&lt;td&gt;保険業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7200&lt;/td&gt;&lt;td&gt;その他金融業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;8050&lt;/td&gt;&lt;td&gt;不動産業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9050&lt;/td&gt;&lt;td&gt;サービス業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9999&lt;/td&gt;&lt;td&gt;その他&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
        /// </summary>
        /// <value>業種コード名&lt;br&gt;※株式銘柄の場合のみ &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0050&lt;/td&gt;&lt;td&gt;水産・農林業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;1050&lt;/td&gt;&lt;td&gt;鉱業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2050&lt;/td&gt;&lt;td&gt;建設業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3050&lt;/td&gt;&lt;td&gt;食料品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3100&lt;/td&gt;&lt;td&gt;繊維製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3150&lt;/td&gt;&lt;td&gt;パルプ・紙&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3200&lt;/td&gt;&lt;td&gt;化学&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3250&lt;/td&gt;&lt;td&gt;医薬品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3300&lt;/td&gt;&lt;td&gt;石油・石炭製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3350&lt;/td&gt;&lt;td&gt;ゴム製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3400&lt;/td&gt;&lt;td&gt;ガラス・土石製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3450&lt;/td&gt;&lt;td&gt;鉄鋼&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3500&lt;/td&gt;&lt;td&gt;非鉄金属&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3550&lt;/td&gt;&lt;td&gt;金属製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3600&lt;/td&gt;&lt;td&gt;機械&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3650&lt;/td&gt;&lt;td&gt;電気機器&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3700&lt;/td&gt;&lt;td&gt;輸送用機器&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3750&lt;/td&gt;&lt;td&gt;精密機器&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3800&lt;/td&gt;&lt;td&gt;その他製品&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4050&lt;/td&gt;&lt;td&gt;電気・ガス業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5050&lt;/td&gt;&lt;td&gt;陸運業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5100&lt;/td&gt;&lt;td&gt;海運業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5150&lt;/td&gt;&lt;td&gt;空運業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5200&lt;/td&gt;&lt;td&gt;倉庫・運輸関連業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5250&lt;/td&gt;&lt;td&gt;情報・通信業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6050&lt;/td&gt;&lt;td&gt;卸売業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6100&lt;/td&gt;&lt;td&gt;小売業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7050&lt;/td&gt;&lt;td&gt;銀行業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7100&lt;/td&gt;&lt;td&gt;証券、商品先物取引業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7150&lt;/td&gt;&lt;td&gt;保険業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7200&lt;/td&gt;&lt;td&gt;その他金融業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;8050&lt;/td&gt;&lt;td&gt;不動産業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9050&lt;/td&gt;&lt;td&gt;サービス業&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9999&lt;/td&gt;&lt;td&gt;その他&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</value>
        [DataMember(Name = "BisCategory", EmitDefaultValue = true)]
        public string BisCategory { get; set; }

        /// <summary>
        /// 時価総額&lt;br&gt;※株式銘柄の場合のみ
        /// </summary>
        /// <value>時価総額&lt;br&gt;※株式銘柄の場合のみ</value>
        [DataMember(Name = "TotalMarketValue", EmitDefaultValue = true)]
        public double TotalMarketValue { get; set; }

        /// <summary>
        /// 発行済み株式数（千株）&lt;br&gt;※株式銘柄の場合のみ
        /// </summary>
        /// <value>発行済み株式数（千株）&lt;br&gt;※株式銘柄の場合のみ</value>
        [DataMember(Name = "TotalStocks", EmitDefaultValue = true)]
        public double TotalStocks { get; set; }

        /// <summary>
        /// 売買単位&lt;br&gt;※株式・先物・オプション銘柄の場合のみ
        /// </summary>
        /// <value>売買単位&lt;br&gt;※株式・先物・オプション銘柄の場合のみ</value>
        [DataMember(Name = "TradingUnit", EmitDefaultValue = true)]
        public double TradingUnit { get; set; }

        /// <summary>
        /// 決算期日&lt;br&gt;※株式銘柄の場合のみ
        /// </summary>
        /// <value>決算期日&lt;br&gt;※株式銘柄の場合のみ</value>
        [DataMember(Name = "FiscalYearEndBasic", EmitDefaultValue = true)]
        public int FiscalYearEndBasic { get; set; }

        /// <summary>
        /// 呼値グループ&lt;br&gt;※株式・先物・オプション銘柄の場合のみ &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;呼値コード&lt;/th&gt;&lt;th&gt;値段の水準&lt;/th&gt;&lt;th&gt;呼値単位&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;3000円以下&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;5000円以下&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;30000円以下&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;50000円以下&lt;/td&gt;&lt;td&gt;50&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;300000円以下&lt;/td&gt;&lt;td&gt;100&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;500000円以下&lt;/td&gt;&lt;td&gt;500&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;3000000円以下&lt;/td&gt;&lt;td&gt;1000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;5000000円以下&lt;/td&gt;&lt;td&gt;5000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;30000000円以下&lt;/td&gt;&lt;td&gt;10000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;50000000円以下&lt;/td&gt;&lt;td&gt;50000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;50000000円超&lt;/td&gt;&lt;td&gt;100000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;1000円以下&lt;/td&gt;&lt;td&gt;0.1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;3000円以下&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;10000円以下&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;30000円以下&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;100000円以下&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;300000円以下&lt;/td&gt;&lt;td&gt;50&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;1000000円以下&lt;/td&gt;&lt;td&gt;100&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;3000000円以下&lt;/td&gt;&lt;td&gt;500&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;10000000円以下&lt;/td&gt;&lt;td&gt;1000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;30000000円以下&lt;/td&gt;&lt;td&gt;5000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;50000000円以下&lt;/td&gt;&lt;td&gt;10000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;50000000円超&lt;/td&gt;&lt;td&gt;10000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10118&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10119&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10318&lt;/td&gt;&lt;td&gt;100円以下&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10318&lt;/td&gt;&lt;td&gt;1000円以下&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10318&lt;/td&gt;&lt;td&gt;1000円超&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10706&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0.25&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10718&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;12122&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14473&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14515&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0.05&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15411&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15569&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;17163&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
        /// </summary>
        /// <value>呼値グループ&lt;br&gt;※株式・先物・オプション銘柄の場合のみ &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;呼値コード&lt;/th&gt;&lt;th&gt;値段の水準&lt;/th&gt;&lt;th&gt;呼値単位&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;3000円以下&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;5000円以下&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;30000円以下&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;50000円以下&lt;/td&gt;&lt;td&gt;50&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;300000円以下&lt;/td&gt;&lt;td&gt;100&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;500000円以下&lt;/td&gt;&lt;td&gt;500&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;3000000円以下&lt;/td&gt;&lt;td&gt;1000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;5000000円以下&lt;/td&gt;&lt;td&gt;5000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;30000000円以下&lt;/td&gt;&lt;td&gt;10000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;50000000円以下&lt;/td&gt;&lt;td&gt;50000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;50000000円超&lt;/td&gt;&lt;td&gt;100000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;1000円以下&lt;/td&gt;&lt;td&gt;0.1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;3000円以下&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;10000円以下&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;30000円以下&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;100000円以下&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;300000円以下&lt;/td&gt;&lt;td&gt;50&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;1000000円以下&lt;/td&gt;&lt;td&gt;100&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;3000000円以下&lt;/td&gt;&lt;td&gt;500&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;10000000円以下&lt;/td&gt;&lt;td&gt;1000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;30000000円以下&lt;/td&gt;&lt;td&gt;5000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;50000000円以下&lt;/td&gt;&lt;td&gt;10000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10003&lt;/td&gt;&lt;td&gt;50000000円超&lt;/td&gt;&lt;td&gt;10000&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10118&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10119&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10318&lt;/td&gt;&lt;td&gt;100円以下&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10318&lt;/td&gt;&lt;td&gt;1000円以下&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10318&lt;/td&gt;&lt;td&gt;1000円超&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10706&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0.25&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10718&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;12122&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14473&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14515&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0.05&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15411&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15569&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;17163&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</value>
        [DataMember(Name = "PriceRangeGroup", EmitDefaultValue = true)]
        public string PriceRangeGroup { get; set; }

        /// <summary>
        /// 一般信用買建フラグ&lt;br&gt;※trueのとき一般信用買建可能&lt;br&gt;※株式銘柄の場合のみ
        /// </summary>
        /// <value>一般信用買建フラグ&lt;br&gt;※trueのとき一般信用買建可能&lt;br&gt;※株式銘柄の場合のみ</value>
        [DataMember(Name = "KCMarginBuy", EmitDefaultValue = true)]
        public bool KCMarginBuy { get; set; }

        /// <summary>
        /// 一般信用売建フラグ&lt;br&gt;※trueのとき一般信用売建可能&lt;br&gt;※株式銘柄の場合のみ
        /// </summary>
        /// <value>一般信用売建フラグ&lt;br&gt;※trueのとき一般信用売建可能&lt;br&gt;※株式銘柄の場合のみ</value>
        [DataMember(Name = "KCMarginSell", EmitDefaultValue = true)]
        public bool KCMarginSell { get; set; }

        /// <summary>
        /// 制度信用買建フラグ&lt;br&gt;※trueのとき制度信用買建可能&lt;br&gt;※株式銘柄の場合のみ
        /// </summary>
        /// <value>制度信用買建フラグ&lt;br&gt;※trueのとき制度信用買建可能&lt;br&gt;※株式銘柄の場合のみ</value>
        [DataMember(Name = "MarginBuy", EmitDefaultValue = true)]
        public bool MarginBuy { get; set; }

        /// <summary>
        /// 制度信用売建フラグ&lt;br&gt;※trueのとき制度信用売建可能&lt;br&gt;※株式銘柄の場合のみ
        /// </summary>
        /// <value>制度信用売建フラグ&lt;br&gt;※trueのとき制度信用売建可能&lt;br&gt;※株式銘柄の場合のみ</value>
        [DataMember(Name = "MarginSell", EmitDefaultValue = true)]
        public bool MarginSell { get; set; }

        /// <summary>
        /// 値幅上限&lt;br&gt;※株式・先物・オプション銘柄の場合のみ
        /// </summary>
        /// <value>値幅上限&lt;br&gt;※株式・先物・オプション銘柄の場合のみ</value>
        [DataMember(Name = "UpperLimit", EmitDefaultValue = true)]
        public double UpperLimit { get; set; }

        /// <summary>
        /// 値幅下限&lt;br&gt;※株式・先物・オプション銘柄の場合のみ
        /// </summary>
        /// <value>値幅下限&lt;br&gt;※株式・先物・オプション銘柄の場合のみ</value>
        [DataMember(Name = "LowerLimit", EmitDefaultValue = true)]
        public double LowerLimit { get; set; }

        /// <summary>
        /// 原資産コード&lt;br&gt;※先物・オプション銘柄の場合のみ &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;NK225&lt;/td&gt;&lt;td&gt;日経225&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;NK300&lt;/td&gt;&lt;td&gt;日経300&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;MOTHERS&lt;/td&gt;&lt;td&gt;東証マザーズ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JPX400&lt;/td&gt;&lt;td&gt;JPX日経400&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIX&lt;/td&gt;&lt;td&gt;TOPIX&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;NKVI&lt;/td&gt;&lt;td&gt;日経平均VI&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;DJIA&lt;/td&gt;&lt;td&gt;NYダウ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TSEREITINDEX&lt;/td&gt;&lt;td&gt;東証REIT指数&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIXCORE30&lt;/td&gt;&lt;td&gt;TOPIX Core30&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
        /// </summary>
        /// <value>原資産コード&lt;br&gt;※先物・オプション銘柄の場合のみ &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;NK225&lt;/td&gt;&lt;td&gt;日経225&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;NK300&lt;/td&gt;&lt;td&gt;日経300&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;MOTHERS&lt;/td&gt;&lt;td&gt;東証マザーズ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JPX400&lt;/td&gt;&lt;td&gt;JPX日経400&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIX&lt;/td&gt;&lt;td&gt;TOPIX&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;NKVI&lt;/td&gt;&lt;td&gt;日経平均VI&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;DJIA&lt;/td&gt;&lt;td&gt;NYダウ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TSEREITINDEX&lt;/td&gt;&lt;td&gt;東証REIT指数&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIXCORE30&lt;/td&gt;&lt;td&gt;TOPIX Core30&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</value>
        [DataMember(Name = "Underlyer", EmitDefaultValue = true)]
        public string Underlyer { get; set; }

        /// <summary>
        /// 限月-年月&lt;br&gt;※「限月-年月」は「年(yyyy)/月(MM)」で表示します。&lt;br&gt;※先物・オプション銘柄の場合のみ
        /// </summary>
        /// <value>限月-年月&lt;br&gt;※「限月-年月」は「年(yyyy)/月(MM)」で表示します。&lt;br&gt;※先物・オプション銘柄の場合のみ</value>
        [DataMember(Name = "DerivMonth", EmitDefaultValue = true)]
        public string DerivMonth { get; set; }

        /// <summary>
        /// 取引開始日&lt;br&gt;※先物・オプション銘柄の場合のみ
        /// </summary>
        /// <value>取引開始日&lt;br&gt;※先物・オプション銘柄の場合のみ</value>
        [DataMember(Name = "TradeStart", EmitDefaultValue = true)]
        public int TradeStart { get; set; }

        /// <summary>
        /// 取引終了日&lt;br&gt;※先物・オプション銘柄の場合のみ
        /// </summary>
        /// <value>取引終了日&lt;br&gt;※先物・オプション銘柄の場合のみ</value>
        [DataMember(Name = "TradeEnd", EmitDefaultValue = true)]
        public int TradeEnd { get; set; }

        /// <summary>
        /// 権利行使価格&lt;br&gt;※オプション銘柄の場合のみ
        /// </summary>
        /// <value>権利行使価格&lt;br&gt;※オプション銘柄の場合のみ</value>
        [DataMember(Name = "StrikePrice", EmitDefaultValue = true)]
        public double StrikePrice { get; set; }

        /// <summary>
        /// プット/コール区分&lt;br&gt;※オプション銘柄の場合のみ &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;プット&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;コール&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
        /// </summary>
        /// <value>プット/コール区分&lt;br&gt;※オプション銘柄の場合のみ &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;プット&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;コール&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</value>
        [DataMember(Name = "PutOrCall", EmitDefaultValue = true)]
        public int PutOrCall { get; set; }

        /// <summary>
        /// 清算値&lt;br&gt;※先物銘柄の場合のみ
        /// </summary>
        /// <value>清算値&lt;br&gt;※先物銘柄の場合のみ</value>
        [DataMember(Name = "ClearingPrice", EmitDefaultValue = true)]
        public double ClearingPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SymbolSuccess {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  SymbolName: ").Append(SymbolName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  ExchangeName: ").Append(ExchangeName).Append("\n");
            sb.Append("  BisCategory: ").Append(BisCategory).Append("\n");
            sb.Append("  TotalMarketValue: ").Append(TotalMarketValue).Append("\n");
            sb.Append("  TotalStocks: ").Append(TotalStocks).Append("\n");
            sb.Append("  TradingUnit: ").Append(TradingUnit).Append("\n");
            sb.Append("  FiscalYearEndBasic: ").Append(FiscalYearEndBasic).Append("\n");
            sb.Append("  PriceRangeGroup: ").Append(PriceRangeGroup).Append("\n");
            sb.Append("  KCMarginBuy: ").Append(KCMarginBuy).Append("\n");
            sb.Append("  KCMarginSell: ").Append(KCMarginSell).Append("\n");
            sb.Append("  MarginBuy: ").Append(MarginBuy).Append("\n");
            sb.Append("  MarginSell: ").Append(MarginSell).Append("\n");
            sb.Append("  UpperLimit: ").Append(UpperLimit).Append("\n");
            sb.Append("  LowerLimit: ").Append(LowerLimit).Append("\n");
            sb.Append("  Underlyer: ").Append(Underlyer).Append("\n");
            sb.Append("  DerivMonth: ").Append(DerivMonth).Append("\n");
            sb.Append("  TradeStart: ").Append(TradeStart).Append("\n");
            sb.Append("  TradeEnd: ").Append(TradeEnd).Append("\n");
            sb.Append("  StrikePrice: ").Append(StrikePrice).Append("\n");
            sb.Append("  PutOrCall: ").Append(PutOrCall).Append("\n");
            sb.Append("  ClearingPrice: ").Append(ClearingPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SymbolSuccess);
        }

        /// <summary>
        /// Returns true if SymbolSuccess instances are equal
        /// </summary>
        /// <param name="input">Instance of SymbolSuccess to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SymbolSuccess input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.SymbolName == input.SymbolName ||
                    (this.SymbolName != null &&
                    this.SymbolName.Equals(input.SymbolName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    this.Exchange.Equals(input.Exchange)
                ) && 
                (
                    this.ExchangeName == input.ExchangeName ||
                    (this.ExchangeName != null &&
                    this.ExchangeName.Equals(input.ExchangeName))
                ) && 
                (
                    this.BisCategory == input.BisCategory ||
                    (this.BisCategory != null &&
                    this.BisCategory.Equals(input.BisCategory))
                ) && 
                (
                    this.TotalMarketValue == input.TotalMarketValue ||
                    this.TotalMarketValue.Equals(input.TotalMarketValue)
                ) && 
                (
                    this.TotalStocks == input.TotalStocks ||
                    this.TotalStocks.Equals(input.TotalStocks)
                ) && 
                (
                    this.TradingUnit == input.TradingUnit ||
                    this.TradingUnit.Equals(input.TradingUnit)
                ) && 
                (
                    this.FiscalYearEndBasic == input.FiscalYearEndBasic ||
                    this.FiscalYearEndBasic.Equals(input.FiscalYearEndBasic)
                ) && 
                (
                    this.PriceRangeGroup == input.PriceRangeGroup ||
                    (this.PriceRangeGroup != null &&
                    this.PriceRangeGroup.Equals(input.PriceRangeGroup))
                ) && 
                (
                    this.KCMarginBuy == input.KCMarginBuy ||
                    this.KCMarginBuy.Equals(input.KCMarginBuy)
                ) && 
                (
                    this.KCMarginSell == input.KCMarginSell ||
                    this.KCMarginSell.Equals(input.KCMarginSell)
                ) && 
                (
                    this.MarginBuy == input.MarginBuy ||
                    this.MarginBuy.Equals(input.MarginBuy)
                ) && 
                (
                    this.MarginSell == input.MarginSell ||
                    this.MarginSell.Equals(input.MarginSell)
                ) && 
                (
                    this.UpperLimit == input.UpperLimit ||
                    this.UpperLimit.Equals(input.UpperLimit)
                ) && 
                (
                    this.LowerLimit == input.LowerLimit ||
                    this.LowerLimit.Equals(input.LowerLimit)
                ) && 
                (
                    this.Underlyer == input.Underlyer ||
                    (this.Underlyer != null &&
                    this.Underlyer.Equals(input.Underlyer))
                ) && 
                (
                    this.DerivMonth == input.DerivMonth ||
                    (this.DerivMonth != null &&
                    this.DerivMonth.Equals(input.DerivMonth))
                ) && 
                (
                    this.TradeStart == input.TradeStart ||
                    this.TradeStart.Equals(input.TradeStart)
                ) && 
                (
                    this.TradeEnd == input.TradeEnd ||
                    this.TradeEnd.Equals(input.TradeEnd)
                ) && 
                (
                    this.StrikePrice == input.StrikePrice ||
                    this.StrikePrice.Equals(input.StrikePrice)
                ) && 
                (
                    this.PutOrCall == input.PutOrCall ||
                    this.PutOrCall.Equals(input.PutOrCall)
                ) && 
                (
                    this.ClearingPrice == input.ClearingPrice ||
                    this.ClearingPrice.Equals(input.ClearingPrice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.SymbolName != null)
                    hashCode = hashCode * 59 + this.SymbolName.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.ExchangeName != null)
                    hashCode = hashCode * 59 + this.ExchangeName.GetHashCode();
                if (this.BisCategory != null)
                    hashCode = hashCode * 59 + this.BisCategory.GetHashCode();
                hashCode = hashCode * 59 + this.TotalMarketValue.GetHashCode();
                hashCode = hashCode * 59 + this.TotalStocks.GetHashCode();
                hashCode = hashCode * 59 + this.TradingUnit.GetHashCode();
                hashCode = hashCode * 59 + this.FiscalYearEndBasic.GetHashCode();
                if (this.PriceRangeGroup != null)
                    hashCode = hashCode * 59 + this.PriceRangeGroup.GetHashCode();
                hashCode = hashCode * 59 + this.KCMarginBuy.GetHashCode();
                hashCode = hashCode * 59 + this.KCMarginSell.GetHashCode();
                hashCode = hashCode * 59 + this.MarginBuy.GetHashCode();
                hashCode = hashCode * 59 + this.MarginSell.GetHashCode();
                hashCode = hashCode * 59 + this.UpperLimit.GetHashCode();
                hashCode = hashCode * 59 + this.LowerLimit.GetHashCode();
                if (this.Underlyer != null)
                    hashCode = hashCode * 59 + this.Underlyer.GetHashCode();
                if (this.DerivMonth != null)
                    hashCode = hashCode * 59 + this.DerivMonth.GetHashCode();
                hashCode = hashCode * 59 + this.TradeStart.GetHashCode();
                hashCode = hashCode * 59 + this.TradeEnd.GetHashCode();
                hashCode = hashCode * 59 + this.StrikePrice.GetHashCode();
                hashCode = hashCode * 59 + this.PutOrCall.GetHashCode();
                hashCode = hashCode * 59 + this.ClearingPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
