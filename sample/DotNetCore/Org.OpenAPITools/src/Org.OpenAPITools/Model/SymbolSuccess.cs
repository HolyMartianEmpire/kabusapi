/*
 * kabuステーションAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SymbolSuccess
    /// </summary>
    [DataContract(Name = "SymbolSuccess")]
    public partial class SymbolSuccess : IEquatable<SymbolSuccess>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolSuccess" /> class.
        /// </summary>
        /// <param name="symbol">銘柄コード.</param>
        /// <param name="symbolName">銘柄名.</param>
        /// <param name="displayName">銘柄略称.</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証| |5|福証| |6|札証|.</param>
        /// <param name="exchangeName">市場名称.</param>
        /// <param name="bisCategory">業種コード名 |定義値|説明| |-|-| |0050      |水産・農林業| |1050      |鉱業| |2050      |建設業| |3050      |食料品| |3100      |繊維製品| |3150      |パルプ・紙| |3200      |化学| |3250      |医薬品| |3300      |石油・石炭製品| |3350      |ゴム製品| |3400      |ガラス・土石製品| |3450      |鉄鋼| |3500      |非鉄金属| |3550      |金属製品| |3600      |機械| |3650      |電気機器| |3700      |輸送用機器| |3750      |精密機器| |3800      |その他製品| |4050      |電気・ガス業| |5050      |陸運業| |5100      |海運業| |5150      |空運業| |5200      |倉庫・運輸関連業| |5250      |情報・通信業| |6050      |卸売業| |6100      |小売業| |7050      |銀行業| |7100      |証券、商品先物取引業| |7150      |保険業| |7200      |その他金融業| |8050      |不動産業| |9050      |サービス業| |9999      |その他|.</param>
        /// <param name="totalMarketValue">時価総額.</param>
        /// <param name="totalStocks">発行済み株式数（千株）.</param>
        /// <param name="tradingUnit">売買単位.</param>
        /// <param name="fiscalYearEndBasic">決算期日.</param>
        /// <param name="priceRangeGroup">呼値グループ |呼値コード|値段の水準|呼値単位| |-|-|-| |10000|3000円以下|1 |10000|5000円以下|5 |10000|30000円以下|10 |10000|50000円以下|50 |10000|300000円以下|100 |10000|500000円以下|500 |10000|3000000円以下|1000 |10000|5000000円以下|5000 |10000|30000000円以下|10000 |10000|50000000円以下|50000 |10000|50000000円超|100000 |10003|1000円以下|0.1 |10003|3000円以下|0.5 |10003|10000円以下|1 |10003|30000円以下|5 |10003|100000円以下|10 |10003|300000円以下|50 |10003|1000000円以下|100 |10003|3000000円以下|500 |10003|10000000円以下|1000 |10003|30000000円以下|5000 |10003|50000000円以下|10000 |10003|50000000円超|10000.</param>
        /// <param name="kCMarginBuy">一般信用買建フラグ&lt;br&gt;※trueのとき一般信用買建可能.</param>
        /// <param name="kCMarginSell">一般信用売建フラグ&lt;br&gt;※trueのとき一般信用売建可能.</param>
        /// <param name="marginBuy">制度信用買建フラグ&lt;br&gt;※trueのとき制度信用買建可能.</param>
        /// <param name="marginSell">制度信用売建フラグ&lt;br&gt;※trueのとき制度信用売建可能.</param>
        /// <param name="upperLimit">値幅上限.</param>
        /// <param name="lowerLimit">値幅下限.</param>
        public SymbolSuccess(string symbol = default(string), string symbolName = default(string), string displayName = default(string), int exchange = default(int), string exchangeName = default(string), string bisCategory = default(string), double totalMarketValue = default(double), double totalStocks = default(double), double tradingUnit = default(double), int fiscalYearEndBasic = default(int), string priceRangeGroup = default(string), bool kCMarginBuy = default(bool), bool kCMarginSell = default(bool), bool marginBuy = default(bool), bool marginSell = default(bool), double upperLimit = default(double), double lowerLimit = default(double))
        {
            this.Symbol = symbol;
            this.SymbolName = symbolName;
            this.DisplayName = displayName;
            this.Exchange = exchange;
            this.ExchangeName = exchangeName;
            this.BisCategory = bisCategory;
            this.TotalMarketValue = totalMarketValue;
            this.TotalStocks = totalStocks;
            this.TradingUnit = tradingUnit;
            this.FiscalYearEndBasic = fiscalYearEndBasic;
            this.PriceRangeGroup = priceRangeGroup;
            this.KCMarginBuy = kCMarginBuy;
            this.KCMarginSell = kCMarginSell;
            this.MarginBuy = marginBuy;
            this.MarginSell = marginSell;
            this.UpperLimit = upperLimit;
            this.LowerLimit = lowerLimit;
        }

        /// <summary>
        /// 銘柄コード
        /// </summary>
        /// <value>銘柄コード</value>
        [DataMember(Name = "Symbol", EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// 銘柄名
        /// </summary>
        /// <value>銘柄名</value>
        [DataMember(Name = "SymbolName", EmitDefaultValue = true)]
        public string SymbolName { get; set; }

        /// <summary>
        /// 銘柄略称
        /// </summary>
        /// <value>銘柄略称</value>
        [DataMember(Name = "DisplayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// 市場コード |定義値|説明| |-|-| |1|東証| |3|名証| |5|福証| |6|札証|
        /// </summary>
        /// <value>市場コード |定義値|説明| |-|-| |1|東証| |3|名証| |5|福証| |6|札証|</value>
        [DataMember(Name = "Exchange", EmitDefaultValue = true)]
        public int Exchange { get; set; }

        /// <summary>
        /// 市場名称
        /// </summary>
        /// <value>市場名称</value>
        [DataMember(Name = "ExchangeName", EmitDefaultValue = true)]
        public string ExchangeName { get; set; }

        /// <summary>
        /// 業種コード名 |定義値|説明| |-|-| |0050      |水産・農林業| |1050      |鉱業| |2050      |建設業| |3050      |食料品| |3100      |繊維製品| |3150      |パルプ・紙| |3200      |化学| |3250      |医薬品| |3300      |石油・石炭製品| |3350      |ゴム製品| |3400      |ガラス・土石製品| |3450      |鉄鋼| |3500      |非鉄金属| |3550      |金属製品| |3600      |機械| |3650      |電気機器| |3700      |輸送用機器| |3750      |精密機器| |3800      |その他製品| |4050      |電気・ガス業| |5050      |陸運業| |5100      |海運業| |5150      |空運業| |5200      |倉庫・運輸関連業| |5250      |情報・通信業| |6050      |卸売業| |6100      |小売業| |7050      |銀行業| |7100      |証券、商品先物取引業| |7150      |保険業| |7200      |その他金融業| |8050      |不動産業| |9050      |サービス業| |9999      |その他|
        /// </summary>
        /// <value>業種コード名 |定義値|説明| |-|-| |0050      |水産・農林業| |1050      |鉱業| |2050      |建設業| |3050      |食料品| |3100      |繊維製品| |3150      |パルプ・紙| |3200      |化学| |3250      |医薬品| |3300      |石油・石炭製品| |3350      |ゴム製品| |3400      |ガラス・土石製品| |3450      |鉄鋼| |3500      |非鉄金属| |3550      |金属製品| |3600      |機械| |3650      |電気機器| |3700      |輸送用機器| |3750      |精密機器| |3800      |その他製品| |4050      |電気・ガス業| |5050      |陸運業| |5100      |海運業| |5150      |空運業| |5200      |倉庫・運輸関連業| |5250      |情報・通信業| |6050      |卸売業| |6100      |小売業| |7050      |銀行業| |7100      |証券、商品先物取引業| |7150      |保険業| |7200      |その他金融業| |8050      |不動産業| |9050      |サービス業| |9999      |その他|</value>
        [DataMember(Name = "BisCategory", EmitDefaultValue = true)]
        public string BisCategory { get; set; }

        /// <summary>
        /// 時価総額
        /// </summary>
        /// <value>時価総額</value>
        [DataMember(Name = "TotalMarketValue", EmitDefaultValue = true)]
        public double TotalMarketValue { get; set; }

        /// <summary>
        /// 発行済み株式数（千株）
        /// </summary>
        /// <value>発行済み株式数（千株）</value>
        [DataMember(Name = "TotalStocks", EmitDefaultValue = true)]
        public double TotalStocks { get; set; }

        /// <summary>
        /// 売買単位
        /// </summary>
        /// <value>売買単位</value>
        [DataMember(Name = "TradingUnit", EmitDefaultValue = true)]
        public double TradingUnit { get; set; }

        /// <summary>
        /// 決算期日
        /// </summary>
        /// <value>決算期日</value>
        [DataMember(Name = "FiscalYearEndBasic", EmitDefaultValue = true)]
        public int FiscalYearEndBasic { get; set; }

        /// <summary>
        /// 呼値グループ |呼値コード|値段の水準|呼値単位| |-|-|-| |10000|3000円以下|1 |10000|5000円以下|5 |10000|30000円以下|10 |10000|50000円以下|50 |10000|300000円以下|100 |10000|500000円以下|500 |10000|3000000円以下|1000 |10000|5000000円以下|5000 |10000|30000000円以下|10000 |10000|50000000円以下|50000 |10000|50000000円超|100000 |10003|1000円以下|0.1 |10003|3000円以下|0.5 |10003|10000円以下|1 |10003|30000円以下|5 |10003|100000円以下|10 |10003|300000円以下|50 |10003|1000000円以下|100 |10003|3000000円以下|500 |10003|10000000円以下|1000 |10003|30000000円以下|5000 |10003|50000000円以下|10000 |10003|50000000円超|10000
        /// </summary>
        /// <value>呼値グループ |呼値コード|値段の水準|呼値単位| |-|-|-| |10000|3000円以下|1 |10000|5000円以下|5 |10000|30000円以下|10 |10000|50000円以下|50 |10000|300000円以下|100 |10000|500000円以下|500 |10000|3000000円以下|1000 |10000|5000000円以下|5000 |10000|30000000円以下|10000 |10000|50000000円以下|50000 |10000|50000000円超|100000 |10003|1000円以下|0.1 |10003|3000円以下|0.5 |10003|10000円以下|1 |10003|30000円以下|5 |10003|100000円以下|10 |10003|300000円以下|50 |10003|1000000円以下|100 |10003|3000000円以下|500 |10003|10000000円以下|1000 |10003|30000000円以下|5000 |10003|50000000円以下|10000 |10003|50000000円超|10000</value>
        [DataMember(Name = "PriceRangeGroup", EmitDefaultValue = true)]
        public string PriceRangeGroup { get; set; }

        /// <summary>
        /// 一般信用買建フラグ&lt;br&gt;※trueのとき一般信用買建可能
        /// </summary>
        /// <value>一般信用買建フラグ&lt;br&gt;※trueのとき一般信用買建可能</value>
        [DataMember(Name = "KCMarginBuy", EmitDefaultValue = true)]
        public bool KCMarginBuy { get; set; }

        /// <summary>
        /// 一般信用売建フラグ&lt;br&gt;※trueのとき一般信用売建可能
        /// </summary>
        /// <value>一般信用売建フラグ&lt;br&gt;※trueのとき一般信用売建可能</value>
        [DataMember(Name = "KCMarginSell", EmitDefaultValue = true)]
        public bool KCMarginSell { get; set; }

        /// <summary>
        /// 制度信用買建フラグ&lt;br&gt;※trueのとき制度信用買建可能
        /// </summary>
        /// <value>制度信用買建フラグ&lt;br&gt;※trueのとき制度信用買建可能</value>
        [DataMember(Name = "MarginBuy", EmitDefaultValue = true)]
        public bool MarginBuy { get; set; }

        /// <summary>
        /// 制度信用売建フラグ&lt;br&gt;※trueのとき制度信用売建可能
        /// </summary>
        /// <value>制度信用売建フラグ&lt;br&gt;※trueのとき制度信用売建可能</value>
        [DataMember(Name = "MarginSell", EmitDefaultValue = true)]
        public bool MarginSell { get; set; }

        /// <summary>
        /// 値幅上限
        /// </summary>
        /// <value>値幅上限</value>
        [DataMember(Name = "UpperLimit", EmitDefaultValue = true)]
        public double UpperLimit { get; set; }

        /// <summary>
        /// 値幅下限
        /// </summary>
        /// <value>値幅下限</value>
        [DataMember(Name = "LowerLimit", EmitDefaultValue = true)]
        public double LowerLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SymbolSuccess {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  SymbolName: ").Append(SymbolName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  ExchangeName: ").Append(ExchangeName).Append("\n");
            sb.Append("  BisCategory: ").Append(BisCategory).Append("\n");
            sb.Append("  TotalMarketValue: ").Append(TotalMarketValue).Append("\n");
            sb.Append("  TotalStocks: ").Append(TotalStocks).Append("\n");
            sb.Append("  TradingUnit: ").Append(TradingUnit).Append("\n");
            sb.Append("  FiscalYearEndBasic: ").Append(FiscalYearEndBasic).Append("\n");
            sb.Append("  PriceRangeGroup: ").Append(PriceRangeGroup).Append("\n");
            sb.Append("  KCMarginBuy: ").Append(KCMarginBuy).Append("\n");
            sb.Append("  KCMarginSell: ").Append(KCMarginSell).Append("\n");
            sb.Append("  MarginBuy: ").Append(MarginBuy).Append("\n");
            sb.Append("  MarginSell: ").Append(MarginSell).Append("\n");
            sb.Append("  UpperLimit: ").Append(UpperLimit).Append("\n");
            sb.Append("  LowerLimit: ").Append(LowerLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SymbolSuccess);
        }

        /// <summary>
        /// Returns true if SymbolSuccess instances are equal
        /// </summary>
        /// <param name="input">Instance of SymbolSuccess to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SymbolSuccess input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.SymbolName == input.SymbolName ||
                    (this.SymbolName != null &&
                    this.SymbolName.Equals(input.SymbolName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    this.Exchange.Equals(input.Exchange)
                ) && 
                (
                    this.ExchangeName == input.ExchangeName ||
                    (this.ExchangeName != null &&
                    this.ExchangeName.Equals(input.ExchangeName))
                ) && 
                (
                    this.BisCategory == input.BisCategory ||
                    (this.BisCategory != null &&
                    this.BisCategory.Equals(input.BisCategory))
                ) && 
                (
                    this.TotalMarketValue == input.TotalMarketValue ||
                    this.TotalMarketValue.Equals(input.TotalMarketValue)
                ) && 
                (
                    this.TotalStocks == input.TotalStocks ||
                    this.TotalStocks.Equals(input.TotalStocks)
                ) && 
                (
                    this.TradingUnit == input.TradingUnit ||
                    this.TradingUnit.Equals(input.TradingUnit)
                ) && 
                (
                    this.FiscalYearEndBasic == input.FiscalYearEndBasic ||
                    this.FiscalYearEndBasic.Equals(input.FiscalYearEndBasic)
                ) && 
                (
                    this.PriceRangeGroup == input.PriceRangeGroup ||
                    (this.PriceRangeGroup != null &&
                    this.PriceRangeGroup.Equals(input.PriceRangeGroup))
                ) && 
                (
                    this.KCMarginBuy == input.KCMarginBuy ||
                    this.KCMarginBuy.Equals(input.KCMarginBuy)
                ) && 
                (
                    this.KCMarginSell == input.KCMarginSell ||
                    this.KCMarginSell.Equals(input.KCMarginSell)
                ) && 
                (
                    this.MarginBuy == input.MarginBuy ||
                    this.MarginBuy.Equals(input.MarginBuy)
                ) && 
                (
                    this.MarginSell == input.MarginSell ||
                    this.MarginSell.Equals(input.MarginSell)
                ) && 
                (
                    this.UpperLimit == input.UpperLimit ||
                    this.UpperLimit.Equals(input.UpperLimit)
                ) && 
                (
                    this.LowerLimit == input.LowerLimit ||
                    this.LowerLimit.Equals(input.LowerLimit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.SymbolName != null)
                    hashCode = hashCode * 59 + this.SymbolName.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.ExchangeName != null)
                    hashCode = hashCode * 59 + this.ExchangeName.GetHashCode();
                if (this.BisCategory != null)
                    hashCode = hashCode * 59 + this.BisCategory.GetHashCode();
                hashCode = hashCode * 59 + this.TotalMarketValue.GetHashCode();
                hashCode = hashCode * 59 + this.TotalStocks.GetHashCode();
                hashCode = hashCode * 59 + this.TradingUnit.GetHashCode();
                hashCode = hashCode * 59 + this.FiscalYearEndBasic.GetHashCode();
                if (this.PriceRangeGroup != null)
                    hashCode = hashCode * 59 + this.PriceRangeGroup.GetHashCode();
                hashCode = hashCode * 59 + this.KCMarginBuy.GetHashCode();
                hashCode = hashCode * 59 + this.KCMarginSell.GetHashCode();
                hashCode = hashCode * 59 + this.MarginBuy.GetHashCode();
                hashCode = hashCode * 59 + this.MarginSell.GetHashCode();
                hashCode = hashCode * 59 + this.UpperLimit.GetHashCode();
                hashCode = hashCode * 59 + this.LowerLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
