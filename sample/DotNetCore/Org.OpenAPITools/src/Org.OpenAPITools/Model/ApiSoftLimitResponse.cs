/*
 * kabuステーションAPI
 *
 * # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ApiSoftLimitResponse
    /// </summary>
    [DataContract(Name = "ApiSoftLimitResponse")]
    public partial class ApiSoftLimitResponse : IEquatable<ApiSoftLimitResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiSoftLimitResponse" /> class.
        /// </summary>
        /// <param name="stock">現物のワンショット上限&lt;br&gt;※単位は万円.</param>
        /// <param name="margin">信用のワンショット上限&lt;br&gt;※単位は万円.</param>
        /// <param name="future">先物のワンショット上限&lt;br&gt;※単位は枚.</param>
        /// <param name="futureMini">先物ミニのワンショット上限&lt;br&gt;※単位は枚.</param>
        /// <param name="option">オプションのワンショット上限&lt;br&gt;※単位は枚.</param>
        /// <param name="kabuSVersion">kabuステーションのバージョン.</param>
        public ApiSoftLimitResponse(double stock = default(double), double margin = default(double), double future = default(double), double futureMini = default(double), double option = default(double), string kabuSVersion = default(string))
        {
            this.Stock = stock;
            this.Margin = margin;
            this.Future = future;
            this.FutureMini = futureMini;
            this.Option = option;
            this.KabuSVersion = kabuSVersion;
        }

        /// <summary>
        /// 現物のワンショット上限&lt;br&gt;※単位は万円
        /// </summary>
        /// <value>現物のワンショット上限&lt;br&gt;※単位は万円</value>
        [DataMember(Name = "Stock", EmitDefaultValue = true)]
        public double Stock { get; set; }

        /// <summary>
        /// 信用のワンショット上限&lt;br&gt;※単位は万円
        /// </summary>
        /// <value>信用のワンショット上限&lt;br&gt;※単位は万円</value>
        [DataMember(Name = "Margin", EmitDefaultValue = true)]
        public double Margin { get; set; }

        /// <summary>
        /// 先物のワンショット上限&lt;br&gt;※単位は枚
        /// </summary>
        /// <value>先物のワンショット上限&lt;br&gt;※単位は枚</value>
        [DataMember(Name = "Future", EmitDefaultValue = true)]
        public double Future { get; set; }

        /// <summary>
        /// 先物ミニのワンショット上限&lt;br&gt;※単位は枚
        /// </summary>
        /// <value>先物ミニのワンショット上限&lt;br&gt;※単位は枚</value>
        [DataMember(Name = "FutureMini", EmitDefaultValue = true)]
        public double FutureMini { get; set; }

        /// <summary>
        /// オプションのワンショット上限&lt;br&gt;※単位は枚
        /// </summary>
        /// <value>オプションのワンショット上限&lt;br&gt;※単位は枚</value>
        [DataMember(Name = "Option", EmitDefaultValue = true)]
        public double Option { get; set; }

        /// <summary>
        /// kabuステーションのバージョン
        /// </summary>
        /// <value>kabuステーションのバージョン</value>
        [DataMember(Name = "KabuSVersion", EmitDefaultValue = true)]
        public string KabuSVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiSoftLimitResponse {\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  Future: ").Append(Future).Append("\n");
            sb.Append("  FutureMini: ").Append(FutureMini).Append("\n");
            sb.Append("  Option: ").Append(Option).Append("\n");
            sb.Append("  KabuSVersion: ").Append(KabuSVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiSoftLimitResponse);
        }

        /// <summary>
        /// Returns true if ApiSoftLimitResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiSoftLimitResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiSoftLimitResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Stock == input.Stock ||
                    this.Stock.Equals(input.Stock)
                ) && 
                (
                    this.Margin == input.Margin ||
                    this.Margin.Equals(input.Margin)
                ) && 
                (
                    this.Future == input.Future ||
                    this.Future.Equals(input.Future)
                ) && 
                (
                    this.FutureMini == input.FutureMini ||
                    this.FutureMini.Equals(input.FutureMini)
                ) && 
                (
                    this.Option == input.Option ||
                    this.Option.Equals(input.Option)
                ) && 
                (
                    this.KabuSVersion == input.KabuSVersion ||
                    (this.KabuSVersion != null &&
                    this.KabuSVersion.Equals(input.KabuSVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Stock.GetHashCode();
                hashCode = hashCode * 59 + this.Margin.GetHashCode();
                hashCode = hashCode * 59 + this.Future.GetHashCode();
                hashCode = hashCode * 59 + this.FutureMini.GetHashCode();
                hashCode = hashCode * 59 + this.Option.GetHashCode();
                if (this.KabuSVersion != null)
                    hashCode = hashCode * 59 + this.KabuSVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
