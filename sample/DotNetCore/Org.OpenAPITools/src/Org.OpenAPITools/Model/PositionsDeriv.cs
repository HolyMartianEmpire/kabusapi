/*
 * kabuステーションAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PositionsDeriv
    /// </summary>
    [DataContract(Name = "PositionsDeriv")]
    public partial class PositionsDeriv : IEquatable<PositionsDeriv>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PositionsDeriv" /> class.
        /// </summary>
        /// <param name="holdID">返済建玉ID.</param>
        /// <param name="qty">返済建玉数量.</param>
        public PositionsDeriv(string holdID = default(string), int qty = default(int))
        {
            this.HoldID = holdID;
            this.Qty = qty;
        }

        /// <summary>
        /// 返済建玉ID
        /// </summary>
        /// <value>返済建玉ID</value>
        [DataMember(Name = "HoldID", EmitDefaultValue = true)]
        public string HoldID { get; set; }

        /// <summary>
        /// 返済建玉数量
        /// </summary>
        /// <value>返済建玉数量</value>
        [DataMember(Name = "Qty", EmitDefaultValue = true)]
        public int Qty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PositionsDeriv {\n");
            sb.Append("  HoldID: ").Append(HoldID).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PositionsDeriv);
        }

        /// <summary>
        /// Returns true if PositionsDeriv instances are equal
        /// </summary>
        /// <param name="input">Instance of PositionsDeriv to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PositionsDeriv input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HoldID == input.HoldID ||
                    (this.HoldID != null &&
                    this.HoldID.Equals(input.HoldID))
                ) && 
                (
                    this.Qty == input.Qty ||
                    this.Qty.Equals(input.Qty)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HoldID != null)
                    hashCode = hashCode * 59 + this.HoldID.GetHashCode();
                hashCode = hashCode * 59 + this.Qty.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
