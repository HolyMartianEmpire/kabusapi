/*
 * kabuステーションAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CommonRankingItems
    /// </summary>
    [DataContract(Name = "CommonRankingItems")]
    public partial class CommonRankingItems : IEquatable<CommonRankingItems>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonRankingItems" /> class.
        /// </summary>
        /// <param name="no">順位&lt;br&gt;※ランキング内で同じ順位が返却される場合があります（10位が2件など）.</param>
        /// <param name="trend">トレンド  &lt;table&gt;     &lt;thead&gt;         &lt;tr&gt;             &lt;th&gt;定義値&lt;/th&gt;             &lt;th&gt;内容&lt;/th&gt;         &lt;/tr&gt;     &lt;/thead&gt;     &lt;tbody&gt;         &lt;tr&gt;             &lt;td&gt;0&lt;/td&gt;             &lt;td&gt;対象データ無し&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;1&lt;/td&gt;             &lt;td&gt;過去10営業日より20位以上上昇&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;2&lt;/td&gt;             &lt;td&gt;過去10営業日より1～19位上昇&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;3&lt;/td&gt;             &lt;td&gt;過去10営業日と変わらず&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;4&lt;/td&gt;             &lt;td&gt;過去10営業日より1～19位下落&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;5&lt;/td&gt;             &lt;td&gt;過去10営業日より20位以上下落&lt;/td&gt;         &lt;/tr&gt;     &lt;/tbody&gt; &lt;/table&gt;.</param>
        /// <param name="averageRanking">平均順位&lt;br&gt;※100位以下は「999」となります.</param>
        /// <param name="symbol">銘柄コード.</param>
        /// <param name="symbolName">銘柄名称.</param>
        /// <param name="currentPrice">現在値.</param>
        /// <param name="changeRatio">前日比.</param>
        public CommonRankingItems(int no = default(int), string trend = default(string), double averageRanking = default(double), string symbol = default(string), string symbolName = default(string), double currentPrice = default(double), double changeRatio = default(double))
        {
            this.No = no;
            this.Trend = trend;
            this.AverageRanking = averageRanking;
            this.Symbol = symbol;
            this.SymbolName = symbolName;
            this.CurrentPrice = currentPrice;
            this.ChangeRatio = changeRatio;
        }

        /// <summary>
        /// 順位&lt;br&gt;※ランキング内で同じ順位が返却される場合があります（10位が2件など）
        /// </summary>
        /// <value>順位&lt;br&gt;※ランキング内で同じ順位が返却される場合があります（10位が2件など）</value>
        [DataMember(Name = "No", EmitDefaultValue = true)]
        public int No { get; set; }

        /// <summary>
        /// トレンド  &lt;table&gt;     &lt;thead&gt;         &lt;tr&gt;             &lt;th&gt;定義値&lt;/th&gt;             &lt;th&gt;内容&lt;/th&gt;         &lt;/tr&gt;     &lt;/thead&gt;     &lt;tbody&gt;         &lt;tr&gt;             &lt;td&gt;0&lt;/td&gt;             &lt;td&gt;対象データ無し&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;1&lt;/td&gt;             &lt;td&gt;過去10営業日より20位以上上昇&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;2&lt;/td&gt;             &lt;td&gt;過去10営業日より1～19位上昇&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;3&lt;/td&gt;             &lt;td&gt;過去10営業日と変わらず&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;4&lt;/td&gt;             &lt;td&gt;過去10営業日より1～19位下落&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;5&lt;/td&gt;             &lt;td&gt;過去10営業日より20位以上下落&lt;/td&gt;         &lt;/tr&gt;     &lt;/tbody&gt; &lt;/table&gt;
        /// </summary>
        /// <value>トレンド  &lt;table&gt;     &lt;thead&gt;         &lt;tr&gt;             &lt;th&gt;定義値&lt;/th&gt;             &lt;th&gt;内容&lt;/th&gt;         &lt;/tr&gt;     &lt;/thead&gt;     &lt;tbody&gt;         &lt;tr&gt;             &lt;td&gt;0&lt;/td&gt;             &lt;td&gt;対象データ無し&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;1&lt;/td&gt;             &lt;td&gt;過去10営業日より20位以上上昇&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;2&lt;/td&gt;             &lt;td&gt;過去10営業日より1～19位上昇&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;3&lt;/td&gt;             &lt;td&gt;過去10営業日と変わらず&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;4&lt;/td&gt;             &lt;td&gt;過去10営業日より1～19位下落&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;5&lt;/td&gt;             &lt;td&gt;過去10営業日より20位以上下落&lt;/td&gt;         &lt;/tr&gt;     &lt;/tbody&gt; &lt;/table&gt;</value>
        [DataMember(Name = "Trend", EmitDefaultValue = true)]
        public string Trend { get; set; }

        /// <summary>
        /// 平均順位&lt;br&gt;※100位以下は「999」となります
        /// </summary>
        /// <value>平均順位&lt;br&gt;※100位以下は「999」となります</value>
        [DataMember(Name = "AverageRanking", EmitDefaultValue = true)]
        public double AverageRanking { get; set; }

        /// <summary>
        /// 銘柄コード
        /// </summary>
        /// <value>銘柄コード</value>
        [DataMember(Name = "Symbol", EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// 銘柄名称
        /// </summary>
        /// <value>銘柄名称</value>
        [DataMember(Name = "SymbolName", EmitDefaultValue = true)]
        public string SymbolName { get; set; }

        /// <summary>
        /// 現在値
        /// </summary>
        /// <value>現在値</value>
        [DataMember(Name = "CurrentPrice", EmitDefaultValue = true)]
        public double CurrentPrice { get; set; }

        /// <summary>
        /// 前日比
        /// </summary>
        /// <value>前日比</value>
        [DataMember(Name = "ChangeRatio", EmitDefaultValue = true)]
        public double ChangeRatio { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonRankingItems {\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  Trend: ").Append(Trend).Append("\n");
            sb.Append("  AverageRanking: ").Append(AverageRanking).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  SymbolName: ").Append(SymbolName).Append("\n");
            sb.Append("  CurrentPrice: ").Append(CurrentPrice).Append("\n");
            sb.Append("  ChangeRatio: ").Append(ChangeRatio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonRankingItems);
        }

        /// <summary>
        /// Returns true if CommonRankingItems instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonRankingItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonRankingItems input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.No == input.No ||
                    this.No.Equals(input.No)
                ) && 
                (
                    this.Trend == input.Trend ||
                    (this.Trend != null &&
                    this.Trend.Equals(input.Trend))
                ) && 
                (
                    this.AverageRanking == input.AverageRanking ||
                    this.AverageRanking.Equals(input.AverageRanking)
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.SymbolName == input.SymbolName ||
                    (this.SymbolName != null &&
                    this.SymbolName.Equals(input.SymbolName))
                ) && 
                (
                    this.CurrentPrice == input.CurrentPrice ||
                    this.CurrentPrice.Equals(input.CurrentPrice)
                ) && 
                (
                    this.ChangeRatio == input.ChangeRatio ||
                    this.ChangeRatio.Equals(input.ChangeRatio)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.No.GetHashCode();
                if (this.Trend != null)
                    hashCode = hashCode * 59 + this.Trend.GetHashCode();
                hashCode = hashCode * 59 + this.AverageRanking.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.SymbolName != null)
                    hashCode = hashCode * 59 + this.SymbolName.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentPrice.GetHashCode();
                hashCode = hashCode * 59 + this.ChangeRatio.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
