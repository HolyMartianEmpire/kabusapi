/*
 * kabuステーションAPI
 *
 * # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// WalletOptionSuccess
    /// </summary>
    [DataContract(Name = "WalletOptionSuccess")]
    public partial class WalletOptionSuccess : IEquatable<WalletOptionSuccess>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletOptionSuccess" /> class.
        /// </summary>
        /// <param name="optionBuyTradeLimit">買新規建玉可能額.</param>
        /// <param name="optionSellTradeLimit">売新規建玉可能額.</param>
        /// <param name="marginRequirement">必要証拠金額&lt;br&gt;※銘柄指定の場合のみ。&lt;br&gt;※銘柄が指定されなかった場合、空を返す。.</param>
        public WalletOptionSuccess(double optionBuyTradeLimit = default(double), double optionSellTradeLimit = default(double), double marginRequirement = default(double))
        {
            this.OptionBuyTradeLimit = optionBuyTradeLimit;
            this.OptionSellTradeLimit = optionSellTradeLimit;
            this.MarginRequirement = marginRequirement;
        }

        /// <summary>
        /// 買新規建玉可能額
        /// </summary>
        /// <value>買新規建玉可能額</value>
        [DataMember(Name = "OptionBuyTradeLimit", EmitDefaultValue = true)]
        public double OptionBuyTradeLimit { get; set; }

        /// <summary>
        /// 売新規建玉可能額
        /// </summary>
        /// <value>売新規建玉可能額</value>
        [DataMember(Name = "OptionSellTradeLimit", EmitDefaultValue = true)]
        public double OptionSellTradeLimit { get; set; }

        /// <summary>
        /// 必要証拠金額&lt;br&gt;※銘柄指定の場合のみ。&lt;br&gt;※銘柄が指定されなかった場合、空を返す。
        /// </summary>
        /// <value>必要証拠金額&lt;br&gt;※銘柄指定の場合のみ。&lt;br&gt;※銘柄が指定されなかった場合、空を返す。</value>
        [DataMember(Name = "MarginRequirement", EmitDefaultValue = true)]
        public double MarginRequirement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WalletOptionSuccess {\n");
            sb.Append("  OptionBuyTradeLimit: ").Append(OptionBuyTradeLimit).Append("\n");
            sb.Append("  OptionSellTradeLimit: ").Append(OptionSellTradeLimit).Append("\n");
            sb.Append("  MarginRequirement: ").Append(MarginRequirement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WalletOptionSuccess);
        }

        /// <summary>
        /// Returns true if WalletOptionSuccess instances are equal
        /// </summary>
        /// <param name="input">Instance of WalletOptionSuccess to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WalletOptionSuccess input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OptionBuyTradeLimit == input.OptionBuyTradeLimit ||
                    this.OptionBuyTradeLimit.Equals(input.OptionBuyTradeLimit)
                ) && 
                (
                    this.OptionSellTradeLimit == input.OptionSellTradeLimit ||
                    this.OptionSellTradeLimit.Equals(input.OptionSellTradeLimit)
                ) && 
                (
                    this.MarginRequirement == input.MarginRequirement ||
                    this.MarginRequirement.Equals(input.MarginRequirement)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.OptionBuyTradeLimit.GetHashCode();
                hashCode = hashCode * 59 + this.OptionSellTradeLimit.GetHashCode();
                hashCode = hashCode * 59 + this.MarginRequirement.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
