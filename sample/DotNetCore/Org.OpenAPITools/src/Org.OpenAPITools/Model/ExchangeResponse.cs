/*
 * kabuステーションAPI
 *
 * # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ExchangeResponse
    /// </summary>
    [DataContract(Name = "ExchangeResponse")]
    public partial class ExchangeResponse : IEquatable<ExchangeResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeResponse" /> class.
        /// </summary>
        /// <param name="symbol">通貨.</param>
        /// <param name="bidPrice">BID.</param>
        /// <param name="spread">SP.</param>
        /// <param name="askPrice">ASK.</param>
        /// <param name="change">前日比.</param>
        /// <param name="time">時刻 &lt;br&gt;※HH:mm:ss形式.</param>
        public ExchangeResponse(string symbol = default(string), double bidPrice = default(double), double spread = default(double), double askPrice = default(double), double change = default(double), string time = default(string))
        {
            this.Symbol = symbol;
            this.BidPrice = bidPrice;
            this.Spread = spread;
            this.AskPrice = askPrice;
            this.Change = change;
            this.Time = time;
        }

        /// <summary>
        /// 通貨
        /// </summary>
        /// <value>通貨</value>
        [DataMember(Name = "Symbol", EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// BID
        /// </summary>
        /// <value>BID</value>
        [DataMember(Name = "BidPrice", EmitDefaultValue = true)]
        public double BidPrice { get; set; }

        /// <summary>
        /// SP
        /// </summary>
        /// <value>SP</value>
        [DataMember(Name = "Spread", EmitDefaultValue = true)]
        public double Spread { get; set; }

        /// <summary>
        /// ASK
        /// </summary>
        /// <value>ASK</value>
        [DataMember(Name = "AskPrice", EmitDefaultValue = true)]
        public double AskPrice { get; set; }

        /// <summary>
        /// 前日比
        /// </summary>
        /// <value>前日比</value>
        [DataMember(Name = "Change", EmitDefaultValue = true)]
        public double Change { get; set; }

        /// <summary>
        /// 時刻 &lt;br&gt;※HH:mm:ss形式
        /// </summary>
        /// <value>時刻 &lt;br&gt;※HH:mm:ss形式</value>
        [DataMember(Name = "Time", EmitDefaultValue = true)]
        public string Time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExchangeResponse {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  BidPrice: ").Append(BidPrice).Append("\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("  AskPrice: ").Append(AskPrice).Append("\n");
            sb.Append("  Change: ").Append(Change).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExchangeResponse);
        }

        /// <summary>
        /// Returns true if ExchangeResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ExchangeResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExchangeResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.BidPrice == input.BidPrice ||
                    this.BidPrice.Equals(input.BidPrice)
                ) && 
                (
                    this.Spread == input.Spread ||
                    this.Spread.Equals(input.Spread)
                ) && 
                (
                    this.AskPrice == input.AskPrice ||
                    this.AskPrice.Equals(input.AskPrice)
                ) && 
                (
                    this.Change == input.Change ||
                    this.Change.Equals(input.Change)
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                hashCode = hashCode * 59 + this.BidPrice.GetHashCode();
                hashCode = hashCode * 59 + this.Spread.GetHashCode();
                hashCode = hashCode * 59 + this.AskPrice.GetHashCode();
                hashCode = hashCode * 59 + this.Change.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
