/*
 * kabuステーションAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ErrorResponse
    /// </summary>
    [DataContract(Name = "ErrorResponse")]
    public partial class ErrorResponse : IEquatable<ErrorResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorResponse" /> class.
        /// </summary>
        /// <param name="code">エラーコード.</param>
        /// <param name="message">エラーメッセージ |エラーコード|エラーメッセージ| |-|-| |4001001|内部エラー| |4001002|トリガキー生成エラー| |4001003|エラー：Uターン| |4001004|トリガ生成エラー| |4001005|パラメータ変換エラー| |4001006|API実行回数エラー| |4001007|ログイン認証エラー| |4001008|API利用不可| |4001009|APIキー不一致| |4001010|クエリ文字列不正| |4001011|リクエスト文字列不正| |4001012|リクエスト不正| |4001013|トークン取得失敗：kabuステーションがログインしている状態で、APIパスワードが不正| |4001014|許可されていないHTTPメソッド| |4001015|ContentLength超過| |4001016|サポートされていないメディアタイプ| |4001017|ログイン認証エラー：kabuSステーション未ログイン状態。| |4001018|銘柄が登録できませんでした| |4001019|一部の銘柄が登録できませんでした| |4001020|銘柄が解除できませんでした| |4001021|一部の銘柄が解除できませんでした| |4002001|銘柄が見つからない| |4002002|執行条件エラー| |4002003|執行条件エラー| |4002004|トリガチェックエラー - 詳細はkabuSログファイルを確認してください| |4002005|商品エラー| |4002006|レジスト数エラー| |4002007|パラメータ不正：AccountType - 詳細はkabuSログファイルを確認してください| |4002008|パラメータ不正：Side - 詳細はkabuSログファイルを確認してください| |4002009|パラメータ不正：CashMargin - 詳細はkabuSログファイルを確認してください| |4002010|パラメータ不正：DelivType - 詳細はkabuSログファイルを確認してください| |4002011|パラメータ不正：FundType - 詳細はkabuSログファイルを確認してください| |4002012|パラメータ不正：FrontOrderType - 詳細はkabuSログファイルを確認してください| |4002013|パラメータ不正：MarginTradeType - 詳細はkabuSログファイルを確認してください| |4002014|パラメータ不正：TimeInForce - 詳細はkabuSログファイルを確認してください| |4002015|パラメータ不正：返済順指定と返済指定は同時に設定できない| |4002016|パラメータ不正：DelivType - 詳細はkabuSログファイルを確認してください| |4002017|パラメータ不正：値段指定エラー| |4002018|パラメータ不正：IOC対象銘柄ではない - 詳細はkabuSログファイルを確認してください| |4003001|ワンショット：金額エラー| |4003002|ワンショット：数量エラー| |4004001|該当注文なしエラー| |4004002|取消不可|.</param>
        public ErrorResponse(int code = default(int), string message = default(string))
        {
            this.Code = code;
            this.Message = message;
        }

        /// <summary>
        /// エラーコード
        /// </summary>
        /// <value>エラーコード</value>
        [DataMember(Name = "Code", EmitDefaultValue = true)]
        public int Code { get; set; }

        /// <summary>
        /// エラーメッセージ |エラーコード|エラーメッセージ| |-|-| |4001001|内部エラー| |4001002|トリガキー生成エラー| |4001003|エラー：Uターン| |4001004|トリガ生成エラー| |4001005|パラメータ変換エラー| |4001006|API実行回数エラー| |4001007|ログイン認証エラー| |4001008|API利用不可| |4001009|APIキー不一致| |4001010|クエリ文字列不正| |4001011|リクエスト文字列不正| |4001012|リクエスト不正| |4001013|トークン取得失敗：kabuステーションがログインしている状態で、APIパスワードが不正| |4001014|許可されていないHTTPメソッド| |4001015|ContentLength超過| |4001016|サポートされていないメディアタイプ| |4001017|ログイン認証エラー：kabuSステーション未ログイン状態。| |4001018|銘柄が登録できませんでした| |4001019|一部の銘柄が登録できませんでした| |4001020|銘柄が解除できませんでした| |4001021|一部の銘柄が解除できませんでした| |4002001|銘柄が見つからない| |4002002|執行条件エラー| |4002003|執行条件エラー| |4002004|トリガチェックエラー - 詳細はkabuSログファイルを確認してください| |4002005|商品エラー| |4002006|レジスト数エラー| |4002007|パラメータ不正：AccountType - 詳細はkabuSログファイルを確認してください| |4002008|パラメータ不正：Side - 詳細はkabuSログファイルを確認してください| |4002009|パラメータ不正：CashMargin - 詳細はkabuSログファイルを確認してください| |4002010|パラメータ不正：DelivType - 詳細はkabuSログファイルを確認してください| |4002011|パラメータ不正：FundType - 詳細はkabuSログファイルを確認してください| |4002012|パラメータ不正：FrontOrderType - 詳細はkabuSログファイルを確認してください| |4002013|パラメータ不正：MarginTradeType - 詳細はkabuSログファイルを確認してください| |4002014|パラメータ不正：TimeInForce - 詳細はkabuSログファイルを確認してください| |4002015|パラメータ不正：返済順指定と返済指定は同時に設定できない| |4002016|パラメータ不正：DelivType - 詳細はkabuSログファイルを確認してください| |4002017|パラメータ不正：値段指定エラー| |4002018|パラメータ不正：IOC対象銘柄ではない - 詳細はkabuSログファイルを確認してください| |4003001|ワンショット：金額エラー| |4003002|ワンショット：数量エラー| |4004001|該当注文なしエラー| |4004002|取消不可|
        /// </summary>
        /// <value>エラーメッセージ |エラーコード|エラーメッセージ| |-|-| |4001001|内部エラー| |4001002|トリガキー生成エラー| |4001003|エラー：Uターン| |4001004|トリガ生成エラー| |4001005|パラメータ変換エラー| |4001006|API実行回数エラー| |4001007|ログイン認証エラー| |4001008|API利用不可| |4001009|APIキー不一致| |4001010|クエリ文字列不正| |4001011|リクエスト文字列不正| |4001012|リクエスト不正| |4001013|トークン取得失敗：kabuステーションがログインしている状態で、APIパスワードが不正| |4001014|許可されていないHTTPメソッド| |4001015|ContentLength超過| |4001016|サポートされていないメディアタイプ| |4001017|ログイン認証エラー：kabuSステーション未ログイン状態。| |4001018|銘柄が登録できませんでした| |4001019|一部の銘柄が登録できませんでした| |4001020|銘柄が解除できませんでした| |4001021|一部の銘柄が解除できませんでした| |4002001|銘柄が見つからない| |4002002|執行条件エラー| |4002003|執行条件エラー| |4002004|トリガチェックエラー - 詳細はkabuSログファイルを確認してください| |4002005|商品エラー| |4002006|レジスト数エラー| |4002007|パラメータ不正：AccountType - 詳細はkabuSログファイルを確認してください| |4002008|パラメータ不正：Side - 詳細はkabuSログファイルを確認してください| |4002009|パラメータ不正：CashMargin - 詳細はkabuSログファイルを確認してください| |4002010|パラメータ不正：DelivType - 詳細はkabuSログファイルを確認してください| |4002011|パラメータ不正：FundType - 詳細はkabuSログファイルを確認してください| |4002012|パラメータ不正：FrontOrderType - 詳細はkabuSログファイルを確認してください| |4002013|パラメータ不正：MarginTradeType - 詳細はkabuSログファイルを確認してください| |4002014|パラメータ不正：TimeInForce - 詳細はkabuSログファイルを確認してください| |4002015|パラメータ不正：返済順指定と返済指定は同時に設定できない| |4002016|パラメータ不正：DelivType - 詳細はkabuSログファイルを確認してください| |4002017|パラメータ不正：値段指定エラー| |4002018|パラメータ不正：IOC対象銘柄ではない - 詳細はkabuSログファイルを確認してください| |4003001|ワンショット：金額エラー| |4003002|ワンショット：数量エラー| |4004001|該当注文なしエラー| |4004002|取消不可|</value>
        [DataMember(Name = "Message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorResponse {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ErrorResponse);
        }

        /// <summary>
        /// Returns true if ErrorResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ErrorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    this.Code.Equals(input.Code)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
