/*
 * kabuステーションAPI
 *
 * # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RankingByCategoryResponseRanking
    /// </summary>
    [DataContract(Name = "RankingByCategoryResponse_Ranking")]
    public partial class RankingByCategoryResponseRanking : IEquatable<RankingByCategoryResponseRanking>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RankingByCategoryResponseRanking" /> class.
        /// </summary>
        /// <param name="no">順位&lt;br&gt;※ランキング内で同じ順位が返却される場合があります（10位が2件など）.</param>
        /// <param name="trend">トレンド &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;内容&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;0&lt;/td&gt;           &lt;td&gt;対象データ無し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;過去10営業日より20位以上上昇&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;過去10営業日より1～19位上昇&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;過去10営業日と変わらず&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;過去10営業日より1～19位下落&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;過去10営業日より20位以上下落&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;.</param>
        /// <param name="averageRanking">平均順位&lt;br&gt;※100位以下は「999」となります.</param>
        /// <param name="category">業種コード.</param>
        /// <param name="categoryName">業種名.</param>
        /// <param name="currentPrice">現在値.</param>
        /// <param name="changeRatio">前日比.</param>
        /// <param name="currentPriceTime">時刻&lt;br&gt;HH:mm&lt;br&gt;※日付は返しません.</param>
        /// <param name="changePercentage">騰落率（%）.</param>
        public RankingByCategoryResponseRanking(int no = default(int), string trend = default(string), double averageRanking = default(double), string category = default(string), string categoryName = default(string), double currentPrice = default(double), double changeRatio = default(double), string currentPriceTime = default(string), double changePercentage = default(double))
        {
            this.No = no;
            this.Trend = trend;
            this.AverageRanking = averageRanking;
            this.Category = category;
            this.CategoryName = categoryName;
            this.CurrentPrice = currentPrice;
            this.ChangeRatio = changeRatio;
            this.CurrentPriceTime = currentPriceTime;
            this.ChangePercentage = changePercentage;
        }

        /// <summary>
        /// 順位&lt;br&gt;※ランキング内で同じ順位が返却される場合があります（10位が2件など）
        /// </summary>
        /// <value>順位&lt;br&gt;※ランキング内で同じ順位が返却される場合があります（10位が2件など）</value>
        [DataMember(Name = "No", EmitDefaultValue = true)]
        public int No { get; set; }

        /// <summary>
        /// トレンド &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;内容&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;0&lt;/td&gt;           &lt;td&gt;対象データ無し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;過去10営業日より20位以上上昇&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;過去10営業日より1～19位上昇&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;過去10営業日と変わらず&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;過去10営業日より1～19位下落&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;過去10営業日より20位以上下落&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
        /// </summary>
        /// <value>トレンド &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;内容&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;0&lt;/td&gt;           &lt;td&gt;対象データ無し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;過去10営業日より20位以上上昇&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;過去10営業日より1～19位上昇&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;過去10営業日と変わらず&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;過去10営業日より1～19位下落&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;過去10営業日より20位以上下落&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;</value>
        [DataMember(Name = "Trend", EmitDefaultValue = true)]
        public string Trend { get; set; }

        /// <summary>
        /// 平均順位&lt;br&gt;※100位以下は「999」となります
        /// </summary>
        /// <value>平均順位&lt;br&gt;※100位以下は「999」となります</value>
        [DataMember(Name = "AverageRanking", EmitDefaultValue = true)]
        public double AverageRanking { get; set; }

        /// <summary>
        /// 業種コード
        /// </summary>
        /// <value>業種コード</value>
        [DataMember(Name = "Category", EmitDefaultValue = true)]
        public string Category { get; set; }

        /// <summary>
        /// 業種名
        /// </summary>
        /// <value>業種名</value>
        [DataMember(Name = "CategoryName", EmitDefaultValue = true)]
        public string CategoryName { get; set; }

        /// <summary>
        /// 現在値
        /// </summary>
        /// <value>現在値</value>
        [DataMember(Name = "CurrentPrice", EmitDefaultValue = true)]
        public double CurrentPrice { get; set; }

        /// <summary>
        /// 前日比
        /// </summary>
        /// <value>前日比</value>
        [DataMember(Name = "ChangeRatio", EmitDefaultValue = true)]
        public double ChangeRatio { get; set; }

        /// <summary>
        /// 時刻&lt;br&gt;HH:mm&lt;br&gt;※日付は返しません
        /// </summary>
        /// <value>時刻&lt;br&gt;HH:mm&lt;br&gt;※日付は返しません</value>
        [DataMember(Name = "CurrentPriceTime", EmitDefaultValue = true)]
        public string CurrentPriceTime { get; set; }

        /// <summary>
        /// 騰落率（%）
        /// </summary>
        /// <value>騰落率（%）</value>
        [DataMember(Name = "ChangePercentage", EmitDefaultValue = true)]
        public double ChangePercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RankingByCategoryResponseRanking {\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  Trend: ").Append(Trend).Append("\n");
            sb.Append("  AverageRanking: ").Append(AverageRanking).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  CurrentPrice: ").Append(CurrentPrice).Append("\n");
            sb.Append("  ChangeRatio: ").Append(ChangeRatio).Append("\n");
            sb.Append("  CurrentPriceTime: ").Append(CurrentPriceTime).Append("\n");
            sb.Append("  ChangePercentage: ").Append(ChangePercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RankingByCategoryResponseRanking);
        }

        /// <summary>
        /// Returns true if RankingByCategoryResponseRanking instances are equal
        /// </summary>
        /// <param name="input">Instance of RankingByCategoryResponseRanking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RankingByCategoryResponseRanking input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.No == input.No ||
                    this.No.Equals(input.No)
                ) && 
                (
                    this.Trend == input.Trend ||
                    (this.Trend != null &&
                    this.Trend.Equals(input.Trend))
                ) && 
                (
                    this.AverageRanking == input.AverageRanking ||
                    this.AverageRanking.Equals(input.AverageRanking)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.CategoryName == input.CategoryName ||
                    (this.CategoryName != null &&
                    this.CategoryName.Equals(input.CategoryName))
                ) && 
                (
                    this.CurrentPrice == input.CurrentPrice ||
                    this.CurrentPrice.Equals(input.CurrentPrice)
                ) && 
                (
                    this.ChangeRatio == input.ChangeRatio ||
                    this.ChangeRatio.Equals(input.ChangeRatio)
                ) && 
                (
                    this.CurrentPriceTime == input.CurrentPriceTime ||
                    (this.CurrentPriceTime != null &&
                    this.CurrentPriceTime.Equals(input.CurrentPriceTime))
                ) && 
                (
                    this.ChangePercentage == input.ChangePercentage ||
                    this.ChangePercentage.Equals(input.ChangePercentage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.No.GetHashCode();
                if (this.Trend != null)
                    hashCode = hashCode * 59 + this.Trend.GetHashCode();
                hashCode = hashCode * 59 + this.AverageRanking.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.CategoryName != null)
                    hashCode = hashCode * 59 + this.CategoryName.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentPrice.GetHashCode();
                hashCode = hashCode * 59 + this.ChangeRatio.GetHashCode();
                if (this.CurrentPriceTime != null)
                    hashCode = hashCode * 59 + this.CurrentPriceTime.GetHashCode();
                hashCode = hashCode * 59 + this.ChangePercentage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
