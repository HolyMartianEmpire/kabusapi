/*
 * kabuステーションAPI
 *
 * # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RequestUnregister
    /// </summary>
    [DataContract(Name = "RequestUnregister")]
    public partial class RequestUnregister : IEquatable<RequestUnregister>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestUnregister" /> class.
        /// </summary>
        /// <param name="symbols">※為替銘柄を登録する場合、銘柄名は\&quot;通貨A\&quot; + \&quot;/\&quot; + \&quot;通貨B\&quot;、市場コードは\&quot;300\&quot;で指定してください。 例：&#39;Symbol&#39;: &#39;EUR/USD&#39;, \&quot;Exchange\&quot;: 300.</param>
        public RequestUnregister(List<RequestRegisterSymbols> symbols = default(List<RequestRegisterSymbols>))
        {
            this.Symbols = symbols;
        }

        /// <summary>
        /// ※為替銘柄を登録する場合、銘柄名は\&quot;通貨A\&quot; + \&quot;/\&quot; + \&quot;通貨B\&quot;、市場コードは\&quot;300\&quot;で指定してください。 例：&#39;Symbol&#39;: &#39;EUR/USD&#39;, \&quot;Exchange\&quot;: 300
        /// </summary>
        /// <value>※為替銘柄を登録する場合、銘柄名は\&quot;通貨A\&quot; + \&quot;/\&quot; + \&quot;通貨B\&quot;、市場コードは\&quot;300\&quot;で指定してください。 例：&#39;Symbol&#39;: &#39;EUR/USD&#39;, \&quot;Exchange\&quot;: 300</value>
        [DataMember(Name = "Symbols", EmitDefaultValue = true)]
        public List<RequestRegisterSymbols> Symbols { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestUnregister {\n");
            sb.Append("  Symbols: ").Append(Symbols).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestUnregister);
        }

        /// <summary>
        /// Returns true if RequestUnregister instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestUnregister to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestUnregister input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbols == input.Symbols ||
                    this.Symbols != null &&
                    input.Symbols != null &&
                    this.Symbols.SequenceEqual(input.Symbols)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbols != null)
                    hashCode = hashCode * 59 + this.Symbols.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
