/*
 * kabuステーションAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// 売気配数量1本目
    /// </summary>
    [DataContract(Name = "BoardSuccess_Sell1")]
    public partial class BoardSuccessSell1 : IEquatable<BoardSuccessSell1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoardSuccessSell1" /> class.
        /// </summary>
        /// <param name="time">時刻&lt;br&gt;※株式銘柄の場合のみ.</param>
        /// <param name="sign">気配フラグ&lt;br&gt;※株式・先物・オプション銘柄の場合のみ |定義値|説明| |-|-| |0000|事象なし| |0101|一般気配| |0102|特別気配| |0103|注意気配| |0107|寄前気配| |0108|停止前特別気配| |0109|引け後気配| |0116|寄前気配約定成立ポイントなし| |0117|寄前気配約定成立ポイントあり| |0118|連続約定気配| |0119|停止前の連続約定気配| |0120|買い上がり売り下がり中|.</param>
        /// <param name="price">値段&lt;br&gt;※株式・先物・オプション銘柄の場合のみ.</param>
        /// <param name="qty">数量&lt;br&gt;※株式・先物・オプション銘柄の場合のみ.</param>
        public BoardSuccessSell1(DateTime time = default(DateTime), string sign = default(string), double price = default(double), double qty = default(double))
        {
            this.Time = time;
            this.Sign = sign;
            this.Price = price;
            this.Qty = qty;
        }

        /// <summary>
        /// 時刻&lt;br&gt;※株式銘柄の場合のみ
        /// </summary>
        /// <value>時刻&lt;br&gt;※株式銘柄の場合のみ</value>
        [DataMember(Name = "Time", EmitDefaultValue = true)]
        public DateTime Time { get; set; }

        /// <summary>
        /// 気配フラグ&lt;br&gt;※株式・先物・オプション銘柄の場合のみ |定義値|説明| |-|-| |0000|事象なし| |0101|一般気配| |0102|特別気配| |0103|注意気配| |0107|寄前気配| |0108|停止前特別気配| |0109|引け後気配| |0116|寄前気配約定成立ポイントなし| |0117|寄前気配約定成立ポイントあり| |0118|連続約定気配| |0119|停止前の連続約定気配| |0120|買い上がり売り下がり中|
        /// </summary>
        /// <value>気配フラグ&lt;br&gt;※株式・先物・オプション銘柄の場合のみ |定義値|説明| |-|-| |0000|事象なし| |0101|一般気配| |0102|特別気配| |0103|注意気配| |0107|寄前気配| |0108|停止前特別気配| |0109|引け後気配| |0116|寄前気配約定成立ポイントなし| |0117|寄前気配約定成立ポイントあり| |0118|連続約定気配| |0119|停止前の連続約定気配| |0120|買い上がり売り下がり中|</value>
        [DataMember(Name = "Sign", EmitDefaultValue = true)]
        public string Sign { get; set; }

        /// <summary>
        /// 値段&lt;br&gt;※株式・先物・オプション銘柄の場合のみ
        /// </summary>
        /// <value>値段&lt;br&gt;※株式・先物・オプション銘柄の場合のみ</value>
        [DataMember(Name = "Price", EmitDefaultValue = true)]
        public double Price { get; set; }

        /// <summary>
        /// 数量&lt;br&gt;※株式・先物・オプション銘柄の場合のみ
        /// </summary>
        /// <value>数量&lt;br&gt;※株式・先物・オプション銘柄の場合のみ</value>
        [DataMember(Name = "Qty", EmitDefaultValue = true)]
        public double Qty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoardSuccessSell1 {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Sign: ").Append(Sign).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoardSuccessSell1);
        }

        /// <summary>
        /// Returns true if BoardSuccessSell1 instances are equal
        /// </summary>
        /// <param name="input">Instance of BoardSuccessSell1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoardSuccessSell1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Sign == input.Sign ||
                    (this.Sign != null &&
                    this.Sign.Equals(input.Sign))
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.Qty == input.Qty ||
                    this.Qty.Equals(input.Qty)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.Sign != null)
                    hashCode = hashCode * 59 + this.Sign.GetHashCode();
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                hashCode = hashCode * 59 + this.Qty.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
