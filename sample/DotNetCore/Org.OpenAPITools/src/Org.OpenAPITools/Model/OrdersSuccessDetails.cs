/*
 * kabuステーションAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrdersSuccessDetails
    /// </summary>
    [DataContract(Name = "OrdersSuccess_Details")]
    public partial class OrdersSuccessDetails : IEquatable<OrdersSuccessDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersSuccessDetails" /> class.
        /// </summary>
        /// <param name="seqNum">※注文明細レコードの生成順序です。&lt;br&gt;※通番であるとは限りませんが、大小による順序は保たれています。.</param>
        /// <param name="iD">注文詳細番号.</param>
        /// <param name="recType">明細種別 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;受付&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;繰越&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;期限切れ&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;発注&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;訂正&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;取消&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;7&lt;/td&gt;           &lt;td&gt;失効&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;8&lt;/td&gt;           &lt;td&gt;約定&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;.</param>
        /// <param name="exchangeID">取引所番号.</param>
        /// <param name="state">状態 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;待機（発注待機）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;処理中（発注送信中・訂正送信中・取消送信中）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;処理済（発注済・訂正済・取消済・全約定・期限切れ）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;エラー&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;削除済み&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;.</param>
        /// <param name="transactTime">処理時刻.</param>
        /// <param name="ordType">執行条件 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;ザラバ&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;寄り&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;引け&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;不成&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;対当指値&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;IOC&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;.</param>
        /// <param name="price">値段.</param>
        /// <param name="qty">数量.</param>
        /// <param name="executionID">約定番号.</param>
        /// <param name="executionDay">約定日時.</param>
        /// <param name="delivDay">受渡日.</param>
        /// <param name="commission">手数料&lt;br&gt;※注文詳細の明細種別が約定（RecType&#x3D;8)の場合に設定。.</param>
        /// <param name="commissionTax">手数料消費税&lt;br&gt;※明細種別は約定（RecType&#x3D;8）の場合にのみ表示されます。.</param>
        public OrdersSuccessDetails(int seqNum = default(int), string iD = default(string), int recType = default(int), string exchangeID = default(string), int state = default(int), string transactTime = default(string), int ordType = default(int), double price = default(double), double qty = default(double), string executionID = default(string), DateTime executionDay = default(DateTime), int delivDay = default(int), double commission = default(double), double commissionTax = default(double))
        {
            this.SeqNum = seqNum;
            this.ID = iD;
            this.RecType = recType;
            this.ExchangeID = exchangeID;
            this.State = state;
            this.TransactTime = transactTime;
            this.OrdType = ordType;
            this.Price = price;
            this.Qty = qty;
            this.ExecutionID = executionID;
            this.ExecutionDay = executionDay;
            this.DelivDay = delivDay;
            this.Commission = commission;
            this.CommissionTax = commissionTax;
        }

        /// <summary>
        /// ※注文明細レコードの生成順序です。&lt;br&gt;※通番であるとは限りませんが、大小による順序は保たれています。
        /// </summary>
        /// <value>※注文明細レコードの生成順序です。&lt;br&gt;※通番であるとは限りませんが、大小による順序は保たれています。</value>
        [DataMember(Name = "SeqNum", EmitDefaultValue = true)]
        public int SeqNum { get; set; }

        /// <summary>
        /// 注文詳細番号
        /// </summary>
        /// <value>注文詳細番号</value>
        [DataMember(Name = "ID", EmitDefaultValue = true)]
        public string ID { get; set; }

        /// <summary>
        /// 明細種別 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;受付&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;繰越&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;期限切れ&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;発注&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;訂正&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;取消&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;7&lt;/td&gt;           &lt;td&gt;失効&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;8&lt;/td&gt;           &lt;td&gt;約定&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
        /// </summary>
        /// <value>明細種別 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;受付&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;繰越&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;期限切れ&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;発注&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;訂正&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;取消&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;7&lt;/td&gt;           &lt;td&gt;失効&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;8&lt;/td&gt;           &lt;td&gt;約定&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;</value>
        [DataMember(Name = "RecType", EmitDefaultValue = true)]
        public int RecType { get; set; }

        /// <summary>
        /// 取引所番号
        /// </summary>
        /// <value>取引所番号</value>
        [DataMember(Name = "ExchangeID", EmitDefaultValue = true)]
        public string ExchangeID { get; set; }

        /// <summary>
        /// 状態 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;待機（発注待機）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;処理中（発注送信中・訂正送信中・取消送信中）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;処理済（発注済・訂正済・取消済・全約定・期限切れ）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;エラー&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;削除済み&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
        /// </summary>
        /// <value>状態 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;待機（発注待機）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;処理中（発注送信中・訂正送信中・取消送信中）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;処理済（発注済・訂正済・取消済・全約定・期限切れ）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;エラー&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;削除済み&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;</value>
        [DataMember(Name = "State", EmitDefaultValue = true)]
        public int State { get; set; }

        /// <summary>
        /// 処理時刻
        /// </summary>
        /// <value>処理時刻</value>
        [DataMember(Name = "TransactTime", EmitDefaultValue = true)]
        public string TransactTime { get; set; }

        /// <summary>
        /// 執行条件 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;ザラバ&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;寄り&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;引け&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;不成&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;対当指値&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;IOC&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
        /// </summary>
        /// <value>執行条件 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;ザラバ&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;寄り&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;引け&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;不成&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;対当指値&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;IOC&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;</value>
        [DataMember(Name = "OrdType", EmitDefaultValue = true)]
        public int OrdType { get; set; }

        /// <summary>
        /// 値段
        /// </summary>
        /// <value>値段</value>
        [DataMember(Name = "Price", EmitDefaultValue = true)]
        public double Price { get; set; }

        /// <summary>
        /// 数量
        /// </summary>
        /// <value>数量</value>
        [DataMember(Name = "Qty", EmitDefaultValue = true)]
        public double Qty { get; set; }

        /// <summary>
        /// 約定番号
        /// </summary>
        /// <value>約定番号</value>
        [DataMember(Name = "ExecutionID", EmitDefaultValue = true)]
        public string ExecutionID { get; set; }

        /// <summary>
        /// 約定日時
        /// </summary>
        /// <value>約定日時</value>
        [DataMember(Name = "ExecutionDay", EmitDefaultValue = true)]
        public DateTime ExecutionDay { get; set; }

        /// <summary>
        /// 受渡日
        /// </summary>
        /// <value>受渡日</value>
        [DataMember(Name = "DelivDay", EmitDefaultValue = true)]
        public int DelivDay { get; set; }

        /// <summary>
        /// 手数料&lt;br&gt;※注文詳細の明細種別が約定（RecType&#x3D;8)の場合に設定。
        /// </summary>
        /// <value>手数料&lt;br&gt;※注文詳細の明細種別が約定（RecType&#x3D;8)の場合に設定。</value>
        [DataMember(Name = "Commission", EmitDefaultValue = true)]
        public double Commission { get; set; }

        /// <summary>
        /// 手数料消費税&lt;br&gt;※明細種別は約定（RecType&#x3D;8）の場合にのみ表示されます。
        /// </summary>
        /// <value>手数料消費税&lt;br&gt;※明細種別は約定（RecType&#x3D;8）の場合にのみ表示されます。</value>
        [DataMember(Name = "CommissionTax", EmitDefaultValue = true)]
        public double CommissionTax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrdersSuccessDetails {\n");
            sb.Append("  SeqNum: ").Append(SeqNum).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  RecType: ").Append(RecType).Append("\n");
            sb.Append("  ExchangeID: ").Append(ExchangeID).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TransactTime: ").Append(TransactTime).Append("\n");
            sb.Append("  OrdType: ").Append(OrdType).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  ExecutionID: ").Append(ExecutionID).Append("\n");
            sb.Append("  ExecutionDay: ").Append(ExecutionDay).Append("\n");
            sb.Append("  DelivDay: ").Append(DelivDay).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("  CommissionTax: ").Append(CommissionTax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrdersSuccessDetails);
        }

        /// <summary>
        /// Returns true if OrdersSuccessDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of OrdersSuccessDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrdersSuccessDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SeqNum == input.SeqNum ||
                    this.SeqNum.Equals(input.SeqNum)
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.RecType == input.RecType ||
                    this.RecType.Equals(input.RecType)
                ) && 
                (
                    this.ExchangeID == input.ExchangeID ||
                    (this.ExchangeID != null &&
                    this.ExchangeID.Equals(input.ExchangeID))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.TransactTime == input.TransactTime ||
                    (this.TransactTime != null &&
                    this.TransactTime.Equals(input.TransactTime))
                ) && 
                (
                    this.OrdType == input.OrdType ||
                    this.OrdType.Equals(input.OrdType)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.Qty == input.Qty ||
                    this.Qty.Equals(input.Qty)
                ) && 
                (
                    this.ExecutionID == input.ExecutionID ||
                    (this.ExecutionID != null &&
                    this.ExecutionID.Equals(input.ExecutionID))
                ) && 
                (
                    this.ExecutionDay == input.ExecutionDay ||
                    (this.ExecutionDay != null &&
                    this.ExecutionDay.Equals(input.ExecutionDay))
                ) && 
                (
                    this.DelivDay == input.DelivDay ||
                    this.DelivDay.Equals(input.DelivDay)
                ) && 
                (
                    this.Commission == input.Commission ||
                    this.Commission.Equals(input.Commission)
                ) && 
                (
                    this.CommissionTax == input.CommissionTax ||
                    this.CommissionTax.Equals(input.CommissionTax)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.SeqNum.GetHashCode();
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                hashCode = hashCode * 59 + this.RecType.GetHashCode();
                if (this.ExchangeID != null)
                    hashCode = hashCode * 59 + this.ExchangeID.GetHashCode();
                hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.TransactTime != null)
                    hashCode = hashCode * 59 + this.TransactTime.GetHashCode();
                hashCode = hashCode * 59 + this.OrdType.GetHashCode();
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                hashCode = hashCode * 59 + this.Qty.GetHashCode();
                if (this.ExecutionID != null)
                    hashCode = hashCode * 59 + this.ExecutionID.GetHashCode();
                if (this.ExecutionDay != null)
                    hashCode = hashCode * 59 + this.ExecutionDay.GetHashCode();
                hashCode = hashCode * 59 + this.DelivDay.GetHashCode();
                hashCode = hashCode * 59 + this.Commission.GetHashCode();
                hashCode = hashCode * 59 + this.CommissionTax.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
