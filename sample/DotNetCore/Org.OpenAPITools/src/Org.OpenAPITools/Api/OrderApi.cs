/*
 * kabuステーションAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 注文取消
        /// </summary>
        /// <remarks>
        /// 注文を取消します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <returns>OrderSuccess</returns>
        OrderSuccess CancelorderPut(string X_API_KEY, RequestCancelOrder req);

        /// <summary>
        /// 注文取消
        /// </summary>
        /// <remarks>
        /// 注文を取消します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <returns>ApiResponse of OrderSuccess</returns>
        ApiResponse<OrderSuccess> CancelorderPutWithHttpInfo(string X_API_KEY, RequestCancelOrder req);
        /// <summary>
        /// 注文発注（先物）
        /// </summary>
        /// <remarks>
        /// 先物銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <returns>OrderSuccess</returns>
        OrderSuccess SendorderFuturePost(string X_API_KEY, RequestSendOrderDeriv req);

        /// <summary>
        /// 注文発注（先物）
        /// </summary>
        /// <remarks>
        /// 先物銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <returns>ApiResponse of OrderSuccess</returns>
        ApiResponse<OrderSuccess> SendorderFuturePostWithHttpInfo(string X_API_KEY, RequestSendOrderDeriv req);
        /// <summary>
        /// 注文発注（オプション）
        /// </summary>
        /// <remarks>
        /// オプション銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <returns>OrderSuccess</returns>
        OrderSuccess SendorderOptionPost(string X_API_KEY, RequestSendOrderDeriv req);

        /// <summary>
        /// 注文発注（オプション）
        /// </summary>
        /// <remarks>
        /// オプション銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <returns>ApiResponse of OrderSuccess</returns>
        ApiResponse<OrderSuccess> SendorderOptionPostWithHttpInfo(string X_API_KEY, RequestSendOrderDeriv req);
        /// <summary>
        /// 注文発注（現物・信用）
        /// </summary>
        /// <remarks>
        /// 注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <returns>OrderSuccess</returns>
        OrderSuccess SendorderPost(string X_API_KEY, RequestSendOrder req);

        /// <summary>
        /// 注文発注（現物・信用）
        /// </summary>
        /// <remarks>
        /// 注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <returns>ApiResponse of OrderSuccess</returns>
        ApiResponse<OrderSuccess> SendorderPostWithHttpInfo(string X_API_KEY, RequestSendOrder req);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 注文取消
        /// </summary>
        /// <remarks>
        /// 注文を取消します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderSuccess</returns>
        System.Threading.Tasks.Task<OrderSuccess> CancelorderPutAsync(string X_API_KEY, RequestCancelOrder req, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 注文取消
        /// </summary>
        /// <remarks>
        /// 注文を取消します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderSuccess>> CancelorderPutWithHttpInfoAsync(string X_API_KEY, RequestCancelOrder req, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 注文発注（先物）
        /// </summary>
        /// <remarks>
        /// 先物銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderSuccess</returns>
        System.Threading.Tasks.Task<OrderSuccess> SendorderFuturePostAsync(string X_API_KEY, RequestSendOrderDeriv req, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 注文発注（先物）
        /// </summary>
        /// <remarks>
        /// 先物銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderSuccess>> SendorderFuturePostWithHttpInfoAsync(string X_API_KEY, RequestSendOrderDeriv req, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 注文発注（オプション）
        /// </summary>
        /// <remarks>
        /// オプション銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderSuccess</returns>
        System.Threading.Tasks.Task<OrderSuccess> SendorderOptionPostAsync(string X_API_KEY, RequestSendOrderDeriv req, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 注文発注（オプション）
        /// </summary>
        /// <remarks>
        /// オプション銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderSuccess>> SendorderOptionPostWithHttpInfoAsync(string X_API_KEY, RequestSendOrderDeriv req, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 注文発注（現物・信用）
        /// </summary>
        /// <remarks>
        /// 注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderSuccess</returns>
        System.Threading.Tasks.Task<OrderSuccess> SendorderPostAsync(string X_API_KEY, RequestSendOrder req, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 注文発注（現物・信用）
        /// </summary>
        /// <remarks>
        /// 注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderSuccess>> SendorderPostWithHttpInfoAsync(string X_API_KEY, RequestSendOrder req, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApi : IOrderApiSync, IOrderApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderApi : IOrderApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrderApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 注文取消 注文を取消します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <returns>OrderSuccess</returns>
        public OrderSuccess CancelorderPut(string X_API_KEY, RequestCancelOrder req)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderSuccess> localVarResponse = CancelorderPutWithHttpInfo(X_API_KEY, req);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 注文取消 注文を取消します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <returns>ApiResponse of OrderSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderSuccess> CancelorderPutWithHttpInfo(string X_API_KEY, RequestCancelOrder req)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling OrderApi->CancelorderPut");

            // verify the required parameter 'req' is set
            if (req == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'req' when calling OrderApi->CancelorderPut");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter
            localVarRequestOptions.Data = req;


            // make the HTTP request
            var localVarResponse = this.Client.Put<OrderSuccess>("/cancelorder", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelorderPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 注文取消 注文を取消します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderSuccess</returns>
        public async System.Threading.Tasks.Task<OrderSuccess> CancelorderPutAsync(string X_API_KEY, RequestCancelOrder req, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderSuccess> localVarResponse = await CancelorderPutWithHttpInfoAsync(X_API_KEY, req, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 注文取消 注文を取消します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderSuccess>> CancelorderPutWithHttpInfoAsync(string X_API_KEY, RequestCancelOrder req, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling OrderApi->CancelorderPut");

            // verify the required parameter 'req' is set
            if (req == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'req' when calling OrderApi->CancelorderPut");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter
            localVarRequestOptions.Data = req;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<OrderSuccess>("/cancelorder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelorderPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 注文発注（先物） 先物銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <returns>OrderSuccess</returns>
        public OrderSuccess SendorderFuturePost(string X_API_KEY, RequestSendOrderDeriv req)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderSuccess> localVarResponse = SendorderFuturePostWithHttpInfo(X_API_KEY, req);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 注文発注（先物） 先物銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <returns>ApiResponse of OrderSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderSuccess> SendorderFuturePostWithHttpInfo(string X_API_KEY, RequestSendOrderDeriv req)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling OrderApi->SendorderFuturePost");

            // verify the required parameter 'req' is set
            if (req == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'req' when calling OrderApi->SendorderFuturePost");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter
            localVarRequestOptions.Data = req;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderSuccess>("/sendorder/future", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendorderFuturePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 注文発注（先物） 先物銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderSuccess</returns>
        public async System.Threading.Tasks.Task<OrderSuccess> SendorderFuturePostAsync(string X_API_KEY, RequestSendOrderDeriv req, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderSuccess> localVarResponse = await SendorderFuturePostWithHttpInfoAsync(X_API_KEY, req, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 注文発注（先物） 先物銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderSuccess>> SendorderFuturePostWithHttpInfoAsync(string X_API_KEY, RequestSendOrderDeriv req, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling OrderApi->SendorderFuturePost");

            // verify the required parameter 'req' is set
            if (req == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'req' when calling OrderApi->SendorderFuturePost");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter
            localVarRequestOptions.Data = req;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderSuccess>("/sendorder/future", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendorderFuturePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 注文発注（オプション） オプション銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <returns>OrderSuccess</returns>
        public OrderSuccess SendorderOptionPost(string X_API_KEY, RequestSendOrderDeriv req)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderSuccess> localVarResponse = SendorderOptionPostWithHttpInfo(X_API_KEY, req);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 注文発注（オプション） オプション銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <returns>ApiResponse of OrderSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderSuccess> SendorderOptionPostWithHttpInfo(string X_API_KEY, RequestSendOrderDeriv req)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling OrderApi->SendorderOptionPost");

            // verify the required parameter 'req' is set
            if (req == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'req' when calling OrderApi->SendorderOptionPost");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter
            localVarRequestOptions.Data = req;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderSuccess>("/sendorder/option", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendorderOptionPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 注文発注（オプション） オプション銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderSuccess</returns>
        public async System.Threading.Tasks.Task<OrderSuccess> SendorderOptionPostAsync(string X_API_KEY, RequestSendOrderDeriv req, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderSuccess> localVarResponse = await SendorderOptionPostWithHttpInfoAsync(X_API_KEY, req, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 注文発注（オプション） オプション銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderSuccess>> SendorderOptionPostWithHttpInfoAsync(string X_API_KEY, RequestSendOrderDeriv req, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling OrderApi->SendorderOptionPost");

            // verify the required parameter 'req' is set
            if (req == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'req' when calling OrderApi->SendorderOptionPost");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter
            localVarRequestOptions.Data = req;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderSuccess>("/sendorder/option", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendorderOptionPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 注文発注（現物・信用） 注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <returns>OrderSuccess</returns>
        public OrderSuccess SendorderPost(string X_API_KEY, RequestSendOrder req)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderSuccess> localVarResponse = SendorderPostWithHttpInfo(X_API_KEY, req);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 注文発注（現物・信用） 注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <returns>ApiResponse of OrderSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderSuccess> SendorderPostWithHttpInfo(string X_API_KEY, RequestSendOrder req)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling OrderApi->SendorderPost");

            // verify the required parameter 'req' is set
            if (req == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'req' when calling OrderApi->SendorderPost");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter
            localVarRequestOptions.Data = req;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderSuccess>("/sendorder", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendorderPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 注文発注（現物・信用） 注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderSuccess</returns>
        public async System.Threading.Tasks.Task<OrderSuccess> SendorderPostAsync(string X_API_KEY, RequestSendOrder req, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderSuccess> localVarResponse = await SendorderPostWithHttpInfoAsync(X_API_KEY, req, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 注文発注（現物・信用） 注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="req"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderSuccess>> SendorderPostWithHttpInfoAsync(string X_API_KEY, RequestSendOrder req, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling OrderApi->SendorderPost");

            // verify the required parameter 'req' is set
            if (req == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'req' when calling OrderApi->SendorderPost");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter
            localVarRequestOptions.Data = req;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderSuccess>("/sendorder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendorderPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
