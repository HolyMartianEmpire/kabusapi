/*
 * kabuステーションAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 取引余力（現物）
        /// </summary>
        /// <remarks>
        /// 口座の取引余力（現物）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>WalletCashSuccess</returns>
        WalletCashSuccess WalletCashGet(string X_API_KEY);

        /// <summary>
        /// 取引余力（現物）
        /// </summary>
        /// <remarks>
        /// 口座の取引余力（現物）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>ApiResponse of WalletCashSuccess</returns>
        ApiResponse<WalletCashSuccess> WalletCashGetWithHttpInfo(string X_API_KEY);
        /// <summary>
        /// 取引余力（現物）（銘柄指定）
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の取引余力（現物）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証| |5|福証| |6|札証|</param>
        /// <returns>WalletCashSuccess</returns>
        WalletCashSuccess WalletCashSymbolexchangeGet(string X_API_KEY, string symbol, string exchange);

        /// <summary>
        /// 取引余力（現物）（銘柄指定）
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の取引余力（現物）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証| |5|福証| |6|札証|</param>
        /// <returns>ApiResponse of WalletCashSuccess</returns>
        ApiResponse<WalletCashSuccess> WalletCashSymbolexchangeGetWithHttpInfo(string X_API_KEY, string symbol, string exchange);
        /// <summary>
        /// 取引余力（先物）
        /// </summary>
        /// <remarks>
        /// 口座の取引余力（先物）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>WalletFutureSuccess</returns>
        WalletFutureSuccess WalletFutureGet(string X_API_KEY);

        /// <summary>
        /// 取引余力（先物）
        /// </summary>
        /// <remarks>
        /// 口座の取引余力（先物）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>ApiResponse of WalletFutureSuccess</returns>
        ApiResponse<WalletFutureSuccess> WalletFutureGetWithHttpInfo(string X_API_KEY);
        /// <summary>
        /// 取引余力（先物）（銘柄指定）
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の取引余力（先物）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |2|日通し| |23|日中| |24|夜間|</param>
        /// <returns>WalletFutureSuccess</returns>
        WalletFutureSuccess WalletFutureSymbolexchangeGet(string X_API_KEY, string symbol, string exchange);

        /// <summary>
        /// 取引余力（先物）（銘柄指定）
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の取引余力（先物）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |2|日通し| |23|日中| |24|夜間|</param>
        /// <returns>ApiResponse of WalletFutureSuccess</returns>
        ApiResponse<WalletFutureSuccess> WalletFutureSymbolexchangeGetWithHttpInfo(string X_API_KEY, string symbol, string exchange);
        /// <summary>
        /// 取引余力（信用）
        /// </summary>
        /// <remarks>
        /// 口座の取引余力（信用）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>WalletMarginSuccess</returns>
        WalletMarginSuccess WalletMarginGet(string X_API_KEY);

        /// <summary>
        /// 取引余力（信用）
        /// </summary>
        /// <remarks>
        /// 口座の取引余力（信用）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>ApiResponse of WalletMarginSuccess</returns>
        ApiResponse<WalletMarginSuccess> WalletMarginGetWithHttpInfo(string X_API_KEY);
        /// <summary>
        /// 取引余力（信用）（銘柄指定）
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の取引余力（信用）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証|</param>
        /// <returns>WalletMarginSuccess</returns>
        WalletMarginSuccess WalletMarginSymbolexchangeGet(string X_API_KEY, string symbol, string exchange);

        /// <summary>
        /// 取引余力（信用）（銘柄指定）
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の取引余力（信用）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証|</param>
        /// <returns>ApiResponse of WalletMarginSuccess</returns>
        ApiResponse<WalletMarginSuccess> WalletMarginSymbolexchangeGetWithHttpInfo(string X_API_KEY, string symbol, string exchange);
        /// <summary>
        /// 取引余力（オプション）
        /// </summary>
        /// <remarks>
        /// 口座の取引余力（オプション）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>WalletOptionSuccess</returns>
        WalletOptionSuccess WalletOptionGet(string X_API_KEY);

        /// <summary>
        /// 取引余力（オプション）
        /// </summary>
        /// <remarks>
        /// 口座の取引余力（オプション）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>ApiResponse of WalletOptionSuccess</returns>
        ApiResponse<WalletOptionSuccess> WalletOptionGetWithHttpInfo(string X_API_KEY);
        /// <summary>
        /// 取引余力（オプション）（銘柄指定）
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の取引余力（オプション）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |2|日通し| |23|日中| |24|夜間|</param>
        /// <returns>WalletOptionSuccess</returns>
        WalletOptionSuccess WalletOptionSymbolexchangeGet(string X_API_KEY, string symbol, string exchange);

        /// <summary>
        /// 取引余力（オプション）（銘柄指定）
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の取引余力（オプション）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |2|日通し| |23|日中| |24|夜間|</param>
        /// <returns>ApiResponse of WalletOptionSuccess</returns>
        ApiResponse<WalletOptionSuccess> WalletOptionSymbolexchangeGetWithHttpInfo(string X_API_KEY, string symbol, string exchange);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 取引余力（現物）
        /// </summary>
        /// <remarks>
        /// 口座の取引余力（現物）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletCashSuccess</returns>
        System.Threading.Tasks.Task<WalletCashSuccess> WalletCashGetAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 取引余力（現物）
        /// </summary>
        /// <remarks>
        /// 口座の取引余力（現物）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletCashSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletCashSuccess>> WalletCashGetWithHttpInfoAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 取引余力（現物）（銘柄指定）
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の取引余力（現物）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証| |5|福証| |6|札証|</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletCashSuccess</returns>
        System.Threading.Tasks.Task<WalletCashSuccess> WalletCashSymbolexchangeGetAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 取引余力（現物）（銘柄指定）
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の取引余力（現物）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証| |5|福証| |6|札証|</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletCashSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletCashSuccess>> WalletCashSymbolexchangeGetWithHttpInfoAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 取引余力（先物）
        /// </summary>
        /// <remarks>
        /// 口座の取引余力（先物）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletFutureSuccess</returns>
        System.Threading.Tasks.Task<WalletFutureSuccess> WalletFutureGetAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 取引余力（先物）
        /// </summary>
        /// <remarks>
        /// 口座の取引余力（先物）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletFutureSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletFutureSuccess>> WalletFutureGetWithHttpInfoAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 取引余力（先物）（銘柄指定）
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の取引余力（先物）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |2|日通し| |23|日中| |24|夜間|</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletFutureSuccess</returns>
        System.Threading.Tasks.Task<WalletFutureSuccess> WalletFutureSymbolexchangeGetAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 取引余力（先物）（銘柄指定）
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の取引余力（先物）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |2|日通し| |23|日中| |24|夜間|</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletFutureSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletFutureSuccess>> WalletFutureSymbolexchangeGetWithHttpInfoAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 取引余力（信用）
        /// </summary>
        /// <remarks>
        /// 口座の取引余力（信用）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletMarginSuccess</returns>
        System.Threading.Tasks.Task<WalletMarginSuccess> WalletMarginGetAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 取引余力（信用）
        /// </summary>
        /// <remarks>
        /// 口座の取引余力（信用）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletMarginSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletMarginSuccess>> WalletMarginGetWithHttpInfoAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 取引余力（信用）（銘柄指定）
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の取引余力（信用）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証|</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletMarginSuccess</returns>
        System.Threading.Tasks.Task<WalletMarginSuccess> WalletMarginSymbolexchangeGetAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 取引余力（信用）（銘柄指定）
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の取引余力（信用）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証|</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletMarginSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletMarginSuccess>> WalletMarginSymbolexchangeGetWithHttpInfoAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 取引余力（オプション）
        /// </summary>
        /// <remarks>
        /// 口座の取引余力（オプション）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletOptionSuccess</returns>
        System.Threading.Tasks.Task<WalletOptionSuccess> WalletOptionGetAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 取引余力（オプション）
        /// </summary>
        /// <remarks>
        /// 口座の取引余力（オプション）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletOptionSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletOptionSuccess>> WalletOptionGetWithHttpInfoAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 取引余力（オプション）（銘柄指定）
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の取引余力（オプション）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |2|日通し| |23|日中| |24|夜間|</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletOptionSuccess</returns>
        System.Threading.Tasks.Task<WalletOptionSuccess> WalletOptionSymbolexchangeGetAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 取引余力（オプション）（銘柄指定）
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の取引余力（オプション）を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |2|日通し| |23|日中| |24|夜間|</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletOptionSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletOptionSuccess>> WalletOptionSymbolexchangeGetWithHttpInfoAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApi : IWalletApiSync, IWalletApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WalletApi : IWalletApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WalletApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WalletApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 取引余力（現物） 口座の取引余力（現物）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>WalletCashSuccess</returns>
        public WalletCashSuccess WalletCashGet(string X_API_KEY)
        {
            Org.OpenAPITools.Client.ApiResponse<WalletCashSuccess> localVarResponse = WalletCashGetWithHttpInfo(X_API_KEY);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引余力（現物） 口座の取引余力（現物）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>ApiResponse of WalletCashSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<WalletCashSuccess> WalletCashGetWithHttpInfo(string X_API_KEY)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling WalletApi->WalletCashGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<WalletCashSuccess>("/wallet/cash", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletCashGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引余力（現物） 口座の取引余力（現物）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletCashSuccess</returns>
        public async System.Threading.Tasks.Task<WalletCashSuccess> WalletCashGetAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<WalletCashSuccess> localVarResponse = await WalletCashGetWithHttpInfoAsync(X_API_KEY, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引余力（現物） 口座の取引余力（現物）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletCashSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<WalletCashSuccess>> WalletCashGetWithHttpInfoAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling WalletApi->WalletCashGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WalletCashSuccess>("/wallet/cash", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletCashGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引余力（現物）（銘柄指定） 指定した銘柄の取引余力（現物）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証| |5|福証| |6|札証|</param>
        /// <returns>WalletCashSuccess</returns>
        public WalletCashSuccess WalletCashSymbolexchangeGet(string X_API_KEY, string symbol, string exchange)
        {
            Org.OpenAPITools.Client.ApiResponse<WalletCashSuccess> localVarResponse = WalletCashSymbolexchangeGetWithHttpInfo(X_API_KEY, symbol, exchange);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引余力（現物）（銘柄指定） 指定した銘柄の取引余力（現物）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証| |5|福証| |6|札証|</param>
        /// <returns>ApiResponse of WalletCashSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<WalletCashSuccess> WalletCashSymbolexchangeGetWithHttpInfo(string X_API_KEY, string symbol, string exchange)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling WalletApi->WalletCashSymbolexchangeGet");

            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'symbol' when calling WalletApi->WalletCashSymbolexchangeGet");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'exchange' when calling WalletApi->WalletCashSymbolexchangeGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("symbol", Org.OpenAPITools.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("exchange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<WalletCashSuccess>("/wallet/cash/{symbol}@{exchange}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletCashSymbolexchangeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引余力（現物）（銘柄指定） 指定した銘柄の取引余力（現物）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証| |5|福証| |6|札証|</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletCashSuccess</returns>
        public async System.Threading.Tasks.Task<WalletCashSuccess> WalletCashSymbolexchangeGetAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<WalletCashSuccess> localVarResponse = await WalletCashSymbolexchangeGetWithHttpInfoAsync(X_API_KEY, symbol, exchange, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引余力（現物）（銘柄指定） 指定した銘柄の取引余力（現物）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証| |5|福証| |6|札証|</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletCashSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<WalletCashSuccess>> WalletCashSymbolexchangeGetWithHttpInfoAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling WalletApi->WalletCashSymbolexchangeGet");

            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'symbol' when calling WalletApi->WalletCashSymbolexchangeGet");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'exchange' when calling WalletApi->WalletCashSymbolexchangeGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("symbol", Org.OpenAPITools.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("exchange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WalletCashSuccess>("/wallet/cash/{symbol}@{exchange}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletCashSymbolexchangeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引余力（先物） 口座の取引余力（先物）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>WalletFutureSuccess</returns>
        public WalletFutureSuccess WalletFutureGet(string X_API_KEY)
        {
            Org.OpenAPITools.Client.ApiResponse<WalletFutureSuccess> localVarResponse = WalletFutureGetWithHttpInfo(X_API_KEY);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引余力（先物） 口座の取引余力（先物）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>ApiResponse of WalletFutureSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<WalletFutureSuccess> WalletFutureGetWithHttpInfo(string X_API_KEY)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling WalletApi->WalletFutureGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<WalletFutureSuccess>("/wallet/future", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletFutureGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引余力（先物） 口座の取引余力（先物）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletFutureSuccess</returns>
        public async System.Threading.Tasks.Task<WalletFutureSuccess> WalletFutureGetAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<WalletFutureSuccess> localVarResponse = await WalletFutureGetWithHttpInfoAsync(X_API_KEY, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引余力（先物） 口座の取引余力（先物）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletFutureSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<WalletFutureSuccess>> WalletFutureGetWithHttpInfoAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling WalletApi->WalletFutureGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WalletFutureSuccess>("/wallet/future", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletFutureGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引余力（先物）（銘柄指定） 指定した銘柄の取引余力（先物）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |2|日通し| |23|日中| |24|夜間|</param>
        /// <returns>WalletFutureSuccess</returns>
        public WalletFutureSuccess WalletFutureSymbolexchangeGet(string X_API_KEY, string symbol, string exchange)
        {
            Org.OpenAPITools.Client.ApiResponse<WalletFutureSuccess> localVarResponse = WalletFutureSymbolexchangeGetWithHttpInfo(X_API_KEY, symbol, exchange);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引余力（先物）（銘柄指定） 指定した銘柄の取引余力（先物）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |2|日通し| |23|日中| |24|夜間|</param>
        /// <returns>ApiResponse of WalletFutureSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<WalletFutureSuccess> WalletFutureSymbolexchangeGetWithHttpInfo(string X_API_KEY, string symbol, string exchange)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling WalletApi->WalletFutureSymbolexchangeGet");

            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'symbol' when calling WalletApi->WalletFutureSymbolexchangeGet");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'exchange' when calling WalletApi->WalletFutureSymbolexchangeGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("symbol", Org.OpenAPITools.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("exchange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<WalletFutureSuccess>("/wallet/future/{symbol}@{exchange}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletFutureSymbolexchangeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引余力（先物）（銘柄指定） 指定した銘柄の取引余力（先物）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |2|日通し| |23|日中| |24|夜間|</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletFutureSuccess</returns>
        public async System.Threading.Tasks.Task<WalletFutureSuccess> WalletFutureSymbolexchangeGetAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<WalletFutureSuccess> localVarResponse = await WalletFutureSymbolexchangeGetWithHttpInfoAsync(X_API_KEY, symbol, exchange, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引余力（先物）（銘柄指定） 指定した銘柄の取引余力（先物）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |2|日通し| |23|日中| |24|夜間|</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletFutureSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<WalletFutureSuccess>> WalletFutureSymbolexchangeGetWithHttpInfoAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling WalletApi->WalletFutureSymbolexchangeGet");

            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'symbol' when calling WalletApi->WalletFutureSymbolexchangeGet");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'exchange' when calling WalletApi->WalletFutureSymbolexchangeGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("symbol", Org.OpenAPITools.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("exchange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WalletFutureSuccess>("/wallet/future/{symbol}@{exchange}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletFutureSymbolexchangeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引余力（信用） 口座の取引余力（信用）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>WalletMarginSuccess</returns>
        public WalletMarginSuccess WalletMarginGet(string X_API_KEY)
        {
            Org.OpenAPITools.Client.ApiResponse<WalletMarginSuccess> localVarResponse = WalletMarginGetWithHttpInfo(X_API_KEY);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引余力（信用） 口座の取引余力（信用）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>ApiResponse of WalletMarginSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<WalletMarginSuccess> WalletMarginGetWithHttpInfo(string X_API_KEY)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling WalletApi->WalletMarginGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<WalletMarginSuccess>("/wallet/margin", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletMarginGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引余力（信用） 口座の取引余力（信用）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletMarginSuccess</returns>
        public async System.Threading.Tasks.Task<WalletMarginSuccess> WalletMarginGetAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<WalletMarginSuccess> localVarResponse = await WalletMarginGetWithHttpInfoAsync(X_API_KEY, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引余力（信用） 口座の取引余力（信用）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletMarginSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<WalletMarginSuccess>> WalletMarginGetWithHttpInfoAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling WalletApi->WalletMarginGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WalletMarginSuccess>("/wallet/margin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletMarginGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引余力（信用）（銘柄指定） 指定した銘柄の取引余力（信用）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証|</param>
        /// <returns>WalletMarginSuccess</returns>
        public WalletMarginSuccess WalletMarginSymbolexchangeGet(string X_API_KEY, string symbol, string exchange)
        {
            Org.OpenAPITools.Client.ApiResponse<WalletMarginSuccess> localVarResponse = WalletMarginSymbolexchangeGetWithHttpInfo(X_API_KEY, symbol, exchange);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引余力（信用）（銘柄指定） 指定した銘柄の取引余力（信用）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証|</param>
        /// <returns>ApiResponse of WalletMarginSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<WalletMarginSuccess> WalletMarginSymbolexchangeGetWithHttpInfo(string X_API_KEY, string symbol, string exchange)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling WalletApi->WalletMarginSymbolexchangeGet");

            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'symbol' when calling WalletApi->WalletMarginSymbolexchangeGet");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'exchange' when calling WalletApi->WalletMarginSymbolexchangeGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("symbol", Org.OpenAPITools.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("exchange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<WalletMarginSuccess>("/wallet/margin/{symbol}@{exchange}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletMarginSymbolexchangeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引余力（信用）（銘柄指定） 指定した銘柄の取引余力（信用）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証|</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletMarginSuccess</returns>
        public async System.Threading.Tasks.Task<WalletMarginSuccess> WalletMarginSymbolexchangeGetAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<WalletMarginSuccess> localVarResponse = await WalletMarginSymbolexchangeGetWithHttpInfoAsync(X_API_KEY, symbol, exchange, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引余力（信用）（銘柄指定） 指定した銘柄の取引余力（信用）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |1|東証| |3|名証|</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletMarginSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<WalletMarginSuccess>> WalletMarginSymbolexchangeGetWithHttpInfoAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling WalletApi->WalletMarginSymbolexchangeGet");

            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'symbol' when calling WalletApi->WalletMarginSymbolexchangeGet");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'exchange' when calling WalletApi->WalletMarginSymbolexchangeGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("symbol", Org.OpenAPITools.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("exchange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WalletMarginSuccess>("/wallet/margin/{symbol}@{exchange}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletMarginSymbolexchangeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引余力（オプション） 口座の取引余力（オプション）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>WalletOptionSuccess</returns>
        public WalletOptionSuccess WalletOptionGet(string X_API_KEY)
        {
            Org.OpenAPITools.Client.ApiResponse<WalletOptionSuccess> localVarResponse = WalletOptionGetWithHttpInfo(X_API_KEY);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引余力（オプション） 口座の取引余力（オプション）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>ApiResponse of WalletOptionSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<WalletOptionSuccess> WalletOptionGetWithHttpInfo(string X_API_KEY)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling WalletApi->WalletOptionGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<WalletOptionSuccess>("/wallet/option", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletOptionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引余力（オプション） 口座の取引余力（オプション）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletOptionSuccess</returns>
        public async System.Threading.Tasks.Task<WalletOptionSuccess> WalletOptionGetAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<WalletOptionSuccess> localVarResponse = await WalletOptionGetWithHttpInfoAsync(X_API_KEY, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引余力（オプション） 口座の取引余力（オプション）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletOptionSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<WalletOptionSuccess>> WalletOptionGetWithHttpInfoAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling WalletApi->WalletOptionGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WalletOptionSuccess>("/wallet/option", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletOptionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引余力（オプション）（銘柄指定） 指定した銘柄の取引余力（オプション）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |2|日通し| |23|日中| |24|夜間|</param>
        /// <returns>WalletOptionSuccess</returns>
        public WalletOptionSuccess WalletOptionSymbolexchangeGet(string X_API_KEY, string symbol, string exchange)
        {
            Org.OpenAPITools.Client.ApiResponse<WalletOptionSuccess> localVarResponse = WalletOptionSymbolexchangeGetWithHttpInfo(X_API_KEY, symbol, exchange);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引余力（オプション）（銘柄指定） 指定した銘柄の取引余力（オプション）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |2|日通し| |23|日中| |24|夜間|</param>
        /// <returns>ApiResponse of WalletOptionSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<WalletOptionSuccess> WalletOptionSymbolexchangeGetWithHttpInfo(string X_API_KEY, string symbol, string exchange)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling WalletApi->WalletOptionSymbolexchangeGet");

            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'symbol' when calling WalletApi->WalletOptionSymbolexchangeGet");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'exchange' when calling WalletApi->WalletOptionSymbolexchangeGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("symbol", Org.OpenAPITools.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("exchange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<WalletOptionSuccess>("/wallet/option/{symbol}@{exchange}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletOptionSymbolexchangeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引余力（オプション）（銘柄指定） 指定した銘柄の取引余力（オプション）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |2|日通し| |23|日中| |24|夜間|</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletOptionSuccess</returns>
        public async System.Threading.Tasks.Task<WalletOptionSuccess> WalletOptionSymbolexchangeGetAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<WalletOptionSuccess> localVarResponse = await WalletOptionSymbolexchangeGetWithHttpInfoAsync(X_API_KEY, symbol, exchange, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引余力（オプション）（銘柄指定） 指定した銘柄の取引余力（オプション）を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード |定義値|説明| |-|-| |2|日通し| |23|日中| |24|夜間|</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletOptionSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<WalletOptionSuccess>> WalletOptionSymbolexchangeGetWithHttpInfoAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling WalletApi->WalletOptionSymbolexchangeGet");

            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'symbol' when calling WalletApi->WalletOptionSymbolexchangeGet");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'exchange' when calling WalletApi->WalletOptionSymbolexchangeGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("symbol", Org.OpenAPITools.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("exchange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WalletOptionSuccess>("/wallet/option/{symbol}@{exchange}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletOptionSymbolexchangeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
