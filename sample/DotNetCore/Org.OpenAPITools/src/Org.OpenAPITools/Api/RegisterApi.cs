/*
 * kabuステーションAPI
 *
 * # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRegisterApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 銘柄登録
        /// </summary>
        /// <remarks>
        /// PUSH配信する銘柄を登録します。&lt;br&gt; API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="requestRegister">登録する銘柄のリスト</param>
        /// <returns>RegistSuccess</returns>
        RegistSuccess RegisterPut(string X_API_KEY, RequestRegister requestRegister);

        /// <summary>
        /// 銘柄登録
        /// </summary>
        /// <remarks>
        /// PUSH配信する銘柄を登録します。&lt;br&gt; API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="requestRegister">登録する銘柄のリスト</param>
        /// <returns>ApiResponse of RegistSuccess</returns>
        ApiResponse<RegistSuccess> RegisterPutWithHttpInfo(string X_API_KEY, RequestRegister requestRegister);
        /// <summary>
        /// 銘柄登録全解除
        /// </summary>
        /// <remarks>
        /// API登録銘柄リストに登録されている銘柄をすべて解除します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>UnregisterAllSuccess</returns>
        UnregisterAllSuccess UnregisterAllPut(string X_API_KEY);

        /// <summary>
        /// 銘柄登録全解除
        /// </summary>
        /// <remarks>
        /// API登録銘柄リストに登録されている銘柄をすべて解除します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>ApiResponse of UnregisterAllSuccess</returns>
        ApiResponse<UnregisterAllSuccess> UnregisterAllPutWithHttpInfo(string X_API_KEY);
        /// <summary>
        /// 銘柄登録解除
        /// </summary>
        /// <remarks>
        /// API登録銘柄リストに登録されている銘柄を解除します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="requestUnregister">登録解除する銘柄のリスト</param>
        /// <returns>RegistSuccess</returns>
        RegistSuccess UnregisterPut(string X_API_KEY, RequestUnregister requestUnregister);

        /// <summary>
        /// 銘柄登録解除
        /// </summary>
        /// <remarks>
        /// API登録銘柄リストに登録されている銘柄を解除します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="requestUnregister">登録解除する銘柄のリスト</param>
        /// <returns>ApiResponse of RegistSuccess</returns>
        ApiResponse<RegistSuccess> UnregisterPutWithHttpInfo(string X_API_KEY, RequestUnregister requestUnregister);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRegisterApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 銘柄登録
        /// </summary>
        /// <remarks>
        /// PUSH配信する銘柄を登録します。&lt;br&gt; API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="requestRegister">登録する銘柄のリスト</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegistSuccess</returns>
        System.Threading.Tasks.Task<RegistSuccess> RegisterPutAsync(string X_API_KEY, RequestRegister requestRegister, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 銘柄登録
        /// </summary>
        /// <remarks>
        /// PUSH配信する銘柄を登録します。&lt;br&gt; API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="requestRegister">登録する銘柄のリスト</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegistSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistSuccess>> RegisterPutWithHttpInfoAsync(string X_API_KEY, RequestRegister requestRegister, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 銘柄登録全解除
        /// </summary>
        /// <remarks>
        /// API登録銘柄リストに登録されている銘柄をすべて解除します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UnregisterAllSuccess</returns>
        System.Threading.Tasks.Task<UnregisterAllSuccess> UnregisterAllPutAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 銘柄登録全解除
        /// </summary>
        /// <remarks>
        /// API登録銘柄リストに登録されている銘柄をすべて解除します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UnregisterAllSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnregisterAllSuccess>> UnregisterAllPutWithHttpInfoAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 銘柄登録解除
        /// </summary>
        /// <remarks>
        /// API登録銘柄リストに登録されている銘柄を解除します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="requestUnregister">登録解除する銘柄のリスト</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegistSuccess</returns>
        System.Threading.Tasks.Task<RegistSuccess> UnregisterPutAsync(string X_API_KEY, RequestUnregister requestUnregister, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 銘柄登録解除
        /// </summary>
        /// <remarks>
        /// API登録銘柄リストに登録されている銘柄を解除します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="requestUnregister">登録解除する銘柄のリスト</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegistSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistSuccess>> UnregisterPutWithHttpInfoAsync(string X_API_KEY, RequestUnregister requestUnregister, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRegisterApi : IRegisterApiSync, IRegisterApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RegisterApi : IRegisterApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RegisterApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RegisterApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RegisterApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RegisterApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 銘柄登録 PUSH配信する銘柄を登録します。&lt;br&gt; API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="requestRegister">登録する銘柄のリスト</param>
        /// <returns>RegistSuccess</returns>
        public RegistSuccess RegisterPut(string X_API_KEY, RequestRegister requestRegister)
        {
            Org.OpenAPITools.Client.ApiResponse<RegistSuccess> localVarResponse = RegisterPutWithHttpInfo(X_API_KEY, requestRegister);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 銘柄登録 PUSH配信する銘柄を登録します。&lt;br&gt; API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="requestRegister">登録する銘柄のリスト</param>
        /// <returns>ApiResponse of RegistSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<RegistSuccess> RegisterPutWithHttpInfo(string X_API_KEY, RequestRegister requestRegister)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling RegisterApi->RegisterPut");

            // verify the required parameter 'requestRegister' is set
            if (requestRegister == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestRegister' when calling RegisterApi->RegisterPut");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter
            localVarRequestOptions.Data = requestRegister;


            // make the HTTP request
            var localVarResponse = this.Client.Put<RegistSuccess>("/register", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 銘柄登録 PUSH配信する銘柄を登録します。&lt;br&gt; API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="requestRegister">登録する銘柄のリスト</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegistSuccess</returns>
        public async System.Threading.Tasks.Task<RegistSuccess> RegisterPutAsync(string X_API_KEY, RequestRegister requestRegister, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RegistSuccess> localVarResponse = await RegisterPutWithHttpInfoAsync(X_API_KEY, requestRegister, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 銘柄登録 PUSH配信する銘柄を登録します。&lt;br&gt; API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="requestRegister">登録する銘柄のリスト</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegistSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RegistSuccess>> RegisterPutWithHttpInfoAsync(string X_API_KEY, RequestRegister requestRegister, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling RegisterApi->RegisterPut");

            // verify the required parameter 'requestRegister' is set
            if (requestRegister == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestRegister' when calling RegisterApi->RegisterPut");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter
            localVarRequestOptions.Data = requestRegister;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<RegistSuccess>("/register", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 銘柄登録全解除 API登録銘柄リストに登録されている銘柄をすべて解除します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>UnregisterAllSuccess</returns>
        public UnregisterAllSuccess UnregisterAllPut(string X_API_KEY)
        {
            Org.OpenAPITools.Client.ApiResponse<UnregisterAllSuccess> localVarResponse = UnregisterAllPutWithHttpInfo(X_API_KEY);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 銘柄登録全解除 API登録銘柄リストに登録されている銘柄をすべて解除します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <returns>ApiResponse of UnregisterAllSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<UnregisterAllSuccess> UnregisterAllPutWithHttpInfo(string X_API_KEY)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling RegisterApi->UnregisterAllPut");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<UnregisterAllSuccess>("/unregister/all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnregisterAllPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 銘柄登録全解除 API登録銘柄リストに登録されている銘柄をすべて解除します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UnregisterAllSuccess</returns>
        public async System.Threading.Tasks.Task<UnregisterAllSuccess> UnregisterAllPutAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UnregisterAllSuccess> localVarResponse = await UnregisterAllPutWithHttpInfoAsync(X_API_KEY, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 銘柄登録全解除 API登録銘柄リストに登録されている銘柄をすべて解除します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UnregisterAllSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UnregisterAllSuccess>> UnregisterAllPutWithHttpInfoAsync(string X_API_KEY, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling RegisterApi->UnregisterAllPut");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<UnregisterAllSuccess>("/unregister/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnregisterAllPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 銘柄登録解除 API登録銘柄リストに登録されている銘柄を解除します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="requestUnregister">登録解除する銘柄のリスト</param>
        /// <returns>RegistSuccess</returns>
        public RegistSuccess UnregisterPut(string X_API_KEY, RequestUnregister requestUnregister)
        {
            Org.OpenAPITools.Client.ApiResponse<RegistSuccess> localVarResponse = UnregisterPutWithHttpInfo(X_API_KEY, requestUnregister);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 銘柄登録解除 API登録銘柄リストに登録されている銘柄を解除します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="requestUnregister">登録解除する銘柄のリスト</param>
        /// <returns>ApiResponse of RegistSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<RegistSuccess> UnregisterPutWithHttpInfo(string X_API_KEY, RequestUnregister requestUnregister)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling RegisterApi->UnregisterPut");

            // verify the required parameter 'requestUnregister' is set
            if (requestUnregister == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestUnregister' when calling RegisterApi->UnregisterPut");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter
            localVarRequestOptions.Data = requestUnregister;


            // make the HTTP request
            var localVarResponse = this.Client.Put<RegistSuccess>("/unregister", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnregisterPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 銘柄登録解除 API登録銘柄リストに登録されている銘柄を解除します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="requestUnregister">登録解除する銘柄のリスト</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegistSuccess</returns>
        public async System.Threading.Tasks.Task<RegistSuccess> UnregisterPutAsync(string X_API_KEY, RequestUnregister requestUnregister, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RegistSuccess> localVarResponse = await UnregisterPutWithHttpInfoAsync(X_API_KEY, requestUnregister, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 銘柄登録解除 API登録銘柄リストに登録されている銘柄を解除します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="requestUnregister">登録解除する銘柄のリスト</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegistSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RegistSuccess>> UnregisterPutWithHttpInfoAsync(string X_API_KEY, RequestUnregister requestUnregister, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling RegisterApi->UnregisterPut");

            // verify the required parameter 'requestUnregister' is set
            if (requestUnregister == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestUnregister' when calling RegisterApi->UnregisterPut");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter
            localVarRequestOptions.Data = requestUnregister;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<RegistSuccess>("/unregister", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnregisterPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
