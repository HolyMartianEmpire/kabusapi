/*
 * kabuステーションAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInfoApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 時価情報・板情報
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の時価情報・板情報を取得します&lt;br&gt;レスポンスの一部にnullが発生した場合、該当銘柄を銘柄登録をしてから、&lt;br&gt;再度時価情報・板情報APIを実行してください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <returns>BoardSuccess</returns>
        BoardSuccess BoardSymbolexchangeGet(string X_API_KEY, string symbol, string exchange);

        /// <summary>
        /// 時価情報・板情報
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の時価情報・板情報を取得します&lt;br&gt;レスポンスの一部にnullが発生した場合、該当銘柄を銘柄登録をしてから、&lt;br&gt;再度時価情報・板情報APIを実行してください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <returns>ApiResponse of BoardSuccess</returns>
        ApiResponse<BoardSuccess> BoardSymbolexchangeGetWithHttpInfo(string X_API_KEY, string symbol, string exchange);
        /// <summary>
        /// 注文約定照会
        /// </summary>
        /// <remarks>
        /// 注文一覧を取得します。&lt;br&gt;※下記Queryパラメータは任意設定となります。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="product">取得する商品 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;すべて &lt;/td&gt;&lt;/tr&gt;      &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;現物&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;信用&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;先物&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;OP&lt;/td&gt;&lt;/tr&gt;            &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="id">注文番号&lt;br&gt;※指定された注文番号と一致する注文のみレスポンスします。&lt;br&gt;※指定された注文番号との比較では大文字小文字を区別しません。&lt;br&gt;※複数の注文番号を指定することはできません。 (optional)</param>
        /// <param name="updtime">更新日時&lt;br&gt;※形式：yyyyMMddHHmmss （例：20201201123456）&lt;br&gt;※指定された更新日時以降（指定日時含む）に更新された注文のみレスポンスします。&lt;br&gt;※複数の更新日時を指定することはできません。 (optional)</param>
        /// <param name="details">注文詳細抑止 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;true&lt;/td&gt;&lt;td&gt;注文詳細を出力する（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;注文詳細の出力しない&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="symbol">銘柄コード&lt;br&gt;※指定された銘柄コードと一致する注文のみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することができません。 (optional)</param>
        /// <param name="state">状態 &lt;br&gt;※指定された状態と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の状態を指定することはできません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;待機（発注待機）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;処理中（発注送信中）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;処理済（発注済・訂正済）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;訂正取消送信中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;終了（発注エラー・取消済・全約定・失効・期限切れ）&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="side">売買区分 &lt;br&gt;※指定された売買区分と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の売買区分を指定することができません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;売&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;買&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="cashmargin">取引区分 &lt;br&gt;※指定された取引区分と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の取引区分を指定することができません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;新規&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;返済&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;       (optional)</param>
        /// <returns>OrdersSuccess</returns>
        OrdersSuccess OrdersGet(string X_API_KEY, string product = default(string), string id = default(string), string updtime = default(string), string details = default(string), string symbol = default(string), string state = default(string), string side = default(string), string cashmargin = default(string));

        /// <summary>
        /// 注文約定照会
        /// </summary>
        /// <remarks>
        /// 注文一覧を取得します。&lt;br&gt;※下記Queryパラメータは任意設定となります。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="product">取得する商品 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;すべて &lt;/td&gt;&lt;/tr&gt;      &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;現物&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;信用&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;先物&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;OP&lt;/td&gt;&lt;/tr&gt;            &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="id">注文番号&lt;br&gt;※指定された注文番号と一致する注文のみレスポンスします。&lt;br&gt;※指定された注文番号との比較では大文字小文字を区別しません。&lt;br&gt;※複数の注文番号を指定することはできません。 (optional)</param>
        /// <param name="updtime">更新日時&lt;br&gt;※形式：yyyyMMddHHmmss （例：20201201123456）&lt;br&gt;※指定された更新日時以降（指定日時含む）に更新された注文のみレスポンスします。&lt;br&gt;※複数の更新日時を指定することはできません。 (optional)</param>
        /// <param name="details">注文詳細抑止 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;true&lt;/td&gt;&lt;td&gt;注文詳細を出力する（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;注文詳細の出力しない&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="symbol">銘柄コード&lt;br&gt;※指定された銘柄コードと一致する注文のみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することができません。 (optional)</param>
        /// <param name="state">状態 &lt;br&gt;※指定された状態と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の状態を指定することはできません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;待機（発注待機）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;処理中（発注送信中）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;処理済（発注済・訂正済）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;訂正取消送信中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;終了（発注エラー・取消済・全約定・失効・期限切れ）&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="side">売買区分 &lt;br&gt;※指定された売買区分と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の売買区分を指定することができません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;売&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;買&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="cashmargin">取引区分 &lt;br&gt;※指定された取引区分と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の取引区分を指定することができません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;新規&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;返済&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;       (optional)</param>
        /// <returns>ApiResponse of OrdersSuccess</returns>
        ApiResponse<OrdersSuccess> OrdersGetWithHttpInfo(string X_API_KEY, string product = default(string), string id = default(string), string updtime = default(string), string details = default(string), string symbol = default(string), string state = default(string), string side = default(string), string cashmargin = default(string));
        /// <summary>
        /// 残高照会
        /// </summary>
        /// <remarks>
        /// 残高一覧を取得します。&lt;br&gt;※下記Queryパラメータは任意設定となります。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="product">取得する商品 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;すべて&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;現物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;信用&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;OP&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="symbol">銘柄コード&lt;br&gt;※指定された銘柄コードと一致するポジションのみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することはできません。 (optional)</param>
        /// <returns>PositionsSuccess</returns>
        PositionsSuccess PositionsGet(string X_API_KEY, string product = default(string), string symbol = default(string));

        /// <summary>
        /// 残高照会
        /// </summary>
        /// <remarks>
        /// 残高一覧を取得します。&lt;br&gt;※下記Queryパラメータは任意設定となります。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="product">取得する商品 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;すべて&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;現物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;信用&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;OP&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="symbol">銘柄コード&lt;br&gt;※指定された銘柄コードと一致するポジションのみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することはできません。 (optional)</param>
        /// <returns>ApiResponse of PositionsSuccess</returns>
        ApiResponse<PositionsSuccess> PositionsGetWithHttpInfo(string X_API_KEY, string product = default(string), string symbol = default(string));
        /// <summary>
        /// 詳細ランキング
        /// </summary>
        /// <remarks>
        /// 詳細ランキング画面と同様の各種ランキングを返します。 &lt;br&gt;ランキングの対象日はkabuステーションが保持している当日のデータとなります。 &lt;br&gt;※株価情報ランキング、業種別指数ランキングは、下記の時間帯でデータがクリアされるため、 &lt;br&gt;その間の詳細ランキングAPIは空レスポンスとなります。 &lt;br&gt;データクリア：平日7:53頃-9:00過ぎ頃 &lt;br&gt;※信用情報ランキングは毎週第３営業日の7:55頃にデータが更新されます。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="type">種別&lt;br&gt;※信用情報ランキングに「福証」「札証」を指定した場合は、空レスポンスになります &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;値上がり率（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;値下がり率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;売買高上位&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;売買代金&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;TICK回数&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;売買高急増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;売買代金急増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;信用売残増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;信用売残減&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;信用買残増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;信用買残減&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;信用高倍率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;信用低倍率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;業種別値上がり率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;業種別値下がり率&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="exchangeDivision">市場&lt;br&gt;※業種別値上がり率・値下がり率に市場を指定しても無視されます &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;ALL&lt;/td&gt;&lt;td&gt;全市場（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T&lt;/td&gt;&lt;td&gt;東証全体&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;&lt;td&gt;東証一部&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T2&lt;/td&gt;&lt;td&gt;東証二部&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TM&lt;/td&gt;&lt;td&gt;マザーズ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JQ&lt;/td&gt;&lt;td&gt;JASDAQ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;M&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;FK&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;S&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <returns>OneOfRankingDefaultResponseRankingByTickCountResponseRankingByTradeVolumeResponseRankingByTradeValueResponseRankingByMarginResponseRankingByCategoryResponse</returns>
        RankingDefaultResponse RankingGet(string X_API_KEY, string type, string exchangeDivision);

        /// <summary>
        /// 詳細ランキング
        /// </summary>
        /// <remarks>
        /// 詳細ランキング画面と同様の各種ランキングを返します。 &lt;br&gt;ランキングの対象日はkabuステーションが保持している当日のデータとなります。 &lt;br&gt;※株価情報ランキング、業種別指数ランキングは、下記の時間帯でデータがクリアされるため、 &lt;br&gt;その間の詳細ランキングAPIは空レスポンスとなります。 &lt;br&gt;データクリア：平日7:53頃-9:00過ぎ頃 &lt;br&gt;※信用情報ランキングは毎週第３営業日の7:55頃にデータが更新されます。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="type">種別&lt;br&gt;※信用情報ランキングに「福証」「札証」を指定した場合は、空レスポンスになります &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;値上がり率（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;値下がり率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;売買高上位&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;売買代金&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;TICK回数&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;売買高急増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;売買代金急増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;信用売残増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;信用売残減&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;信用買残増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;信用買残減&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;信用高倍率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;信用低倍率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;業種別値上がり率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;業種別値下がり率&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="exchangeDivision">市場&lt;br&gt;※業種別値上がり率・値下がり率に市場を指定しても無視されます &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;ALL&lt;/td&gt;&lt;td&gt;全市場（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T&lt;/td&gt;&lt;td&gt;東証全体&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;&lt;td&gt;東証一部&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T2&lt;/td&gt;&lt;td&gt;東証二部&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TM&lt;/td&gt;&lt;td&gt;マザーズ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JQ&lt;/td&gt;&lt;td&gt;JASDAQ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;M&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;FK&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;S&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <returns>ApiResponse of OneOfRankingDefaultResponseRankingByTickCountResponseRankingByTradeVolumeResponseRankingByTradeValueResponseRankingByMarginResponseRankingByCategoryResponse</returns>
        ApiResponse<RankingDefaultResponse> RankingGetWithHttpInfo(string X_API_KEY, string type, string exchangeDivision);
        /// <summary>
        /// 銘柄情報
        /// </summary>
        /// <remarks>
        /// 指定した銘柄情報を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <returns>SymbolSuccess</returns>
        SymbolSuccess SymbolSymbolexchangeGet(string X_API_KEY, string symbol, string exchange);

        /// <summary>
        /// 銘柄情報
        /// </summary>
        /// <remarks>
        /// 指定した銘柄情報を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <returns>ApiResponse of SymbolSuccess</returns>
        ApiResponse<SymbolSuccess> SymbolSymbolexchangeGetWithHttpInfo(string X_API_KEY, string symbol, string exchange);
        /// <summary>
        /// 先物銘柄コード取得
        /// </summary>
        /// <remarks>
        /// 先物銘柄コード取得
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="derivMonth">限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。</param>
        /// <param name="futureCode">先物コード&lt;br&gt;※大文字小文字は区別しません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;NK225&lt;/td&gt;&lt;td&gt;日経平均先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;NK225mini&lt;/td&gt;&lt;td&gt;日経225mini先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIX&lt;/td&gt;&lt;td&gt;TOPIX先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIXmini&lt;/td&gt;&lt;td&gt;ミニTOPIX先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;MOTHERS&lt;/td&gt;&lt;td&gt;東証マザーズ先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JPX400&lt;/td&gt;&lt;td&gt;JPX日経400先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;DOW&lt;/td&gt;&lt;td&gt;NYダウ先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;VI&lt;/td&gt;&lt;td&gt;日経平均VI先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Core30&lt;/td&gt;&lt;td&gt;TOPIX Core30先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;REIT&lt;/td&gt;&lt;td&gt;東証REIT指数先物&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <returns>SymbolNameSuccess</returns>
        SymbolNameSuccess SymbolnameFutureGet(string X_API_KEY, int derivMonth, string futureCode = default(string));

        /// <summary>
        /// 先物銘柄コード取得
        /// </summary>
        /// <remarks>
        /// 先物銘柄コード取得
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="derivMonth">限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。</param>
        /// <param name="futureCode">先物コード&lt;br&gt;※大文字小文字は区別しません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;NK225&lt;/td&gt;&lt;td&gt;日経平均先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;NK225mini&lt;/td&gt;&lt;td&gt;日経225mini先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIX&lt;/td&gt;&lt;td&gt;TOPIX先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIXmini&lt;/td&gt;&lt;td&gt;ミニTOPIX先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;MOTHERS&lt;/td&gt;&lt;td&gt;東証マザーズ先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JPX400&lt;/td&gt;&lt;td&gt;JPX日経400先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;DOW&lt;/td&gt;&lt;td&gt;NYダウ先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;VI&lt;/td&gt;&lt;td&gt;日経平均VI先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Core30&lt;/td&gt;&lt;td&gt;TOPIX Core30先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;REIT&lt;/td&gt;&lt;td&gt;東証REIT指数先物&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <returns>ApiResponse of SymbolNameSuccess</returns>
        ApiResponse<SymbolNameSuccess> SymbolnameFutureGetWithHttpInfo(string X_API_KEY, int derivMonth, string futureCode = default(string));
        /// <summary>
        /// オプション銘柄コード取得
        /// </summary>
        /// <remarks>
        /// オプション銘柄コード取得
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="derivMonth">限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。</param>
        /// <param name="putOrCall">コール or プット&lt;br&gt;※大文字小文字は区別しません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;P&lt;/td&gt;&lt;td&gt;PUT&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;CALL&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="strikePrice">権利行使価格&lt;br&gt;※0を指定した場合、APIを実行した時点でのATMとなります。</param>
        /// <returns>SymbolNameSuccess</returns>
        SymbolNameSuccess SymbolnameOptionGet(string X_API_KEY, int derivMonth, string putOrCall, int strikePrice);

        /// <summary>
        /// オプション銘柄コード取得
        /// </summary>
        /// <remarks>
        /// オプション銘柄コード取得
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="derivMonth">限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。</param>
        /// <param name="putOrCall">コール or プット&lt;br&gt;※大文字小文字は区別しません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;P&lt;/td&gt;&lt;td&gt;PUT&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;CALL&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="strikePrice">権利行使価格&lt;br&gt;※0を指定した場合、APIを実行した時点でのATMとなります。</param>
        /// <returns>ApiResponse of SymbolNameSuccess</returns>
        ApiResponse<SymbolNameSuccess> SymbolnameOptionGetWithHttpInfo(string X_API_KEY, int derivMonth, string putOrCall, int strikePrice);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInfoApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 時価情報・板情報
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の時価情報・板情報を取得します&lt;br&gt;レスポンスの一部にnullが発生した場合、該当銘柄を銘柄登録をしてから、&lt;br&gt;再度時価情報・板情報APIを実行してください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoardSuccess</returns>
        System.Threading.Tasks.Task<BoardSuccess> BoardSymbolexchangeGetAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 時価情報・板情報
        /// </summary>
        /// <remarks>
        /// 指定した銘柄の時価情報・板情報を取得します&lt;br&gt;レスポンスの一部にnullが発生した場合、該当銘柄を銘柄登録をしてから、&lt;br&gt;再度時価情報・板情報APIを実行してください。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoardSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoardSuccess>> BoardSymbolexchangeGetWithHttpInfoAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 注文約定照会
        /// </summary>
        /// <remarks>
        /// 注文一覧を取得します。&lt;br&gt;※下記Queryパラメータは任意設定となります。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="product">取得する商品 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;すべて &lt;/td&gt;&lt;/tr&gt;      &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;現物&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;信用&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;先物&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;OP&lt;/td&gt;&lt;/tr&gt;            &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="id">注文番号&lt;br&gt;※指定された注文番号と一致する注文のみレスポンスします。&lt;br&gt;※指定された注文番号との比較では大文字小文字を区別しません。&lt;br&gt;※複数の注文番号を指定することはできません。 (optional)</param>
        /// <param name="updtime">更新日時&lt;br&gt;※形式：yyyyMMddHHmmss （例：20201201123456）&lt;br&gt;※指定された更新日時以降（指定日時含む）に更新された注文のみレスポンスします。&lt;br&gt;※複数の更新日時を指定することはできません。 (optional)</param>
        /// <param name="details">注文詳細抑止 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;true&lt;/td&gt;&lt;td&gt;注文詳細を出力する（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;注文詳細の出力しない&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="symbol">銘柄コード&lt;br&gt;※指定された銘柄コードと一致する注文のみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することができません。 (optional)</param>
        /// <param name="state">状態 &lt;br&gt;※指定された状態と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の状態を指定することはできません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;待機（発注待機）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;処理中（発注送信中）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;処理済（発注済・訂正済）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;訂正取消送信中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;終了（発注エラー・取消済・全約定・失効・期限切れ）&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="side">売買区分 &lt;br&gt;※指定された売買区分と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の売買区分を指定することができません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;売&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;買&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="cashmargin">取引区分 &lt;br&gt;※指定された取引区分と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の取引区分を指定することができません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;新規&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;返済&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;       (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrdersSuccess</returns>
        System.Threading.Tasks.Task<OrdersSuccess> OrdersGetAsync(string X_API_KEY, string product = default(string), string id = default(string), string updtime = default(string), string details = default(string), string symbol = default(string), string state = default(string), string side = default(string), string cashmargin = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 注文約定照会
        /// </summary>
        /// <remarks>
        /// 注文一覧を取得します。&lt;br&gt;※下記Queryパラメータは任意設定となります。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="product">取得する商品 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;すべて &lt;/td&gt;&lt;/tr&gt;      &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;現物&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;信用&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;先物&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;OP&lt;/td&gt;&lt;/tr&gt;            &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="id">注文番号&lt;br&gt;※指定された注文番号と一致する注文のみレスポンスします。&lt;br&gt;※指定された注文番号との比較では大文字小文字を区別しません。&lt;br&gt;※複数の注文番号を指定することはできません。 (optional)</param>
        /// <param name="updtime">更新日時&lt;br&gt;※形式：yyyyMMddHHmmss （例：20201201123456）&lt;br&gt;※指定された更新日時以降（指定日時含む）に更新された注文のみレスポンスします。&lt;br&gt;※複数の更新日時を指定することはできません。 (optional)</param>
        /// <param name="details">注文詳細抑止 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;true&lt;/td&gt;&lt;td&gt;注文詳細を出力する（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;注文詳細の出力しない&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="symbol">銘柄コード&lt;br&gt;※指定された銘柄コードと一致する注文のみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することができません。 (optional)</param>
        /// <param name="state">状態 &lt;br&gt;※指定された状態と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の状態を指定することはできません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;待機（発注待機）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;処理中（発注送信中）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;処理済（発注済・訂正済）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;訂正取消送信中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;終了（発注エラー・取消済・全約定・失効・期限切れ）&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="side">売買区分 &lt;br&gt;※指定された売買区分と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の売買区分を指定することができません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;売&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;買&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="cashmargin">取引区分 &lt;br&gt;※指定された取引区分と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の取引区分を指定することができません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;新規&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;返済&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;       (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrdersSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrdersSuccess>> OrdersGetWithHttpInfoAsync(string X_API_KEY, string product = default(string), string id = default(string), string updtime = default(string), string details = default(string), string symbol = default(string), string state = default(string), string side = default(string), string cashmargin = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 残高照会
        /// </summary>
        /// <remarks>
        /// 残高一覧を取得します。&lt;br&gt;※下記Queryパラメータは任意設定となります。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="product">取得する商品 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;すべて&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;現物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;信用&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;OP&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="symbol">銘柄コード&lt;br&gt;※指定された銘柄コードと一致するポジションのみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することはできません。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PositionsSuccess</returns>
        System.Threading.Tasks.Task<PositionsSuccess> PositionsGetAsync(string X_API_KEY, string product = default(string), string symbol = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 残高照会
        /// </summary>
        /// <remarks>
        /// 残高一覧を取得します。&lt;br&gt;※下記Queryパラメータは任意設定となります。
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="product">取得する商品 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;すべて&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;現物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;信用&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;OP&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="symbol">銘柄コード&lt;br&gt;※指定された銘柄コードと一致するポジションのみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することはできません。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PositionsSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<PositionsSuccess>> PositionsGetWithHttpInfoAsync(string X_API_KEY, string product = default(string), string symbol = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 詳細ランキング
        /// </summary>
        /// <remarks>
        /// 詳細ランキング画面と同様の各種ランキングを返します。 &lt;br&gt;ランキングの対象日はkabuステーションが保持している当日のデータとなります。 &lt;br&gt;※株価情報ランキング、業種別指数ランキングは、下記の時間帯でデータがクリアされるため、 &lt;br&gt;その間の詳細ランキングAPIは空レスポンスとなります。 &lt;br&gt;データクリア：平日7:53頃-9:00過ぎ頃 &lt;br&gt;※信用情報ランキングは毎週第３営業日の7:55頃にデータが更新されます。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="type">種別&lt;br&gt;※信用情報ランキングに「福証」「札証」を指定した場合は、空レスポンスになります &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;値上がり率（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;値下がり率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;売買高上位&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;売買代金&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;TICK回数&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;売買高急増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;売買代金急増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;信用売残増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;信用売残減&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;信用買残増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;信用買残減&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;信用高倍率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;信用低倍率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;業種別値上がり率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;業種別値下がり率&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="exchangeDivision">市場&lt;br&gt;※業種別値上がり率・値下がり率に市場を指定しても無視されます &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;ALL&lt;/td&gt;&lt;td&gt;全市場（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T&lt;/td&gt;&lt;td&gt;東証全体&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;&lt;td&gt;東証一部&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T2&lt;/td&gt;&lt;td&gt;東証二部&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TM&lt;/td&gt;&lt;td&gt;マザーズ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JQ&lt;/td&gt;&lt;td&gt;JASDAQ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;M&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;FK&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;S&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OneOfRankingDefaultResponseRankingByTickCountResponseRankingByTradeVolumeResponseRankingByTradeValueResponseRankingByMarginResponseRankingByCategoryResponse</returns>
        System.Threading.Tasks.Task<RankingDefaultResponse> RankingGetAsync(string X_API_KEY, string type, string exchangeDivision, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 詳細ランキング
        /// </summary>
        /// <remarks>
        /// 詳細ランキング画面と同様の各種ランキングを返します。 &lt;br&gt;ランキングの対象日はkabuステーションが保持している当日のデータとなります。 &lt;br&gt;※株価情報ランキング、業種別指数ランキングは、下記の時間帯でデータがクリアされるため、 &lt;br&gt;その間の詳細ランキングAPIは空レスポンスとなります。 &lt;br&gt;データクリア：平日7:53頃-9:00過ぎ頃 &lt;br&gt;※信用情報ランキングは毎週第３営業日の7:55頃にデータが更新されます。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="type">種別&lt;br&gt;※信用情報ランキングに「福証」「札証」を指定した場合は、空レスポンスになります &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;値上がり率（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;値下がり率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;売買高上位&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;売買代金&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;TICK回数&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;売買高急増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;売買代金急増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;信用売残増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;信用売残減&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;信用買残増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;信用買残減&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;信用高倍率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;信用低倍率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;業種別値上がり率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;業種別値下がり率&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="exchangeDivision">市場&lt;br&gt;※業種別値上がり率・値下がり率に市場を指定しても無視されます &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;ALL&lt;/td&gt;&lt;td&gt;全市場（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T&lt;/td&gt;&lt;td&gt;東証全体&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;&lt;td&gt;東証一部&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T2&lt;/td&gt;&lt;td&gt;東証二部&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TM&lt;/td&gt;&lt;td&gt;マザーズ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JQ&lt;/td&gt;&lt;td&gt;JASDAQ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;M&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;FK&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;S&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OneOfRankingDefaultResponseRankingByTickCountResponseRankingByTradeVolumeResponseRankingByTradeValueResponseRankingByMarginResponseRankingByCategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RankingDefaultResponse>> RankingGetWithHttpInfoAsync(string X_API_KEY, string type, string exchangeDivision, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 銘柄情報
        /// </summary>
        /// <remarks>
        /// 指定した銘柄情報を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SymbolSuccess</returns>
        System.Threading.Tasks.Task<SymbolSuccess> SymbolSymbolexchangeGetAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 銘柄情報
        /// </summary>
        /// <remarks>
        /// 指定した銘柄情報を取得します
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SymbolSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<SymbolSuccess>> SymbolSymbolexchangeGetWithHttpInfoAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 先物銘柄コード取得
        /// </summary>
        /// <remarks>
        /// 先物銘柄コード取得
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="derivMonth">限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。</param>
        /// <param name="futureCode">先物コード&lt;br&gt;※大文字小文字は区別しません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;NK225&lt;/td&gt;&lt;td&gt;日経平均先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;NK225mini&lt;/td&gt;&lt;td&gt;日経225mini先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIX&lt;/td&gt;&lt;td&gt;TOPIX先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIXmini&lt;/td&gt;&lt;td&gt;ミニTOPIX先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;MOTHERS&lt;/td&gt;&lt;td&gt;東証マザーズ先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JPX400&lt;/td&gt;&lt;td&gt;JPX日経400先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;DOW&lt;/td&gt;&lt;td&gt;NYダウ先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;VI&lt;/td&gt;&lt;td&gt;日経平均VI先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Core30&lt;/td&gt;&lt;td&gt;TOPIX Core30先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;REIT&lt;/td&gt;&lt;td&gt;東証REIT指数先物&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SymbolNameSuccess</returns>
        System.Threading.Tasks.Task<SymbolNameSuccess> SymbolnameFutureGetAsync(string X_API_KEY, int derivMonth, string futureCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 先物銘柄コード取得
        /// </summary>
        /// <remarks>
        /// 先物銘柄コード取得
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="derivMonth">限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。</param>
        /// <param name="futureCode">先物コード&lt;br&gt;※大文字小文字は区別しません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;NK225&lt;/td&gt;&lt;td&gt;日経平均先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;NK225mini&lt;/td&gt;&lt;td&gt;日経225mini先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIX&lt;/td&gt;&lt;td&gt;TOPIX先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIXmini&lt;/td&gt;&lt;td&gt;ミニTOPIX先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;MOTHERS&lt;/td&gt;&lt;td&gt;東証マザーズ先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JPX400&lt;/td&gt;&lt;td&gt;JPX日経400先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;DOW&lt;/td&gt;&lt;td&gt;NYダウ先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;VI&lt;/td&gt;&lt;td&gt;日経平均VI先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Core30&lt;/td&gt;&lt;td&gt;TOPIX Core30先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;REIT&lt;/td&gt;&lt;td&gt;東証REIT指数先物&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SymbolNameSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<SymbolNameSuccess>> SymbolnameFutureGetWithHttpInfoAsync(string X_API_KEY, int derivMonth, string futureCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// オプション銘柄コード取得
        /// </summary>
        /// <remarks>
        /// オプション銘柄コード取得
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="derivMonth">限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。</param>
        /// <param name="putOrCall">コール or プット&lt;br&gt;※大文字小文字は区別しません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;P&lt;/td&gt;&lt;td&gt;PUT&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;CALL&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="strikePrice">権利行使価格&lt;br&gt;※0を指定した場合、APIを実行した時点でのATMとなります。</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SymbolNameSuccess</returns>
        System.Threading.Tasks.Task<SymbolNameSuccess> SymbolnameOptionGetAsync(string X_API_KEY, int derivMonth, string putOrCall, int strikePrice, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// オプション銘柄コード取得
        /// </summary>
        /// <remarks>
        /// オプション銘柄コード取得
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="derivMonth">限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。</param>
        /// <param name="putOrCall">コール or プット&lt;br&gt;※大文字小文字は区別しません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;P&lt;/td&gt;&lt;td&gt;PUT&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;CALL&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="strikePrice">権利行使価格&lt;br&gt;※0を指定した場合、APIを実行した時点でのATMとなります。</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SymbolNameSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<SymbolNameSuccess>> SymbolnameOptionGetWithHttpInfoAsync(string X_API_KEY, int derivMonth, string putOrCall, int strikePrice, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInfoApi : IInfoApiSync, IInfoApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InfoApi : IInfoApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InfoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InfoApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InfoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InfoApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InfoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InfoApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InfoApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InfoApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 時価情報・板情報 指定した銘柄の時価情報・板情報を取得します&lt;br&gt;レスポンスの一部にnullが発生した場合、該当銘柄を銘柄登録をしてから、&lt;br&gt;再度時価情報・板情報APIを実行してください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <returns>BoardSuccess</returns>
        public BoardSuccess BoardSymbolexchangeGet(string X_API_KEY, string symbol, string exchange)
        {
            Org.OpenAPITools.Client.ApiResponse<BoardSuccess> localVarResponse = BoardSymbolexchangeGetWithHttpInfo(X_API_KEY, symbol, exchange);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 時価情報・板情報 指定した銘柄の時価情報・板情報を取得します&lt;br&gt;レスポンスの一部にnullが発生した場合、該当銘柄を銘柄登録をしてから、&lt;br&gt;再度時価情報・板情報APIを実行してください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <returns>ApiResponse of BoardSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoardSuccess> BoardSymbolexchangeGetWithHttpInfo(string X_API_KEY, string symbol, string exchange)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling InfoApi->BoardSymbolexchangeGet");

            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'symbol' when calling InfoApi->BoardSymbolexchangeGet");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'exchange' when calling InfoApi->BoardSymbolexchangeGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("symbol", Org.OpenAPITools.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("exchange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoardSuccess>("/board/{symbol}@{exchange}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BoardSymbolexchangeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 時価情報・板情報 指定した銘柄の時価情報・板情報を取得します&lt;br&gt;レスポンスの一部にnullが発生した場合、該当銘柄を銘柄登録をしてから、&lt;br&gt;再度時価情報・板情報APIを実行してください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoardSuccess</returns>
        public async System.Threading.Tasks.Task<BoardSuccess> BoardSymbolexchangeGetAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoardSuccess> localVarResponse = await BoardSymbolexchangeGetWithHttpInfoAsync(X_API_KEY, symbol, exchange, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 時価情報・板情報 指定した銘柄の時価情報・板情報を取得します&lt;br&gt;レスポンスの一部にnullが発生した場合、該当銘柄を銘柄登録をしてから、&lt;br&gt;再度時価情報・板情報APIを実行してください。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoardSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoardSuccess>> BoardSymbolexchangeGetWithHttpInfoAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling InfoApi->BoardSymbolexchangeGet");

            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'symbol' when calling InfoApi->BoardSymbolexchangeGet");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'exchange' when calling InfoApi->BoardSymbolexchangeGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("symbol", Org.OpenAPITools.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("exchange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoardSuccess>("/board/{symbol}@{exchange}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BoardSymbolexchangeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 注文約定照会 注文一覧を取得します。&lt;br&gt;※下記Queryパラメータは任意設定となります。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="product">取得する商品 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;すべて &lt;/td&gt;&lt;/tr&gt;      &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;現物&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;信用&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;先物&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;OP&lt;/td&gt;&lt;/tr&gt;            &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="id">注文番号&lt;br&gt;※指定された注文番号と一致する注文のみレスポンスします。&lt;br&gt;※指定された注文番号との比較では大文字小文字を区別しません。&lt;br&gt;※複数の注文番号を指定することはできません。 (optional)</param>
        /// <param name="updtime">更新日時&lt;br&gt;※形式：yyyyMMddHHmmss （例：20201201123456）&lt;br&gt;※指定された更新日時以降（指定日時含む）に更新された注文のみレスポンスします。&lt;br&gt;※複数の更新日時を指定することはできません。 (optional)</param>
        /// <param name="details">注文詳細抑止 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;true&lt;/td&gt;&lt;td&gt;注文詳細を出力する（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;注文詳細の出力しない&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="symbol">銘柄コード&lt;br&gt;※指定された銘柄コードと一致する注文のみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することができません。 (optional)</param>
        /// <param name="state">状態 &lt;br&gt;※指定された状態と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の状態を指定することはできません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;待機（発注待機）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;処理中（発注送信中）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;処理済（発注済・訂正済）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;訂正取消送信中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;終了（発注エラー・取消済・全約定・失効・期限切れ）&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="side">売買区分 &lt;br&gt;※指定された売買区分と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の売買区分を指定することができません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;売&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;買&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="cashmargin">取引区分 &lt;br&gt;※指定された取引区分と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の取引区分を指定することができません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;新規&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;返済&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;       (optional)</param>
        /// <returns>OrdersSuccess</returns>
        public OrdersSuccess OrdersGet(string X_API_KEY, string product = default(string), string id = default(string), string updtime = default(string), string details = default(string), string symbol = default(string), string state = default(string), string side = default(string), string cashmargin = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<OrdersSuccess> localVarResponse = OrdersGetWithHttpInfo(X_API_KEY, product, id, updtime, details, symbol, state, side, cashmargin);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 注文約定照会 注文一覧を取得します。&lt;br&gt;※下記Queryパラメータは任意設定となります。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="product">取得する商品 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;すべて &lt;/td&gt;&lt;/tr&gt;      &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;現物&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;信用&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;先物&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;OP&lt;/td&gt;&lt;/tr&gt;            &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="id">注文番号&lt;br&gt;※指定された注文番号と一致する注文のみレスポンスします。&lt;br&gt;※指定された注文番号との比較では大文字小文字を区別しません。&lt;br&gt;※複数の注文番号を指定することはできません。 (optional)</param>
        /// <param name="updtime">更新日時&lt;br&gt;※形式：yyyyMMddHHmmss （例：20201201123456）&lt;br&gt;※指定された更新日時以降（指定日時含む）に更新された注文のみレスポンスします。&lt;br&gt;※複数の更新日時を指定することはできません。 (optional)</param>
        /// <param name="details">注文詳細抑止 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;true&lt;/td&gt;&lt;td&gt;注文詳細を出力する（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;注文詳細の出力しない&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="symbol">銘柄コード&lt;br&gt;※指定された銘柄コードと一致する注文のみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することができません。 (optional)</param>
        /// <param name="state">状態 &lt;br&gt;※指定された状態と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の状態を指定することはできません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;待機（発注待機）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;処理中（発注送信中）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;処理済（発注済・訂正済）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;訂正取消送信中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;終了（発注エラー・取消済・全約定・失効・期限切れ）&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="side">売買区分 &lt;br&gt;※指定された売買区分と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の売買区分を指定することができません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;売&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;買&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="cashmargin">取引区分 &lt;br&gt;※指定された取引区分と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の取引区分を指定することができません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;新規&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;返済&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;       (optional)</param>
        /// <returns>ApiResponse of OrdersSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrdersSuccess> OrdersGetWithHttpInfo(string X_API_KEY, string product = default(string), string id = default(string), string updtime = default(string), string details = default(string), string symbol = default(string), string state = default(string), string side = default(string), string cashmargin = default(string))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling InfoApi->OrdersGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (product != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product", product));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (updtime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "updtime", updtime));
            }
            if (details != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "details", details));
            }
            if (symbol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (side != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "side", side));
            }
            if (cashmargin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "cashmargin", cashmargin));
            }
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<OrdersSuccess>("/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 注文約定照会 注文一覧を取得します。&lt;br&gt;※下記Queryパラメータは任意設定となります。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="product">取得する商品 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;すべて &lt;/td&gt;&lt;/tr&gt;      &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;現物&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;信用&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;先物&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;OP&lt;/td&gt;&lt;/tr&gt;            &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="id">注文番号&lt;br&gt;※指定された注文番号と一致する注文のみレスポンスします。&lt;br&gt;※指定された注文番号との比較では大文字小文字を区別しません。&lt;br&gt;※複数の注文番号を指定することはできません。 (optional)</param>
        /// <param name="updtime">更新日時&lt;br&gt;※形式：yyyyMMddHHmmss （例：20201201123456）&lt;br&gt;※指定された更新日時以降（指定日時含む）に更新された注文のみレスポンスします。&lt;br&gt;※複数の更新日時を指定することはできません。 (optional)</param>
        /// <param name="details">注文詳細抑止 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;true&lt;/td&gt;&lt;td&gt;注文詳細を出力する（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;注文詳細の出力しない&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="symbol">銘柄コード&lt;br&gt;※指定された銘柄コードと一致する注文のみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することができません。 (optional)</param>
        /// <param name="state">状態 &lt;br&gt;※指定された状態と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の状態を指定することはできません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;待機（発注待機）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;処理中（発注送信中）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;処理済（発注済・訂正済）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;訂正取消送信中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;終了（発注エラー・取消済・全約定・失効・期限切れ）&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="side">売買区分 &lt;br&gt;※指定された売買区分と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の売買区分を指定することができません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;売&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;買&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="cashmargin">取引区分 &lt;br&gt;※指定された取引区分と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の取引区分を指定することができません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;新規&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;返済&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;       (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrdersSuccess</returns>
        public async System.Threading.Tasks.Task<OrdersSuccess> OrdersGetAsync(string X_API_KEY, string product = default(string), string id = default(string), string updtime = default(string), string details = default(string), string symbol = default(string), string state = default(string), string side = default(string), string cashmargin = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrdersSuccess> localVarResponse = await OrdersGetWithHttpInfoAsync(X_API_KEY, product, id, updtime, details, symbol, state, side, cashmargin, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 注文約定照会 注文一覧を取得します。&lt;br&gt;※下記Queryパラメータは任意設定となります。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="product">取得する商品 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;すべて &lt;/td&gt;&lt;/tr&gt;      &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;現物&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;信用&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;先物&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;OP&lt;/td&gt;&lt;/tr&gt;            &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="id">注文番号&lt;br&gt;※指定された注文番号と一致する注文のみレスポンスします。&lt;br&gt;※指定された注文番号との比較では大文字小文字を区別しません。&lt;br&gt;※複数の注文番号を指定することはできません。 (optional)</param>
        /// <param name="updtime">更新日時&lt;br&gt;※形式：yyyyMMddHHmmss （例：20201201123456）&lt;br&gt;※指定された更新日時以降（指定日時含む）に更新された注文のみレスポンスします。&lt;br&gt;※複数の更新日時を指定することはできません。 (optional)</param>
        /// <param name="details">注文詳細抑止 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;true&lt;/td&gt;&lt;td&gt;注文詳細を出力する（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;注文詳細の出力しない&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="symbol">銘柄コード&lt;br&gt;※指定された銘柄コードと一致する注文のみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することができません。 (optional)</param>
        /// <param name="state">状態 &lt;br&gt;※指定された状態と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の状態を指定することはできません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;待機（発注待機）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;処理中（発注送信中）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;処理済（発注済・訂正済）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;訂正取消送信中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;終了（発注エラー・取消済・全約定・失効・期限切れ）&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="side">売買区分 &lt;br&gt;※指定された売買区分と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の売買区分を指定することができません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;売&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;買&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="cashmargin">取引区分 &lt;br&gt;※指定された取引区分と一致する注文のみレスポンスします。&lt;br&gt;※フィルタには数字の入力のみ受け付けます。&lt;br&gt;※複数の取引区分を指定することができません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;新規&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;返済&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;       (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrdersSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrdersSuccess>> OrdersGetWithHttpInfoAsync(string X_API_KEY, string product = default(string), string id = default(string), string updtime = default(string), string details = default(string), string symbol = default(string), string state = default(string), string side = default(string), string cashmargin = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling InfoApi->OrdersGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (product != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product", product));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (updtime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "updtime", updtime));
            }
            if (details != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "details", details));
            }
            if (symbol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (side != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "side", side));
            }
            if (cashmargin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "cashmargin", cashmargin));
            }
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OrdersSuccess>("/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 残高照会 残高一覧を取得します。&lt;br&gt;※下記Queryパラメータは任意設定となります。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="product">取得する商品 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;すべて&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;現物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;信用&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;OP&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="symbol">銘柄コード&lt;br&gt;※指定された銘柄コードと一致するポジションのみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することはできません。 (optional)</param>
        /// <returns>PositionsSuccess</returns>
        public PositionsSuccess PositionsGet(string X_API_KEY, string product = default(string), string symbol = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<PositionsSuccess> localVarResponse = PositionsGetWithHttpInfo(X_API_KEY, product, symbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 残高照会 残高一覧を取得します。&lt;br&gt;※下記Queryパラメータは任意設定となります。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="product">取得する商品 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;すべて&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;現物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;信用&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;OP&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="symbol">銘柄コード&lt;br&gt;※指定された銘柄コードと一致するポジションのみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することはできません。 (optional)</param>
        /// <returns>ApiResponse of PositionsSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<PositionsSuccess> PositionsGetWithHttpInfo(string X_API_KEY, string product = default(string), string symbol = default(string))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling InfoApi->PositionsGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (product != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product", product));
            }
            if (symbol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            }
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PositionsSuccess>("/positions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PositionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 残高照会 残高一覧を取得します。&lt;br&gt;※下記Queryパラメータは任意設定となります。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="product">取得する商品 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;すべて&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;現物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;信用&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;OP&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="symbol">銘柄コード&lt;br&gt;※指定された銘柄コードと一致するポジションのみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することはできません。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PositionsSuccess</returns>
        public async System.Threading.Tasks.Task<PositionsSuccess> PositionsGetAsync(string X_API_KEY, string product = default(string), string symbol = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PositionsSuccess> localVarResponse = await PositionsGetWithHttpInfoAsync(X_API_KEY, product, symbol, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 残高照会 残高一覧を取得します。&lt;br&gt;※下記Queryパラメータは任意設定となります。
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="product">取得する商品 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;すべて&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;現物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;信用&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;OP&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="symbol">銘柄コード&lt;br&gt;※指定された銘柄コードと一致するポジションのみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することはできません。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PositionsSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PositionsSuccess>> PositionsGetWithHttpInfoAsync(string X_API_KEY, string product = default(string), string symbol = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling InfoApi->PositionsGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (product != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product", product));
            }
            if (symbol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            }
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PositionsSuccess>("/positions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PositionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 詳細ランキング 詳細ランキング画面と同様の各種ランキングを返します。 &lt;br&gt;ランキングの対象日はkabuステーションが保持している当日のデータとなります。 &lt;br&gt;※株価情報ランキング、業種別指数ランキングは、下記の時間帯でデータがクリアされるため、 &lt;br&gt;その間の詳細ランキングAPIは空レスポンスとなります。 &lt;br&gt;データクリア：平日7:53頃-9:00過ぎ頃 &lt;br&gt;※信用情報ランキングは毎週第３営業日の7:55頃にデータが更新されます。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="type">種別&lt;br&gt;※信用情報ランキングに「福証」「札証」を指定した場合は、空レスポンスになります &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;値上がり率（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;値下がり率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;売買高上位&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;売買代金&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;TICK回数&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;売買高急増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;売買代金急増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;信用売残増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;信用売残減&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;信用買残増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;信用買残減&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;信用高倍率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;信用低倍率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;業種別値上がり率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;業種別値下がり率&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="exchangeDivision">市場&lt;br&gt;※業種別値上がり率・値下がり率に市場を指定しても無視されます &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;ALL&lt;/td&gt;&lt;td&gt;全市場（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T&lt;/td&gt;&lt;td&gt;東証全体&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;&lt;td&gt;東証一部&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T2&lt;/td&gt;&lt;td&gt;東証二部&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TM&lt;/td&gt;&lt;td&gt;マザーズ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JQ&lt;/td&gt;&lt;td&gt;JASDAQ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;M&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;FK&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;S&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <returns>OneOfRankingDefaultResponseRankingByTickCountResponseRankingByTradeVolumeResponseRankingByTradeValueResponseRankingByMarginResponseRankingByCategoryResponse</returns>
        public RankingDefaultResponse RankingGet(string X_API_KEY, string type, string exchangeDivision)
        {
            Org.OpenAPITools.Client.ApiResponse<RankingDefaultResponse> localVarResponse = RankingGetWithHttpInfo(X_API_KEY, type, exchangeDivision);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 詳細ランキング 詳細ランキング画面と同様の各種ランキングを返します。 &lt;br&gt;ランキングの対象日はkabuステーションが保持している当日のデータとなります。 &lt;br&gt;※株価情報ランキング、業種別指数ランキングは、下記の時間帯でデータがクリアされるため、 &lt;br&gt;その間の詳細ランキングAPIは空レスポンスとなります。 &lt;br&gt;データクリア：平日7:53頃-9:00過ぎ頃 &lt;br&gt;※信用情報ランキングは毎週第３営業日の7:55頃にデータが更新されます。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="type">種別&lt;br&gt;※信用情報ランキングに「福証」「札証」を指定した場合は、空レスポンスになります &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;値上がり率（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;値下がり率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;売買高上位&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;売買代金&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;TICK回数&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;売買高急増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;売買代金急増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;信用売残増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;信用売残減&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;信用買残増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;信用買残減&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;信用高倍率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;信用低倍率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;業種別値上がり率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;業種別値下がり率&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="exchangeDivision">市場&lt;br&gt;※業種別値上がり率・値下がり率に市場を指定しても無視されます &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;ALL&lt;/td&gt;&lt;td&gt;全市場（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T&lt;/td&gt;&lt;td&gt;東証全体&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;&lt;td&gt;東証一部&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T2&lt;/td&gt;&lt;td&gt;東証二部&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TM&lt;/td&gt;&lt;td&gt;マザーズ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JQ&lt;/td&gt;&lt;td&gt;JASDAQ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;M&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;FK&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;S&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <returns>ApiResponse of OneOfRankingDefaultResponseRankingByTickCountResponseRankingByTradeVolumeResponseRankingByTradeValueResponseRankingByMarginResponseRankingByCategoryResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<RankingDefaultResponse> RankingGetWithHttpInfo(string X_API_KEY, string type, string exchangeDivision)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling InfoApi->RankingGet");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling InfoApi->RankingGet");

            // verify the required parameter 'exchangeDivision' is set
            if (exchangeDivision == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'exchangeDivision' when calling InfoApi->RankingGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Type", type));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ExchangeDivision", exchangeDivision));
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<RankingDefaultResponse>("/ranking", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RankingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 詳細ランキング 詳細ランキング画面と同様の各種ランキングを返します。 &lt;br&gt;ランキングの対象日はkabuステーションが保持している当日のデータとなります。 &lt;br&gt;※株価情報ランキング、業種別指数ランキングは、下記の時間帯でデータがクリアされるため、 &lt;br&gt;その間の詳細ランキングAPIは空レスポンスとなります。 &lt;br&gt;データクリア：平日7:53頃-9:00過ぎ頃 &lt;br&gt;※信用情報ランキングは毎週第３営業日の7:55頃にデータが更新されます。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="type">種別&lt;br&gt;※信用情報ランキングに「福証」「札証」を指定した場合は、空レスポンスになります &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;値上がり率（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;値下がり率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;売買高上位&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;売買代金&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;TICK回数&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;売買高急増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;売買代金急増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;信用売残増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;信用売残減&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;信用買残増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;信用買残減&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;信用高倍率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;信用低倍率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;業種別値上がり率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;業種別値下がり率&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="exchangeDivision">市場&lt;br&gt;※業種別値上がり率・値下がり率に市場を指定しても無視されます &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;ALL&lt;/td&gt;&lt;td&gt;全市場（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T&lt;/td&gt;&lt;td&gt;東証全体&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;&lt;td&gt;東証一部&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T2&lt;/td&gt;&lt;td&gt;東証二部&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TM&lt;/td&gt;&lt;td&gt;マザーズ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JQ&lt;/td&gt;&lt;td&gt;JASDAQ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;M&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;FK&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;S&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OneOfRankingDefaultResponseRankingByTickCountResponseRankingByTradeVolumeResponseRankingByTradeValueResponseRankingByMarginResponseRankingByCategoryResponse</returns>
        public async System.Threading.Tasks.Task<RankingDefaultResponse> RankingGetAsync(string X_API_KEY, string type, string exchangeDivision, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RankingDefaultResponse> localVarResponse = await RankingGetWithHttpInfoAsync(X_API_KEY, type, exchangeDivision, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 詳細ランキング 詳細ランキング画面と同様の各種ランキングを返します。 &lt;br&gt;ランキングの対象日はkabuステーションが保持している当日のデータとなります。 &lt;br&gt;※株価情報ランキング、業種別指数ランキングは、下記の時間帯でデータがクリアされるため、 &lt;br&gt;その間の詳細ランキングAPIは空レスポンスとなります。 &lt;br&gt;データクリア：平日7:53頃-9:00過ぎ頃 &lt;br&gt;※信用情報ランキングは毎週第３営業日の7:55頃にデータが更新されます。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="type">種別&lt;br&gt;※信用情報ランキングに「福証」「札証」を指定した場合は、空レスポンスになります &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;値上がり率（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;値下がり率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;売買高上位&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;売買代金&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;TICK回数&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;売買高急増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;売買代金急増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;信用売残増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;信用売残減&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;信用買残増&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;信用買残減&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;信用高倍率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;信用低倍率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;業種別値上がり率&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;業種別値下がり率&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="exchangeDivision">市場&lt;br&gt;※業種別値上がり率・値下がり率に市場を指定しても無視されます &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;ALL&lt;/td&gt;&lt;td&gt;全市場（デフォルト）&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T&lt;/td&gt;&lt;td&gt;東証全体&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;&lt;td&gt;東証一部&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;T2&lt;/td&gt;&lt;td&gt;東証二部&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TM&lt;/td&gt;&lt;td&gt;マザーズ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JQ&lt;/td&gt;&lt;td&gt;JASDAQ&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;M&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;FK&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;S&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OneOfRankingDefaultResponseRankingByTickCountResponseRankingByTradeVolumeResponseRankingByTradeValueResponseRankingByMarginResponseRankingByCategoryResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RankingDefaultResponse>> RankingGetWithHttpInfoAsync(string X_API_KEY, string type, string exchangeDivision, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling InfoApi->RankingGet");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling InfoApi->RankingGet");

            // verify the required parameter 'exchangeDivision' is set
            if (exchangeDivision == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'exchangeDivision' when calling InfoApi->RankingGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Type", type));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ExchangeDivision", exchangeDivision));
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RankingDefaultResponse>("/ranking", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RankingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 銘柄情報 指定した銘柄情報を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <returns>SymbolSuccess</returns>
        public SymbolSuccess SymbolSymbolexchangeGet(string X_API_KEY, string symbol, string exchange)
        {
            Org.OpenAPITools.Client.ApiResponse<SymbolSuccess> localVarResponse = SymbolSymbolexchangeGetWithHttpInfo(X_API_KEY, symbol, exchange);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 銘柄情報 指定した銘柄情報を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <returns>ApiResponse of SymbolSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<SymbolSuccess> SymbolSymbolexchangeGetWithHttpInfo(string X_API_KEY, string symbol, string exchange)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling InfoApi->SymbolSymbolexchangeGet");

            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'symbol' when calling InfoApi->SymbolSymbolexchangeGet");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'exchange' when calling InfoApi->SymbolSymbolexchangeGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("symbol", Org.OpenAPITools.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("exchange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SymbolSuccess>("/symbol/{symbol}@{exchange}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SymbolSymbolexchangeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 銘柄情報 指定した銘柄情報を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SymbolSuccess</returns>
        public async System.Threading.Tasks.Task<SymbolSuccess> SymbolSymbolexchangeGetAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SymbolSuccess> localVarResponse = await SymbolSymbolexchangeGetWithHttpInfoAsync(X_API_KEY, symbol, exchange, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 銘柄情報 指定した銘柄情報を取得します
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="symbol">銘柄コード</param>
        /// <param name="exchange">市場コード &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;東証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;名証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;福証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;札証&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;日通し&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;日中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;夜間&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SymbolSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SymbolSuccess>> SymbolSymbolexchangeGetWithHttpInfoAsync(string X_API_KEY, string symbol, string exchange, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling InfoApi->SymbolSymbolexchangeGet");

            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'symbol' when calling InfoApi->SymbolSymbolexchangeGet");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'exchange' when calling InfoApi->SymbolSymbolexchangeGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("symbol", Org.OpenAPITools.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("exchange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SymbolSuccess>("/symbol/{symbol}@{exchange}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SymbolSymbolexchangeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 先物銘柄コード取得 先物銘柄コード取得
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="derivMonth">限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。</param>
        /// <param name="futureCode">先物コード&lt;br&gt;※大文字小文字は区別しません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;NK225&lt;/td&gt;&lt;td&gt;日経平均先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;NK225mini&lt;/td&gt;&lt;td&gt;日経225mini先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIX&lt;/td&gt;&lt;td&gt;TOPIX先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIXmini&lt;/td&gt;&lt;td&gt;ミニTOPIX先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;MOTHERS&lt;/td&gt;&lt;td&gt;東証マザーズ先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JPX400&lt;/td&gt;&lt;td&gt;JPX日経400先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;DOW&lt;/td&gt;&lt;td&gt;NYダウ先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;VI&lt;/td&gt;&lt;td&gt;日経平均VI先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Core30&lt;/td&gt;&lt;td&gt;TOPIX Core30先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;REIT&lt;/td&gt;&lt;td&gt;東証REIT指数先物&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <returns>SymbolNameSuccess</returns>
        public SymbolNameSuccess SymbolnameFutureGet(string X_API_KEY, int derivMonth, string futureCode = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<SymbolNameSuccess> localVarResponse = SymbolnameFutureGetWithHttpInfo(X_API_KEY, derivMonth, futureCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 先物銘柄コード取得 先物銘柄コード取得
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="derivMonth">限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。</param>
        /// <param name="futureCode">先物コード&lt;br&gt;※大文字小文字は区別しません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;NK225&lt;/td&gt;&lt;td&gt;日経平均先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;NK225mini&lt;/td&gt;&lt;td&gt;日経225mini先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIX&lt;/td&gt;&lt;td&gt;TOPIX先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIXmini&lt;/td&gt;&lt;td&gt;ミニTOPIX先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;MOTHERS&lt;/td&gt;&lt;td&gt;東証マザーズ先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JPX400&lt;/td&gt;&lt;td&gt;JPX日経400先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;DOW&lt;/td&gt;&lt;td&gt;NYダウ先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;VI&lt;/td&gt;&lt;td&gt;日経平均VI先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Core30&lt;/td&gt;&lt;td&gt;TOPIX Core30先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;REIT&lt;/td&gt;&lt;td&gt;東証REIT指数先物&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <returns>ApiResponse of SymbolNameSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<SymbolNameSuccess> SymbolnameFutureGetWithHttpInfo(string X_API_KEY, int derivMonth, string futureCode = default(string))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling InfoApi->SymbolnameFutureGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (futureCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "FutureCode", futureCode));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DerivMonth", derivMonth));
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SymbolNameSuccess>("/symbolname/future", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SymbolnameFutureGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 先物銘柄コード取得 先物銘柄コード取得
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="derivMonth">限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。</param>
        /// <param name="futureCode">先物コード&lt;br&gt;※大文字小文字は区別しません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;NK225&lt;/td&gt;&lt;td&gt;日経平均先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;NK225mini&lt;/td&gt;&lt;td&gt;日経225mini先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIX&lt;/td&gt;&lt;td&gt;TOPIX先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIXmini&lt;/td&gt;&lt;td&gt;ミニTOPIX先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;MOTHERS&lt;/td&gt;&lt;td&gt;東証マザーズ先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JPX400&lt;/td&gt;&lt;td&gt;JPX日経400先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;DOW&lt;/td&gt;&lt;td&gt;NYダウ先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;VI&lt;/td&gt;&lt;td&gt;日経平均VI先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Core30&lt;/td&gt;&lt;td&gt;TOPIX Core30先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;REIT&lt;/td&gt;&lt;td&gt;東証REIT指数先物&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SymbolNameSuccess</returns>
        public async System.Threading.Tasks.Task<SymbolNameSuccess> SymbolnameFutureGetAsync(string X_API_KEY, int derivMonth, string futureCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SymbolNameSuccess> localVarResponse = await SymbolnameFutureGetWithHttpInfoAsync(X_API_KEY, derivMonth, futureCode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 先物銘柄コード取得 先物銘柄コード取得
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="derivMonth">限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。</param>
        /// <param name="futureCode">先物コード&lt;br&gt;※大文字小文字は区別しません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;NK225&lt;/td&gt;&lt;td&gt;日経平均先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;NK225mini&lt;/td&gt;&lt;td&gt;日経225mini先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIX&lt;/td&gt;&lt;td&gt;TOPIX先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TOPIXmini&lt;/td&gt;&lt;td&gt;ミニTOPIX先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;MOTHERS&lt;/td&gt;&lt;td&gt;東証マザーズ先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;JPX400&lt;/td&gt;&lt;td&gt;JPX日経400先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;DOW&lt;/td&gt;&lt;td&gt;NYダウ先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;VI&lt;/td&gt;&lt;td&gt;日経平均VI先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Core30&lt;/td&gt;&lt;td&gt;TOPIX Core30先物&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;REIT&lt;/td&gt;&lt;td&gt;東証REIT指数先物&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SymbolNameSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SymbolNameSuccess>> SymbolnameFutureGetWithHttpInfoAsync(string X_API_KEY, int derivMonth, string futureCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling InfoApi->SymbolnameFutureGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (futureCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "FutureCode", futureCode));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DerivMonth", derivMonth));
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SymbolNameSuccess>("/symbolname/future", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SymbolnameFutureGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// オプション銘柄コード取得 オプション銘柄コード取得
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="derivMonth">限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。</param>
        /// <param name="putOrCall">コール or プット&lt;br&gt;※大文字小文字は区別しません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;P&lt;/td&gt;&lt;td&gt;PUT&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;CALL&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="strikePrice">権利行使価格&lt;br&gt;※0を指定した場合、APIを実行した時点でのATMとなります。</param>
        /// <returns>SymbolNameSuccess</returns>
        public SymbolNameSuccess SymbolnameOptionGet(string X_API_KEY, int derivMonth, string putOrCall, int strikePrice)
        {
            Org.OpenAPITools.Client.ApiResponse<SymbolNameSuccess> localVarResponse = SymbolnameOptionGetWithHttpInfo(X_API_KEY, derivMonth, putOrCall, strikePrice);
            return localVarResponse.Data;
        }

        /// <summary>
        /// オプション銘柄コード取得 オプション銘柄コード取得
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="derivMonth">限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。</param>
        /// <param name="putOrCall">コール or プット&lt;br&gt;※大文字小文字は区別しません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;P&lt;/td&gt;&lt;td&gt;PUT&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;CALL&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="strikePrice">権利行使価格&lt;br&gt;※0を指定した場合、APIを実行した時点でのATMとなります。</param>
        /// <returns>ApiResponse of SymbolNameSuccess</returns>
        public Org.OpenAPITools.Client.ApiResponse<SymbolNameSuccess> SymbolnameOptionGetWithHttpInfo(string X_API_KEY, int derivMonth, string putOrCall, int strikePrice)
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling InfoApi->SymbolnameOptionGet");

            // verify the required parameter 'putOrCall' is set
            if (putOrCall == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'putOrCall' when calling InfoApi->SymbolnameOptionGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DerivMonth", derivMonth));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "PutOrCall", putOrCall));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "StrikePrice", strikePrice));
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SymbolNameSuccess>("/symbolname/option", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SymbolnameOptionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// オプション銘柄コード取得 オプション銘柄コード取得
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="derivMonth">限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。</param>
        /// <param name="putOrCall">コール or プット&lt;br&gt;※大文字小文字は区別しません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;P&lt;/td&gt;&lt;td&gt;PUT&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;CALL&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="strikePrice">権利行使価格&lt;br&gt;※0を指定した場合、APIを実行した時点でのATMとなります。</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SymbolNameSuccess</returns>
        public async System.Threading.Tasks.Task<SymbolNameSuccess> SymbolnameOptionGetAsync(string X_API_KEY, int derivMonth, string putOrCall, int strikePrice, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SymbolNameSuccess> localVarResponse = await SymbolnameOptionGetWithHttpInfoAsync(X_API_KEY, derivMonth, putOrCall, strikePrice, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// オプション銘柄コード取得 オプション銘柄コード取得
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_API_KEY">トークン発行メソッドで取得した文字列</param>
        /// <param name="derivMonth">限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。</param>
        /// <param name="putOrCall">コール or プット&lt;br&gt;※大文字小文字は区別しません。 &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;定義値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;P&lt;/td&gt;&lt;td&gt;PUT&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;CALL&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;</param>
        /// <param name="strikePrice">権利行使価格&lt;br&gt;※0を指定した場合、APIを実行した時点でのATMとなります。</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SymbolNameSuccess)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SymbolNameSuccess>> SymbolnameOptionGetWithHttpInfoAsync(string X_API_KEY, int derivMonth, string putOrCall, int strikePrice, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_API_KEY' is set
            if (X_API_KEY == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_API_KEY' when calling InfoApi->SymbolnameOptionGet");

            // verify the required parameter 'putOrCall' is set
            if (putOrCall == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'putOrCall' when calling InfoApi->SymbolnameOptionGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DerivMonth", derivMonth));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "PutOrCall", putOrCall));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "StrikePrice", strikePrice));
            localVarRequestOptions.HeaderParameters.Add("X-API-KEY", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_API_KEY)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SymbolNameSuccess>("/symbolname/option", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SymbolnameOptionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
